{"version":3,"file":"cdk-stepper.umd.js","sources":["../../src/cdk/stepper/index.ts","../../src/cdk/stepper/public_api.ts","../../src/cdk/stepper/stepper-button.ts","../../src/cdk/stepper/stepper.ts","../../src/cdk/stepper/step-label.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkStepperModule,StepContentPositionState,StepperSelectionEvent,CdkStep,CdkStepper,CdkStepLabel,CdkStepperNext,CdkStepperPrevious} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {BidiModule} from '@angular/cdk/bidi';\nexport class CdkStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BidiModule, CommonModule],\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperModule.ctorParameters;\n}\n\n\nexport {StepContentPositionState,StepperSelectionEvent,CdkStep,CdkStepper} from './stepper';\nexport {CdkStepLabel} from './step-label';\nexport {CdkStepperNext,CdkStepperPrevious} from './stepper-button';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper} from './stepper';\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class CdkStepperNext {\n/**\n * @param {?} _stepper\n */\nconstructor(public _stepper: CdkStepper) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[cdkStepperNext]',\n  host: {'(click)': '_stepper.next()'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, },\n];\n}\n\nfunction CdkStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperNext.ctorParameters;\n/** @type {?} */\nCdkStepperNext.prototype._stepper;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class CdkStepperPrevious {\n/**\n * @param {?} _stepper\n */\nconstructor(public _stepper: CdkStepper) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[cdkStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, },\n];\n}\n\nfunction CdkStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperPrevious.ctorParameters;\n/** @type {?} */\nCdkStepperPrevious.prototype._stepper;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  Directive,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ElementRef,\n  Component,\n  ContentChild,\n  ViewChild,\n  TemplateRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  forwardRef\n} from '@angular/core';\nimport {LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {CdkStepLabel} from './step-label';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractControl} from '@angular/forms';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\n/**\n * Used to generate unique ID for each stepper component.\n */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n/**\n * Change event emitted on selection changes.\n */\nexport class StepperSelectionEvent {\n/**\n * Index of the step now selected.\n */\nselectedIndex: number;\n/**\n * Index of the step previously selected.\n */\npreviouslySelectedIndex: number;\n/**\n * The step instance now selected.\n */\nselectedStep: CdkStep;\n/**\n * The step instance previously selected.\n */\npreviouslySelectedStep: CdkStep;\n}\n\nfunction StepperSelectionEvent_tsickle_Closure_declarations() {\n/**\n * Index of the step now selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.selectedIndex;\n/**\n * Index of the step previously selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.previouslySelectedIndex;\n/**\n * The step instance now selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.selectedStep;\n/**\n * The step instance previously selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.previouslySelectedStep;\n}\n\nexport class CdkStep {\n/**\n * Template for step label if it exists.\n */\nstepLabel: CdkStepLabel;\n/**\n * Template for step content.\n */\ncontent: TemplateRef<any>;\n/**\n * The top level abstract control of the step.\n */\nstepControl: AbstractControl;\n/**\n * Whether user has seen the expanded step content or not .\n */\ninteracted = false;\n/**\n * Label of the step.\n */\nlabel: string;\n/**\n * @return {?}\n */\nget editable() { return this._editable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset editable(value: any) {\n    this._editable = coerceBooleanProperty(value);\n  }\nprivate _editable = true;\n/**\n * Whether the completion of step is optional or not.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional = false;\n/**\n * Return whether step is completed or not.\n * @return {?}\n */\nget completed() {\n    return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset completed(value: any) {\n    this._customCompleted = coerceBooleanProperty(value);\n  }\nprivate _customCompleted: boolean | null = null;\n/**\n * @return {?}\n */\nprivate get _defaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n/**\n * @param {?} _stepper\n */\nconstructor(\nprivate _stepper: CdkStepper) { }\n/**\n * Selects this step component.\n * @return {?}\n */\nselect(): void {\n    this._stepper.selected = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'cdk-step',\n  templateUrl: 'step.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(() => CdkStepper), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [CdkStepLabel, ] },],\n'content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'stepControl': [{ type: Input },],\n'label': [{ type: Input },],\n'editable': [{ type: Input },],\n'optional': [{ type: Input },],\n'completed': [{ type: Input },],\n};\n}\n\nfunction CdkStep_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStep.ctorParameters;\n/** @type {?} */\nCdkStep.propDecorators;\n/**\n * Template for step label if it exists.\n * @type {?}\n */\nCdkStep.prototype.stepLabel;\n/**\n * Template for step content.\n * @type {?}\n */\nCdkStep.prototype.content;\n/**\n * The top level abstract control of the step.\n * @type {?}\n */\nCdkStep.prototype.stepControl;\n/**\n * Whether user has seen the expanded step content or not .\n * @type {?}\n */\nCdkStep.prototype.interacted;\n/**\n * Label of the step.\n * @type {?}\n */\nCdkStep.prototype.label;\n/** @type {?} */\nCdkStep.prototype._editable;\n/** @type {?} */\nCdkStep.prototype._optional;\n/** @type {?} */\nCdkStep.prototype._customCompleted;\n/** @type {?} */\nCdkStep.prototype._stepper;\n}\n\nexport class CdkStepper {\n/**\n * The list of step components that the stepper is holding.\n */\n_steps: QueryList<CdkStep>;\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Whether the validity of previous steps should be checked or not.\n * @return {?}\n */\nget linear() { return this._linear; }\n/**\n * @param {?} value\n * @return {?}\n */\nset linear(value: any) { this._linear = coerceBooleanProperty(value); }\nprivate _linear = false;\n/**\n * The index of the selected step.\n * @return {?}\n */\nget selectedIndex() { return this._selectedIndex; }\n/**\n * @param {?} index\n * @return {?}\n */\nset selectedIndex(index: number) {\n    if (this._anyControlsInvalid(index)\n        || index < this._selectedIndex && !this._steps.toArray()[index].editable) {\n      // remove focus from clicked step header if the step is not able to be selected\n      this._stepHeader.toArray()[index].nativeElement.blur();\n    } else if (this._selectedIndex != index) {\n      this._emitStepperSelectionEvent(index);\n      this._focusIndex = this._selectedIndex;\n    }\n  }\nprivate _selectedIndex: number = 0;\n/**\n * The step that is selected.\n * @return {?}\n */\nget selected() { return this._steps[this.selectedIndex]; }\n/**\n * @param {?} step\n * @return {?}\n */\nset selected(step: CdkStep) {\n    this.selectedIndex = this._steps.toArray().indexOf(step);\n  }\n/**\n * Event emitted when the selected step has changed.\n */\nselectionChange = new EventEmitter<StepperSelectionEvent>();\n/**\n * The index of the step that the focus can be set.\n */\n_focusIndex: number = 0;\n/**\n * Used to track unique ID for each stepper component.\n */\n_groupId: number;\n/**\n * @param {?} _dir\n */\nconstructor(\nprivate _dir: Directionality) {\n    this._groupId = nextId++;\n  }\n/**\n * Selects and focuses the next step in list.\n * @return {?}\n */\nnext(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n  }\n/**\n * Selects and focuses the previous step in list.\n * @return {?}\n */\nprevious(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n/**\n * Returns a unique id for each step label element.\n * @param {?} i\n * @return {?}\n */\n_getStepLabelId(i: number): string {\n    return `mat-step-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns unique id for each step content element.\n * @param {?} i\n * @return {?}\n */\n_getStepContentId(i: number): string {\n    return `mat-step-content-${this._groupId}-${i}`;\n  }\n/**\n * Returns position state of the step with the given index.\n * @param {?} index\n * @return {?}\n */\n_getAnimationDirection(index: number): StepContentPositionState {\n    const /** @type {?} */ position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n/**\n * Returns the type of icon to be displayed.\n * @param {?} index\n * @return {?}\n */\n_getIndicatorType(index: number): 'number' | 'edit' | 'done' {\n    const /** @type {?} */ step = this._steps.toArray()[index];\n    if (!step.completed || this._selectedIndex == index) {\n      return 'number';\n    } else {\n      return step.editable ? 'edit' : 'done';\n    }\n  }\n/**\n * @param {?} newIndex\n * @return {?}\n */\nprivate _emitStepperSelectionEvent(newIndex: number): void {\n    const /** @type {?} */ stepsArray = this._steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n    this._selectedIndex = newIndex;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusPreviousStep();\n        } else {\n          this._focusNextStep();\n        }\n        break;\n      case LEFT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusNextStep();\n        } else {\n          this._focusPreviousStep();\n        }\n        break;\n      case SPACE:\n      case ENTER:\n        this.selectedIndex = this._focusIndex;\n        break;\n      default:\n        // Return to avoid calling preventDefault on keys that are not explicitly handled.\n        return;\n    }\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\nprivate _focusNextStep() {\n    this._focusStep((this._focusIndex + 1) % this._steps.length);\n  }\n/**\n * @return {?}\n */\nprivate _focusPreviousStep() {\n    this._focusStep((this._focusIndex + this._steps.length - 1) % this._steps.length);\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _focusStep(index: number) {\n    this._focusIndex = index;\n    this._stepHeader.toArray()[this._focusIndex].nativeElement.focus();\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _anyControlsInvalid(index: number): boolean {\n    this._steps.toArray()[this._selectedIndex].interacted = true;\n    if (this._linear && index >= 0) {\n      return this._steps.toArray().slice(0, index).some(step => step.stepControl.invalid);\n    }\n    return false;\n  }\n/**\n * @return {?}\n */\nprivate _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkStepper]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_steps': [{ type: ContentChildren, args: [CdkStep, ] },],\n'linear': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n};\n}\n\nfunction CdkStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepper.ctorParameters;\n/** @type {?} */\nCdkStepper.propDecorators;\n/**\n * The list of step components that the stepper is holding.\n * @type {?}\n */\nCdkStepper.prototype._steps;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nCdkStepper.prototype._stepHeader;\n/** @type {?} */\nCdkStepper.prototype._linear;\n/** @type {?} */\nCdkStepper.prototype._selectedIndex;\n/**\n * Event emitted when the selected step has changed.\n * @type {?}\n */\nCdkStepper.prototype.selectionChange;\n/**\n * The index of the step that the focus can be set.\n * @type {?}\n */\nCdkStepper.prototype._focusIndex;\n/**\n * Used to track unique ID for each stepper component.\n * @type {?}\n */\nCdkStepper.prototype._groupId;\n/** @type {?} */\nCdkStepper.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nexport class CdkStepLabel {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepLabel.ctorParameters;\n/** @type {?} */\nCdkStepLabel.prototype.template;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Directive","Input","Directionality","Optional","RIGHT_ARROW","coerceBooleanProperty","ViewEncapsulation","Component","TemplateRef"],"mappings":"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"}