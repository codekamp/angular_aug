{"version":3,"file":"cdk-a11y.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/a11y/interactivity-checker.ts","../../src/cdk/a11y/aria-reference.ts","../../src/cdk/a11y/aria-describer.ts","../../src/cdk/a11y/focus-trap.ts","../../src/cdk/a11y/live-announcer.ts","../../src/cdk/a11y/focus-monitor.ts","../../src/cdk/a11y/list-key-manager.ts","../../src/cdk/a11y/activedescendant-key-manager.ts","../../src/cdk/a11y/fake-mousedown.ts","../../src/cdk/a11y/focus-key-manager.ts","../../src/cdk/a11y/public_api.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * IDs are deliminated by an empty space, as per the spec.\n */\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const /** @type {?} */ ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const /** @type {?} */ ids = getAriaReferenceIds(el, attr);\n  const /** @type {?} */ filteredIds = ids.filter(val => val != id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the aria-describedby.\n */\nexport interface RegisteredMessage {\n  messageElement: Element;\n  referenceCount: number;\n}\n/**\n * ID used for the body container where all messages are appended.\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n */\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n/**\n * Container for all registered messages.\n */\nlet messagesContainer: HTMLElement | null = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nexport class AriaDescriber {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) { }\n/**\n * Adds to the host element an aria-describedby reference to a hidden element that contains\n * the message. If the same message has already been registered, then it will reuse the created\n * message element.\n * @param {?} hostElement\n * @param {?} message\n * @return {?}\n */\ndescribe(hostElement: Element, message: string) {\n    if (!this._platform.isBrowser || !message.trim()) { return; }\n\n    if (!messageRegistry.has(message)) {\n      createMessageElement(message);\n    }\n\n    if (!isElementDescribedByMessage(hostElement, message)) {\n      addMessageReference(hostElement, message);\n    }\n  }\n/**\n * Removes the host element's aria-describedby reference to the message element.\n * @param {?} hostElement\n * @param {?} message\n * @return {?}\n */\nremoveDescription(hostElement: Element, message: string) {\n    if (!this._platform.isBrowser || !message.trim()) {\n      return;\n    }\n\n    if (isElementDescribedByMessage(hostElement, message)) {\n      removeMessageReference(hostElement, message);\n    }\n\n    const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      deleteMessagesContainer();\n    }\n  }\n/**\n * Unregisters all created message elements and removes the message container.\n * @return {?}\n */\nngOnDestroy() {\n    if (!this._platform.isBrowser) { return; }\n\n    const /** @type {?} */ describedElements = document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n    for (let /** @type {?} */ i = 0; i < describedElements.length; i++) {\n      removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction AriaDescriber_tsickle_Closure_declarations() {\n/** @type {?} */\nAriaDescriber.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAriaDescriber.ctorParameters;\n/** @type {?} */\nAriaDescriber.prototype._platform;\n}\n\n/**\n * Creates a new element in the visually hidden message container element with the message\n * as its content and adds it to the message registry.\n * @param {?} message\n * @return {?}\n */\nfunction createMessageElement(message: string) {\n  const /** @type {?} */ messageElement = document.createElement('div');\n  messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n  messageElement.appendChild( /** @type {?} */((document.createTextNode(message))));\n\n  if (!messagesContainer) { createMessagesContainer(); } /** @type {?} */((\n  messagesContainer)).appendChild(messageElement);\n\n  messageRegistry.set(message, {messageElement, referenceCount: 0});\n}\n/**\n * Deletes the message element from the global messages container.\n * @param {?} message\n * @return {?}\n */\nfunction deleteMessageElement(message: string) {\n  const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n  const /** @type {?} */ messageElement = registeredMessage && registeredMessage.messageElement;\n  if (messagesContainer && messageElement) {\n    messagesContainer.removeChild(messageElement);\n  }\n  messageRegistry.delete(message);\n}\n/**\n * Creates the global container for all aria-describedby messages.\n * @return {?}\n */\nfunction createMessagesContainer() {\n  messagesContainer = document.createElement('div');\n\n  messagesContainer.setAttribute('id', MESSAGES_CONTAINER_ID);\n  messagesContainer.setAttribute('aria-hidden', 'true');\n  messagesContainer.style.display = 'none';\n  document.body.appendChild(messagesContainer);\n}\n/**\n * Deletes the global messages container.\n * @return {?}\n */\nfunction deleteMessagesContainer() {\n  document.body.removeChild( /** @type {?} */((messagesContainer)));\n  messagesContainer = null;\n}\n/**\n * Removes all cdk-describedby messages that are hosted through the element.\n * @param {?} element\n * @return {?}\n */\nfunction removeCdkDescribedByReferenceIds(element: Element) {\n  // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n  const /** @type {?} */ originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n      .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n  element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n}\n/**\n * Adds a message reference to the element using aria-describedby and increments the registered\n * message's reference count.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction addMessageReference(element: Element, message: string) {\n  const /** @type {?} */ registeredMessage = /** @type {?} */(( messageRegistry.get(message)));\n\n  // Add the aria-describedby reference and set the describedby_host attribute to mark the element.\n  addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n  element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n  registeredMessage.referenceCount++;\n}\n/**\n * Removes a message reference from the element using aria-describedby and decrements the registered\n * message's reference count.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction removeMessageReference(element: Element, message: string) {\n  const /** @type {?} */ registeredMessage = /** @type {?} */(( messageRegistry.get(message)));\n  registeredMessage.referenceCount--;\n\n  removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n  element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n}\n/**\n * Returns true if the element has been described by the provided message ID.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction isElementDescribedByMessage(element: Element, message: string): boolean {\n  const /** @type {?} */ referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n  const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n  const /** @type {?} */ messageId = registeredMessage && registeredMessage.messageElement.id;\n\n  return !!messageId && referenceIds.indexOf(messageId) != -1;\n}\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} platform\n * @return {?}\n */\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(\n    parentDispatcher: AriaDescriber, platform: Platform) {\n  return parentDispatcher || new AriaDescriber(platform);\n}\n/**\n * \\@docs-private\n */\nexport const ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [\n    [new Optional(), new SkipSelf(), AriaDescriber],\n    Platform\n  ],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {first} from '@angular/cdk/rxjs';\nimport {InteractivityChecker} from './interactivity-checker';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement | null;\nprivate _endAnchor: HTMLElement | null;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _platform\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _platform: Platform,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    // If we're not on the browser, there can be no focus to trap.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => { /** @type {?} */((\n      this._startAnchor)).addEventListener('focus', () => {\n        this.focusLastTabbableElement();\n      }); /** @type {?} */((\n\n      this._endAnchor)).addEventListener('focus', () => {\n        this.focusFirstTabbableElement();\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore( /** @type {?} */((this._startAnchor)), this._element);\n        this._element.parentNode.insertBefore( /** @type {?} */((this._endAnchor)), this._element.nextSibling);\n      }\n    });\n  }\n/**\n * Waits for the zone to stabilize, then either focuses the first element that the\n * user specified, or the first tabbable element.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n/**\n * Get the specified boundary element of the trapped region.\n * @param {?} bound The boundary to get (start or end of trapped region).\n * @return {?} The boundary element.\n */\nprivate _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let /** @type {?} */ markers = /** @type {?} */(( this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>));\n\n    for (let /** @type {?} */ i = 0; i < markers.length; i++) {\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}',` +\n                     ` use 'cdk-focus-region-${bound}' instead.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n/**\n * Focuses the element that should be focused when the focus trap is initialized.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusInitialElement(): boolean {\n    const /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-initial]') as HTMLElement));\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusFirstTabbableElement(): boolean {\n    const /** @type {?} */ redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusLastTabbableElement(): boolean {\n    const /** @type {?} */ redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n/**\n * Executes a function when the zone is stable.\n * @param {?} fn\n * @return {?}\n */\nprivate _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(fn);\n    }\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._platform;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _platform\n * @param {?} _ngZone\n */\nconstructor(\nprivate _checker: InteractivityChecker,\nprivate _platform: Platform,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._platform, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: Platform, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._platform;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer implements OnDestroy {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n/**\n * \\@docs-private\n */\nexport const LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ cachedInfo = this._elementInfo.get(element); /** @type {?} */((\n      cachedInfo)).checkChildren = checkChildren;\n      return /** @type {?} */(( cachedInfo)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusMonitor.\n * @type {?}\n */\nFocusMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusMonitor.prototype._ngZone;\n/** @type {?} */\nFocusMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusMonitor;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {UP_ARROW, DOWN_ARROW, TAB, A, Z, ZERO, NINE} from '@angular/cdk/keycodes';\nimport {RxChain, debounceTime, filter, map, doOperator} from '@angular/cdk/rxjs';\n\n/**\n * This interface is for items that can be passed to a ListKeyManager.\n */\nexport interface ListKeyManagerOption {\n  disabled?: boolean;\n  getLabel?(): string;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\nprivate _activeItemIndex = -1;\nprivate _activeItem: T;\nprivate _wrap = false;\nprivate _letterKeyStream = new Subject<string>();\nprivate _typeaheadSubscription = Subscription.EMPTY;\nprivate _pressedLetters: string[] = [];\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) { }\n/**\n * Stream that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n */\ntabOut: Subject<void> = new Subject<void>();\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * @return {?}\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Turns on typeahead mode which allows users to set the active item by typing.\n * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n * @return {?}\n */\nwithTypeAhead(debounceInterval = 200): this {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = RxChain.from(this._letterKeyStream)\n      .call(doOperator, keyCode => this._pressedLetters.push(keyCode))\n      .call(debounceTime, debounceInterval)\n      .call(filter, () => this._pressedLetters.length > 0)\n      .call(map, () => this._pressedLetters.join(''))\n      .subscribe(inputString => {\n        const /** @type {?} */ items = this._items.toArray();\n\n        for (let /** @type {?} */ i = 0; i < items.length; i++) {\n          if ( /** @type {?} */((items[i].getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n            this.setActiveItem(i);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW: this.setNextItemActive(); break;\n      case UP_ARROW: this.setPreviousItemActive(); break;\n      case TAB: this.tabOut.next(); return;\n      default:\n        const /** @type {?} */ keyCode = event.keyCode;\n\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n/**\n * Index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n/**\n * The active item.\n * @return {?}\n */\nget activeItem(): T | null {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._letterKeyStream;\n/** @type {?} */\nListKeyManager.prototype._typeaheadSubscription;\n/** @type {?} */\nListKeyManager.prototype._pressedLetters;\n/**\n * Stream that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @type {?}\n */\nListKeyManager.prototype.tabOut;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  focus(): void;\n}\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FocusTrapDeprecatedDirective, FocusTrapDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {AriaDescriber, ARIA_DESCRIBER_PROVIDER} from './aria-describer';\nimport {CdkMonitorFocus, FOCUS_MONITOR_PROVIDER} from './focus-monitor';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective, CdkMonitorFocus],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective, CdkMonitorFocus],\n  providers: [\n    InteractivityChecker,\n    FocusTrapFactory,\n    AriaDescriber,\n    LIVE_ANNOUNCER_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    FOCUS_MONITOR_PROVIDER,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\nexport {Highlightable,ActiveDescendantKeyManager} from './activedescendant-key-manager';\nexport {RegisteredMessage,MESSAGES_CONTAINER_ID,CDK_DESCRIBEDBY_ID_PREFIX,CDK_DESCRIBEDBY_HOST_ATTRIBUTE,AriaDescriber,ARIA_DESCRIBER_PROVIDER_FACTORY,ARIA_DESCRIBER_PROVIDER} from './aria-describer';\nexport {isFakeMousedownFromScreenReader} from './fake-mousedown';\nexport {FocusableOption,FocusKeyManager} from './focus-key-manager';\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './focus-trap';\nexport {InteractivityChecker} from './interactivity-checker';\nexport {ListKeyManagerOption,ListKeyManager} from './list-key-manager';\nexport {LIVE_ANNOUNCER_ELEMENT_TOKEN,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_PROVIDER_FACTORY,LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusMonitor,CdkMonitorFocus,FOCUS_MONITOR_PROVIDER_FACTORY,FOCUS_MONITOR_PROVIDER} from './focus-monitor';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","element","offsetWidth","offsetHeight","getClientRects","length","isNativeFormElement","nodeName","toLowerCase","isHiddenInput","isInputElement","type","isAnchorWithHref","isAnchorElement","hasAttribute","hasValidTabIndex","undefined","tabIndex","isNaN","parseInt","getTabIndexValue","getAttribute","isPotentiallyTabbableIOS","inputType","getWindow","node","ownerDocument","defaultView","window","ids","push","id","trim","getAriaReferenceIds","el","attr","messagesContainer","createMessagesContainer","appendChild","messageElement","messageRegistry","set","message","referenceCount","deleteMessageElement","registeredMessage","get","document","createElement","setAttribute","MESSAGES_CONTAINER_ID","deleteMessagesContainer","originalReferenceIds","join","addAriaReferencedId","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","removeAriaReferencedId","isElementDescribedByMessage","referenceIds","messageId","setPrototypeOf","__proto__","Array","p","hasOwnProperty","InteractivityChecker","_platform","isDisabled","isVisible","hasGeometry","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","frameType","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isFocusable","isPotentiallyFocusable","decorators","Injectable","ctorParameters","Platform","FocusTrap","_element","_checker","_ngZone","deferAnchors","_enabled","attachAnchors","val","_startAnchor","_endAnchor","destroy","parentNode","removeChild","_this","_createAnchor","runOutsideAngular","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","Promise","resolve","_getRegionBoundary","bound","markers","querySelectorAll","i","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","focus","root","children","childNodes","tabbableChild","anchor","classList","add","_executeOnStable","fn","FocusTrapFactory","NgZone","_focusTrapFactory","focusTrap","_elementRef","nativeElement","enabled","coerceBooleanProperty","enumerable","configurable","FocusTrapDeprecatedDirective","ngAfterContentInit","Directive","args","ElementRef","value","FocusTrapDirective","ngOnDestroy","exportAs","LIVE_ANNOUNCER_ELEMENT_TOKEN","InjectionToken","LiveAnnouncer","politeness","_liveElement","textContent","setTimeout","liveEl","body","Optional","Inject","LIVE_ANNOUNCER_PROVIDER","provide","deps","SkipSelf","AriaDescriber","describe","hostElement","has","createMessageElement","addMessageReference","removeDescription","removeMessageReference","clear","ARIA_DESCRIBER_PROVIDER","_origin","_windowFocused","_elementInfo","WeakMap","_registerDocumentEvents","FocusMonitor","monitor","renderer","checkChildren","of","cachedInfo","subject","Subject","info","focusListener","event","_onFocus","blurListener","_onBlur","removeEventListener","asObservable","elementInfo","unlisten","focusVia","origin","_setOriginForCurrentEventQueue","_lastTouchTarget","_touchTimeout","clearTimeout","target","toggleClass","className","shouldSet","Node","focusTarget","contains","_lastFocusOrigin","_wasCausedByTouch","relatedTarget","CdkMonitorFocus","_focusMonitor","cdkFocusChange","EventEmitter","stopMonitoring","_monitorSubscription","unsubscribe","selector","Renderer2","useFactory","FOCUS_MONITOR_PROVIDER_FACTORY","ListKeyManager","_items","_activeItemIndex","_wrap","tabOut","withWrap","debounceInterval","some","item","getLabel","Error","call","doOperator","keyCode","_pressedLetters","debounceTime","filter","map","subscribe","inputString","items","toArray","toUpperCase","indexOf","setActiveItem","_activeItem","index","DOWN_ARROW","setNextItemActive","next","_letterKeyStream","key","toLocaleUpperCase","A","Z","ZERO","NINE","defineProperty","setFirstItemActive","_setActiveItemByDelta","setPreviousItemActive","setLastItemActive","_setActiveInWrapMode","delta","disabled","_setActiveInDefaultMode","_setActiveItemByIndex","fallbackDelta","ActiveDescendantKeyManager","_super","apply","arguments","tslib_1.__extends","then","activeItem","setInactiveStyles","setActiveStyles"],"mappings":"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"}