{"version":3,"file":"cdk-collections.umd.min.js","sources":["../../src/cdk/collections/data-source.ts","../../src/cdk/collections/selection.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {CollectionViewer} from './collection-viewer';\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * Connects a collection viewer (such as a data-table) to this data source. Note that\n * the stream provided will be accessed during change detection and should not directly change\n * values that are bound in template views.\n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?} Observable that emits a new value when the data changes.\n */\nconnect(collectionViewer: CollectionViewer) {}\n/**\n * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n * to perform any clean-up or tear-down operations when a view is being destroyed.\n * \n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?}\n */\ndisconnect(collectionViewer: CollectionViewer) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n"],"names":["DataSource","prototype","disconnect","collectionViewer","SelectionModel","_isMulti","initiallySelectedValues","_emitChanges","this","_selection","Set","_deselectedToEmit","_selectedToEmit","onChange","Subject","forEach","value","_this","_markSelected","Object","defineProperty","get","enumerable","configurable","_emitChangeEvent","_unmarkSelected","toggle","isSelected","deselect","select","_unmarkAll","has","isEmpty","size","hasValue","_selected","sort","predicate","length","eventData","SelectionChange","push"],"mappings":";;;;;;;gUAcA,QAAAA,+CAqBAA,EAAAC,UAAAC,WAAA,SAAAC,uBCIA,QAAAC,GAAAC,EAAAC,EAAAC,OAEY,KAAZF,IAAAA,GAAA,iDA1BGG,KAAHD,aAAAA,EAGGC,KAAHC,WAAA,GAAGC,KAGAF,KAAHG,qBAuBAH,KAAAI,mBAcAJ,KAAOK,SAAPL,KAAAD,aAAA,GAAAO,GAAAA,QAAA,KAAAR,IACQD,EACRC,EAAAS,QAAA,SAAAC,GAAA,MAAAC,GAAAC,cAAAF,KAIAR,KAAAU,cAAAZ,EAAA,yCA9BAa,QAAAC,eAAAhB,EAAAH,UAAA,YAMAoB,IAAA,wGA+BAC,YAAA,EACIC,cAAJ,mCAQAf,KAdGU,cAcHF,GACIR,KAdKgB,qDAsBThB,KAAAiB,gBAAAT,GACIR,KAfKgB,oBAsBTpB,EAAAH,UAAAyB,OAAA,SAAAV,GACIR,KAfKmB,WAeTX,GAAAR,KAAAoB,SAAAZ,GAAAR,KAAAqB,OAAAb,iCAOAR,KAAAsB,aACItB,KAAJgB,oBAOApB,EAhBWH,UAgBX0B,WAhBsC,SAgBtCX,GACA,MAAAR,MAAAC,WAAAsB,IAAAf,IAMAZ,EAAAH,UAAA+B,QAAA,WACA,MAAA,KAAAxB,KAAAC,WAAAwB,MAMA7B,EAAAH,UAAAiC,SAAA,WACI,OAjBK1B,KAiBTwB,wCAXAxB,KAAAH,UAAAG,KAAA2B,WAoBQ3B,KAnBK2B,UAmBbC,KAnBcC,IA4BdjC,EAAAH,UAAAuB,iBAAA,WAEI,GAAIhB,KAARI,gBAAA0B,QAAA9B,KAAAG,kBAAA2B,OAAA,CACA,GAAAC,GAAA,GAAAC,GAAAhC,KAAAI,gBAAAJ,KAAAG,0GAOIH,KAtBK2B,UAsBT,MASA/B,EAAAH,UAAAiB,cAAA,SAAAF,GACAR,KAAAmB,WAAAX,KACAR,KAAAH,+MARAG,KAAAG,kBAAA8B,KAAAzB,iDAsEAR,MAAAwB"}