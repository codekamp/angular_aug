{"version":3,"file":"slider.es5.js","sources":["../../../src/lib/slider/index.ts","../../../src/lib/slider/slider-module.ts","../../../src/lib/slider/slider.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,MAT_SLIDER_VALUE_ACCESSOR,MatSlider,MatSliderBase,MatSliderChange,MatSliderModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig} from '@angular/material/core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, BidiModule, A11yModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  mixinColor,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderBase.prototype._renderer;\n/** @type {?} */\nMdSliderBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSliderMixinBase = mixinColor(mixinDisabled(MdSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._focusMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AE+CA;;;;AAIA,MAAC,wBAAA,GAAA,EAAA,CAAA;;;;AAID,MADC,kBAAA,GAAA,CAAA,CAAA;;;;AAKD,MAFC,6BAAA,GAAA,CAAA,CAAA;;;;AAMD,MAHC,0BAAA,GAAA,EAAA,CAAA;;;;;AAQD,AAFC,MAAA,wBAAA,GAAA;IAGC,OAAO,EAAA,iBAAK;IACZ,WAAA,EAAA,UAAA,CAAA,MAAA,QAAA,CAAA;IACA,KAAK,EAAE,IAAI;CACZ,CAAC;;;;AAIF,AAAA,MAAA,cAAA,CAAA;CASC;AAED,AAaA;;;AAGA,AAAA,MAAA,YAAA,CAAA;;;;;IAKA,WAAA,CAvBqB,SAAW,EAAkB,WAAa,EAuB/D;QAvBqB,IAArB,CAAA,SAAqB,GAAA,SAAA,CAAW;QAAkB,IAAlD,CAAA,WAAkD,GAAA,WAAA,CAAa;KAAW;CAyBzE;AAED,AAOA,AAhCO,MAAM,kBAAA,GAAqB,UAAA,CAAW,aAAC,CAAa,YAAC,CAAY,EAAE,QAAA,CAAS,CAAC;;;;;AAqCpF,AAAA,MAAA,QA9BC,SAAA,kBAAA,CA8BD;;;;;;;;IAyWA,WAAA,CA5GG,QAAqB,EA6GV,UA5GY,EACJ,aAAe,EACf,kBAAoB,EACnB,IAAM,EAwG7B;QAKI,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QA/GV,IAAtB,CAAA,aAAsB,GAAA,aAAA,CAAe;QACf,IAAtB,CAAA,kBAAsB,GAAA,kBAAA,CAAoB;QACnB,IAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QAvRnB,IAAV,CAAA,OAAU,GAAU,KAAA,CAAM;QAYhB,IAAV,CAAA,IAAU,GAAe,GAAA,CAAI;QAiBnB,IAAV,CAAA,IAAU,GAAe,CAAA,CAAE;QAejB,IAAV,CAAA,KAAU,GAAgB,CAAA,CAAE;QAMlB,IAAV,CAAA,WAAU,GAAuB,KAAA,CAAM;QAsB7B,IAAV,CAAA,aAAU,GAAiC,CAAA,CAAE;QAyBnC,IAAV,CAAA,MAAU,GAAwB,IAAA,CAAK;QAQ7B,IAAV,CAAA,SAAU,GAAY,KAAA,CAAM;;;;QAmF5B,IAAA,CAAA,MAhFI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAoFJ,IAAA,CAAA,KAjFI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QAmGJ,IAAA,CAAA,SApFG,GAAA,MAoFH,GApFG,CAAA;QAIO,IAAV,CAAA,QAAU,GAAmB,CAAA,CAAE;;;;;QA2F/B,IAAA,CAAA,UArFG,GAAA,KAAA,CAAA;;;;;QA0FH,IAAA,CAAA,SApFG,GAAA,KAAA,CAAA;;;;QAqGA,IAAH,CAAA,oBAAG,GAAA,CAAA,CAAA;;;;QAGA,IAAH,CAAA,iBAAG,GAAA,IAAA,CAAA;QAEO,IAAV,CAAA,6BAAU,GAAsD,MAAhE,GAAsE,CAAG;;;;QAMtE,IAAH,CAAA,sBAAG,GAAA,YAAA,CAAA,KAAA,CAAA;KAuIA;;;;;IAzWH,IAhCG,MAAA,GAgCH,EAhCiB,OAAO,IAAA,CAAK,OAAC,CAAO,EAAC;;;;;IAqCtC,IApCG,MAAA,CAAA,KAAA,EAoCH;QACI,IAAI,CApCC,OAAC,GAAS,qBAAA,CAAsB,KAAC,CAAK,CAAC;KAqC7C;;;;;IAMH,IArCG,GAAA,GAqCH,EArCc,OAAO,IAAA,CAAK,IAAC,CAAI,EAAC;;;;;IA0ChC,IAzCG,GAAA,CAAA,CAAA,EAyCH;QACI,IAAI,CAzCC,IAAC,GAAM,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,IAAC,CAAI,CAAC;QA0C/C,IAAI,CAzCC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;;QA4CvD,IAAI,CAzCC,kBAAC,CAAkB,YAAC,EAAY,CAAE;KA0CxC;;;;;IAMH,IA1CG,GAAA,GA0CH,EA1Cc,OAAO,IAAA,CAAK,IAAC,CAAI,EAAC;;;;;IA+ChC,IA9CG,GAAA,CAAA,CAAA,EA8CH;QACI,IAAI,CA9CC,IAAC,GAAM,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,IAAC,CAAI,CAAC;;QAiD/C,IAAI,IA9CC,CAAI,MAAC,KAAU,IAAA,EAAM;YA+CxB,IAAI,CA9CC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI;SA+CxB;QACD,IAAI,CA9CC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;;QAiDvD,IAAI,CA9CC,kBAAC,CAAkB,YAAC,EAAY,CAAE;KA+CxC;;;;;IAMH,IA/CG,IAAA,GA+CH,EA/Ce,OAAO,IAAA,CAAK,KAAC,CAAK,EAAC;;;;;IAoDlC,IAnDG,IAAA,CAAA,CAAA,EAmDH;QACI,IAAI,CAnDC,KAAC,GAAO,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,KAAC,CAAK,CAAC;QAqDjD,IAAI,IAnDC,CAAI,KAAC,GAAO,CAAA,KAAM,CAAA,EAAG;YAoDxB,IAAI,CAnDC,aAAC,GAAa,EAAE,IAAA,CAAK,KAAC,CAAK,QAAC,EAAQ,CAAE,KAAC,CAAK,GAAC,CAAG,CAAC,GAAC,EAAG,GAAG,MAAC,CAAM;SAoDrE;;QAGD,IAAI,CAnDC,kBAAC,CAAkB,YAAC,EAAY,CAAE;KAoDxC;;;;;IAMH,IApDG,UAAA,GAoDH,EApD8B,OAAO,IAAA,CAAK,WAAC,CAAW,EAAC;;;;;IAyDvD,IAxDG,UAAA,CAAA,KAAA,EAwDH,EAxD0B,IAAA,CAAK,WAAC,GAAa,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;;IA8D3E,IAzDG,qBAAA,GAyDH,EAzDyC,OAAO,IAAA,CAAK,WAAC,CAAW,EAAC;;;;;IA8DlE,IA7DG,qBAAA,CAAA,KAAA,EA6DH,EA7DqC,IAAA,CAAK,WAAC,GAAa,KAAA,CAAM,EAAC;;;;;;IAmE/D,IA5DG,YAAA,GA4DH,EA5DuB,OAAO,IAAA,CAAK,aAAC,CAAa,EAAC;;;;;IAiElD,IAhEG,YAAA,CAAA,KAAA,EAgEH;QACI,IAAI,KAhEC,KAAS,MAAA,EAAQ;YAiEpB,IAAI,CAhEC,aAAC,GAAe,MAAA,CAAO;SAiE7B;aAhEM,IAAA,OAAW,KAAA,KAAU,QAAA,IAAY,OAAO,KAAA,KAAU,QAAA,EAAU;YAiEjE,IAAI,CAhEC,aAAC,GAAe,oBAAA,CAAqB,KAAC,oBAAM,IAAA,CAAK,aAAiB,EAAO,CAAC;SAiEhF;aAhEM;YAiEL,IAAI,CAhEC,aAAC,GAAe,CAAA,CAAE;SAiExB;KACF;;;;;IAMH,IAjEG,uBAAA,GAiEH,EAjEkC,OAAO,IAAA,CAAK,YAAC,CAAY,EAAC;;;;;IAsE5D,IArEG,uBAAA,CAAA,CAAA,EAqEH,EArEmC,IAAA,CAAK,YAAC,GAAc,CAAA,CAAE,EAAC;;;;;IA0E1D,IAtEG,KAAA,GAsEH;;QAEI,IAAI,IAtEC,CAAI,MAAC,KAAU,IAAA,EAAM;YAuExB,IAAI,CAtEC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI;SAuExB;QACD,OAtEO,IAAA,CAAK,MAAC,CAAM;KAuEpB;;;;;IAKH,IA1EG,KAAA,CAAA,CAAA,EA0EH;QACI,IAAI,CA1EC,KAAK,IAAA,CAAK,MAAC,EAAO;YA2ErB,IAAI,CA1EC,MAAC,GAAQ,oBAAA,CAAqB,CAAC,EAAE,IAAA,CAAK,MAAC,IAAS,CAAA,CAAE,CAAC;YA2ExD,IAAI,CA1EC,QAAC,GAAU,IAAA,CAAK,oBAAC,CAAoB,IAAC,CAAI,MAAC,CAAM,CAAC;;YA6EvD,IAAI,CA1EC,kBAAC,CAAkB,YAAC,EAAY,CAAE;SA2ExC;KACF;;;;;IAMH,IA3EG,QAAA,GA2EH,EA3EmB,OAAO,IAAA,CAAK,SAAC,CAAS,EAAC;;;;;IAgF1C,IA/EG,QAAA,CAAA,KAAA,EA+EH;QACI,IAAI,CA/EC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;KAgF/C;;;;;IAcH,IAnFG,YAAA,GAmFH;;;;QAII,IAAI,IAnFC,CAAI,aAAC,IAAgB,IAAA,CAAK,KAAC,IAAQ,IAAA,CAAK,KAAC,GAAO,CAAA,KAAM,CAAA,EAAG;YAoF5D,OAnFO,IAAA,CAAK,KAAC,CAAK,OAAC,CAAO,IAAC,CAAI,aAAC,CAAa,CAAC;SAoF/C;QAED,OAnFO,IAAA,CAAK,KAAC,IAAQ,CAAA,CAAE;KAoFxB;;;;;IASH,IAtFG,OAAA,GAsFH,EAtFkB,OAAO,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,QAAC,CAAQ,CAAC,EAAC;;;;;;IAuGrD,IApFG,WAAA,GAoFH;;;QAGI,OApFO,IAAA,CAAK,QAAC,GAAU,CAAA,IAAE,CAAI,MAAC,GAAQ,IAAA,CAAK,MAAC,CAAM;KAqFnD;;;;;IAKH,IArFG,WAAA,GAqFH;QACI,OArFO,IAAA,CAAK,OAAC,KAAW,CAAA,CAAE;KAsF3B;;;;;;IAMH,IArFG,SAAA,GAqFH;QACI,IAAI,IArFC,CAAI,QAAC,EAAS;YAsFjB,OArFO,kBAAA,CAAmB;SAsF3B;QACD,IAAI,IArFC,CAAI,WAAC,IAAc,CAAA,IAAE,CAAI,UAAC,EAAW;YAsFxC,OArFO,IAAA,CAAK,SAAC,GAAW,0BAAA,GAA6B,6BAAA,CAA8B;SAsFpF;QACD,OArFO,CAAA,CAAE;KAsFV;;;;;IAKH,IAvFG,sBAAA,GAuFH;QACI,qBAvFI,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QAwFrC,qBAvFI,IAAA,GAAO,IAAA,CAAK,kBAAC,GAAoB,GAAA,GAAM,EAAA,CAAG;QAwF9C,OAvFO;YAwFL,WAAW,EAvFE,CAuFnB,SAAA,EAvFmB,IAAa,CAuFhC,CAAA,EAvFoC,IAAI,CAuFxC,EAvF4C,IAAG,CAAI,SAAC,CAuFpD,SAAA,EAvF6D,IAAY,CAuFzE,CAAA,EAvF6E,CAAI,GAAG,IAAA,CAAK,OAAC,CAuF1F,CAAA,CAvFiG;SAwF5F,CAvFC;KAwFH;;;;;IAKH,IAzFG,gBAAA,GAyFH;QACI,qBAzFI,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;QA0FrC,qBAzFI,IAAA,GAAO,IAAA,CAAK,kBAAC,GAAoB,EAAA,GAAK,GAAA,CAAI;QA0F9C,OAzFO;YA0FL,WAAW,EAzFE,CAyFnB,SAAA,EAzFmB,IAAa,CAyFhC,CAAA,EAzFoC,IAAI,CAyFxC,EAzF4C,IAAG,CAAI,SAAC,CAyFpD,SAAA,EAzF6D,IAAY,CAyFzE,CAAA,EAzF6E,IAAI,CAAI,OAAC,CAyFtF,CAAA,CAzF6F;SA0FxF,CAzFC;KA0FH;;;;;IAKH,IA3FG,qBAAA,GA2FH;QACI,qBA3FI,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;;;QA8FrC,qBA3FI,IAAA,GAAO,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,EAAA,GAAK,GAAA,CAAI;QA4FjE,qBA3FI,MAAA,GAAS,IAAA,CAAK,oBAAC,GAAsB,CAAA,GAAI,GAAA,CAAI;QA4FjD,OA3FO;YA4FL,WAAW,EA3FE,CA2FnB,SAAA,EA3FmB,IAAa,CA2FhC,CAAA,EA3FoC,IAAI,CA2FxC,EA3F4C,MAAG,CA2F/C,EAAA,CA3FqD;SA4FhD,CA3FC;KA4FH;;;;;IAKH,IA7FG,YAAA,GA6FH;QACI,qBA7FI,QAAA,GAAW,IAAA,CAAK,oBAAC,GAAsB,GAAA,CAAI;QA8F/C,qBA7FI,cAAA,GAAiB,IAAA,CAAK,QAAC,GAAU,CA6FzC,IAAA,EA7FyC,QAAQ,CA6FjD,CAAA,CA7FyD,GAAK,CA6F9D,EA7F8D,QAAI,CA6FlE,KAAA,CA7F0E,CAAO;QA8F7E,qBA7FI,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;;;;QAiGrC,qBA7FI,IAAA,GAAO,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,GAAA,GAAM,EAAA,CAAG;QA8FjE,qBA7FI,MAAA,GAAS,CAAA,IAAE,CAAI,QAAC,IAAW,IAAA,CAAK,UAAC,IAAa,KAAA,GAAQ,iBAAA,GAAoB,EAAA,CAAG;QA8FjF,qBA7FI,MAAA,GAAoC;YA8FtC,gBAAgB,EA7FE,cAAA;;YA+FlB,WAAW,EA7FE,CA6FnB,uBAAA,EA7FmB,IAA2B,CA6F9C,CAAA,EA7FkD,IAAI,CA6FtD,EA7F0D,QAAG,GAAU,CAAA,CA6FvE,EAAA,EA7FyE,MAAK,CA6F9E,CA7FoF;SA8F/E,CA7FC;QA+FF,IAAI,IA7FC,CAAI,WAAC,IAAc,IAAA,CAAK,SAAC,EAAU;YA8FtC,qBA7FI,IAAA,GAAO,IAAA,CAAK,QAAC;iBA8FZ,IA7FC,CAAI,WAAC,GAAa,QAAA,GAAW,KAAA;iBA8F9B,IA7FC,CAAI,WAAC,GAAa,OAAA,GAAU,MAAA,CAAO,CAAC;YA8F1C,MAAM,CA7FC,CA6Fb,OAAA,EA7Fc,IAAU,CA6FxB,CA7F4B,CAAE,GAAG,CA6FjC,EA7FiC,IAAI,CAAI,SAAC,CA6F1C,EAAA,CA7FmD,CAAI;SA8FlD;QAED,OA7FO,MAAA,CAAO;KA8Ff;;;;IAIH,IA/FG,qBAAA,GA+FH;QACI,qBA/FI,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,GAAA,GAAM,GAAA,CAAI;;;QAkGrC,qBA/FI,YAAA,GAgGA,CAAC,IA/FC,CAAI,UAAC,IAAa,KAAA,IAAS,CAAA,IAAE,CAAI,QAAC,IAAW,CAAA,IAAE,CAAI,WAAC,GAAa,IAAA,CAAK,WAAC,CAAW;QAgGxF,qBA/FI,MAAA,GAAS,CAAA,YAAE,GAAc,IAAA,CAAK,OAAC,GAAS,CAAA,GAAI,IAAA,CAAK,OAAC,IAAU,GAAA,CAAI;QAgGpE,OA/FO;YAgGL,WAAW,EA/FE,CA+FnB,SAAA,EA/FmB,IAAa,CA+FhC,EAAA,EA/FoC,MAAK,CA+FzC,EAAA,CA/F+C;SAgG1C,CA/FC;KAgGH;;;;;;IA+BH,IApGG,kBAAA,GAoGH;QACI,OApGO,CAAA,IAAE,CAAI,UAAC,IAAa,KAAA,IAAS,CAAA,IAAE,CAAI,QAAC,IAAW,CAAA,IAAE,CAAI,WAAC,GAAa,IAAA,CAAK,WAAC,CAAW;KAqG5F;;;;;IAKH,IAtGG,UAAA,GAsGH;QACI,OAtGO,CAAA,IAAE,CAAI,IAAC,IAAO,IAAA,CAAK,IAAC,CAAI,KAAC,IAAQ,KAAA,IAAS,KAAA,GAAQ,KAAA,CAAM;KAuGhE;;;;IAkBH,QA9GG,GA8GH;QACI,IAAI,CA9GC,aAAC;aA+GD,OA9GC,CAAO,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,IAAA,CAAK,SAAC,EAAU,IAAA,CAAK;aA+G7D,SA9GC,CAAS,CAAC,MAAQ,KA8G5B;YACU,IAAI,CA9GC,SAAC,GAAW,CAAA,CAAE,MAAC,IAAS,MAAA,KAAW,UAAA,CAAW;YA+GnD,IAAI,CA9GC,kBAAC,CAAkB,aAAC,EAAa,CAAE;SA+GzC,CA9GC,CAAC;QA+GP,IAAI,IA9GC,CAAI,IAAC,EAAK;YA+Gb,IAAI,CA9GC,sBAAC,GAAwB,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,SAAC,CAAS,MA8G/D;gBACQ,IAAI,CA9GC,kBAAC,CAAkB,YAAC,EAAY,CAAE;aA+GxC,CA9GC,CAAC;SA+GJ;KACF;;;;IAIH,WAhHG,GAgHH;QACI,IAAI,CAhHC,aAAC,CAAa,cAAC,CAAc,IAAC,CAAI,WAAC,CAAW,aAAC,CAAa,CAAC;QAiHlE,IAAI,CAhHC,sBAAC,CAAsB,WAAC,EAAW,CAAE;KAiH3C;;;;IAIH,aAlHG,GAkHH;QACI,IAAI,IAlHC,CAAI,QAAC,EAAS;YAmHjB,OAAO;SACR;;;QAID,IAAI,CAlHC,iBAAC,GAAmB,IAAA,CAAK,oBAAC,EAAoB,CAAE;QAmHrD,IAAI,CAlHC,0BAAC,EAA0B,CAAE;KAmHnC;;;;;IAKH,QArHG,CAAA,KAAA,EAqHH;QACI,IAAI,IArHC,CAAI,QAAC,EAAS;YAsHjB,OAAO;SACR;QAED,qBArHI,QAAA,GAAW,IAAA,CAAK,KAAC,CAAK;QAsH1B,IAAI,CArHC,UAAC,GAAY,KAAA,CAAM;QAsHxB,IAAI,CArHC,iBAAC,EAAiB,CAAE;QAsHzB,IAAI,CArHC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,OAAC,EAAQ,CAAA,EAAG,KAAA,CAAM,OAAC,EAAO,CAAC,CAAC;;QAwHpE,IAAI,QArHC,IAAW,IAAA,CAAK,KAAC,EAAM;YAsH1B,IAAI,CArHC,eAAC,EAAe,CAAE;YAsHvB,IAAI,CArHC,gBAAC,EAAgB,CAAE;SAsHzB;KACF;;;;;IAKH,QAxHG,CAAA,KAAA,EAwHH;QACI,IAAI,IAxHC,CAAI,QAAC,EAAS;YAyHjB,OAAO;SACR;;;QAID,IAAI,CAxHC,IAAC,CAAI,UAAC,EAAW;YAyHpB,IAAI,CAxHC,aAAC,CAAa,IAAC,CAAI,CAAC;SAyH1B;;QAGD,KAAK,CAxHC,cAAC,EAAc,CAAE;QA0HvB,qBAxHI,QAAA,GAAW,IAAA,CAAK,KAAC,CAAK;QAyH1B,IAAI,CAxHC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,CAAA,EAAG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAC,CAAC,CAAC;;QA2HtE,IAAI,QAxHC,IAAW,IAAA,CAAK,KAAC,EAAM;YAyH1B,IAAI,CAxHC,eAAC,EAAe,CAAE;SAyHxB;KACF;;;;;IAKH,aA3HG,CAAA,KAAA,EA2HH;QACI,IAAI,IA3HC,CAAI,QAAC,EAAS;YA4HjB,OAAO;SACR;;QAGD,IAAI,CA3HC,aAAC,EAAa,CAAE;QA6HrB,IAAI,CA3HC,UAAC,GAAY,IAAA,CAAK;QA4HvB,IAAI,CA3HC,iBAAC,EAAiB,CAAE;QA4HzB,IAAI,CA3HC,kBAAC,GAAoB,IAAA,CAAK,KAAC,CAAK;QA6HrC,IAAI,KA3HC,EAAM;YA4HT,IAAI,CA3HC,wBAAC,CAAwB,EAAC,CAAC,EAAE,KAAA,CAAM,MAAC,CAAM,CAAC,EAAE,CAAA,EAAG,KAAA,CAAM,MAAC,CAAM,CAAC,EAAC,CAAC,CAAC;YA4HtE,KAAK,CA3HC,cAAC,EAAc,CAAE;SA4HxB;KACF;;;;IAIH,WA7HG,GA6HH;QACI,IAAI,CA7HC,UAAC,GAAY,KAAA,CAAM;QA+HxB,IAAI,IA7HC,CAAI,kBAAC,IAAqB,IAAA,CAAK,KAAC,EAAM;YA8HzC,IAAI,CA7HC,gBAAC,EAAgB,CAAE;SA8HzB;QACD,IAAI,CA7HC,kBAAC,GAAoB,IAAA,CAAK;KA8HhC;;;;IAIH,QA/HG,GA+HH;;;QAGI,IAAI,CA/HC,iBAAC,GAAmB,IAAA,CAAK,oBAAC,EAAoB,CAAE;QAgIrD,IAAI,CA/HC,0BAAC,EAA0B,CAAE;KAgInC;;;;IAIH,OAjIG,GAiIH;QACI,IAAI,CAjIC,SAAC,EAAS,CAAE;KAkIlB;;;;;IAKH,UApIG,CAAA,KAAA,EAoIH;QACI,IAAI,IApIC,CAAI,QAAC,EAAS;YAAE,OAAA;SAAQ;QAsI7B,qBApII,QAAA,GAAW,IAAA,CAAK,KAAC,CAAK;QAsI1B,QAAQ,KApIC,CAAK,OAAC;YAqIb,KApIK,OAAA;gBAqIH,IAAI,CApIC,UAAC,CAAU,EAAC,CAAE,CAAC;gBAqIpB,MAAM;YACR,KApIK,SAAA;gBAqIH,IAAI,CApIC,UAAC,CAAU,CAAC,EAAC,CAAE,CAAC;gBAqIrB,MAAM;YACR,KApIK,GAAA;gBAqIH,IAAI,CApIC,KAAC,GAAO,IAAA,CAAK,GAAC,CAAG;gBAqItB,MAAM;YACR,KApIK,IAAA;gBAqIH,IAAI,CApIC,KAAC,GAAO,IAAA,CAAK,GAAC,CAAG;gBAqItB,MAAM;YACR,KApIK,UAAA;;;;;;;;gBA4IH,IAAI,CApIC,UAAC,CAAU,IAAC,CAAI,UAAC,IAAa,KAAA,GAAQ,CAAA,GAAI,CAAA,CAAE,CAAC,CAAC;gBAqInD,MAAM;YACR,KApIK,QAAA;gBAqIH,IAAI,CApIC,UAAC,CAAU,CAAC,CAAC,CAAC;gBAqInB,MAAM;YACR,KApIK,WAAA;;gBAsIH,IAAI,CApIC,UAAC,CAAU,IAAC,CAAI,UAAC,IAAa,KAAA,GAAQ,CAAA,CAAE,GAAG,CAAA,CAAE,CAAC;gBAqInD,MAAM;YACR,KApIK,UAAA;gBAqIH,IAAI,CApIC,UAAC,CAAU,CAAC,CAAC,CAAC,CAAC;gBAqIpB,MAAM;YACR;;;gBAGE,OAAO;SACV;QAED,IAAI,QApIC,IAAW,IAAA,CAAK,KAAC,EAAM;YAqI1B,IAAI,CApIC,eAAC,EAAe,CAAE;YAqIvB,IAAI,CApIC,gBAAC,EAAgB,CAAE;SAqIzB;QAED,IAAI,CApIC,UAAC,GAAY,IAAA,CAAK;QAqIvB,KAAK,CApIC,cAAC,EAAc,CAAE;KAqIxB;;;;IAIH,QAtIG,GAsIH;QACI,IAAI,CAtIC,UAAC,GAAY,KAAA,CAAM;KAuIzB;;;;;;IAnIA,UAAA,CAAA,QAAA,EAAH;QA0II,IAAI,CAzIC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM,CAAC,IAAC,CAAI,KAAC,IAAQ,CAAA,IAAK,IAAA,CAAK,IAAC,GAAM,QAAA,EAAU,IAAA,CAAK,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,CAAC;KA0IxF;;;;;;IAtIA,wBAAA,CAAA,GAAA,EAAH;QA6II,IAAI,CA5IC,IAAC,CAAI,iBAAC,EAAkB;YA6I3B,OAAO;SACR;QAED,qBA5II,MAAA,GAAS,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,GAAC,GAAK,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI;QA6ItF,qBA5II,IAAA,GAAO,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,MAAC,GAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK;QA6IxF,qBA5II,YAAA,GAAe,IAAA,CAAK,QAAC,GAAU,GAAA,CAAI,CAAC,GAAG,GAAA,CAAI,CAAC,CAAC;;QA+IjD,qBA5II,OAAA,GAAU,IAAA,CAAK,MAAC,CAAM,CAAC,YAAC,GAAc,MAAA,IAAU,IAAA,CAAK,CAAC;QA6I1D,IAAI,IA5IC,CAAI,kBAAC,EAAmB;YA6I3B,OAAO,GA5IG,CAAA,GAAI,OAAA,CAAQ;SA6IvB;QACD,qBA5II,UAAA,GAAa,IAAA,CAAK,eAAC,CAAe,OAAC,CAAO,CAAC;;;QAgJ/C,qBA5II,YAAA,GAAe,IAAA,CAAK,KAAC,CAAK,CAAC,UAAC,GAAY,IAAA,CAAK,GAAC,IAAM,IAAA,CAAK,IAAC,CAAI,GAAG,IAAA,CAAK,IAAC,GAAM,IAAA,CAAK,GAAC,CAAG;;QA8I1F,IAAI,CA5IC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM,YAAC,EAAa,IAAA,CAAK,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,CAAC;KA6I5D;;;;;IAzIA,gBAAA,GAAH;QA+II,IAAI,CA9IC,6BAAC,CAA6B,IAAC,CAAI,KAAC,CAAK,CAAC;QA+I/C,IAAI,CA9IC,MAAC,CAAM,IAAC,CAAI,IAAC,CAAI,kBAAC,EAAkB,CAAE,CAAC;KA+I7C;;;;;IA3IA,eAAA,GAAH;QAiJI,IAAI,CAhJC,KAAC,CAAK,IAAC,CAAI,IAAC,CAAI,kBAAC,EAAkB,CAAE,CAAC;KAiJ5C;;;;;IA7IA,0BAAA,GAAH;QAmJI,IAAI,CAlJC,IAAC,CAAI,YAAC,IAAe,CAAA,IAAE,CAAI,iBAAC,EAAkB;YAmJjD,OAAO;SACR;QAED,IAAI,IAlJC,CAAI,YAAC,IAAe,MAAA,EAAQ;YAmJ/B,qBAlJI,SAAA,GAAY,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,iBAAC,CAAiB,MAAC,GAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK;YAmJ7F,qBAlJI,aAAA,GAAgB,SAAA,GAAY,IAAA,CAAK,IAAC,IAAM,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;YAmJlE,qBAlJI,YAAA,GAAe,IAAA,CAAK,IAAC,CAAI,wBAAC,GAA0B,aAAA,CAAc,CAAC;YAmJvE,qBAlJI,aAAA,GAAgB,YAAA,GAAe,IAAA,CAAK,IAAC,CAAI;YAyHjD,IAAA,CAxHS,oBAAC,GAAsB,aAAA,GAAgB,SAAA,CAAU;SAmJvD;aAlJM;YAmJL,IAAI,CAlJC,oBAAC,GAAsB,IAAA,CAAK,YAAC,GAAc,IAAA,CAAK,IAAC,IAAM,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;SAmJnF;KACF;;;;;;IA/IA,kBAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,EAAH;QAsJI,qBArJI,KAAA,GAAQ,IAAI,cAAA,EAAe,CAAE;QAuJjC,KAAK,CArJC,MAAC,GAAQ,IAAA,CAAK;QAsJpB,KAAK,CArJC,KAAC,GAAO,KAAA,CAAM;QAuJpB,OArJO,KAAA,CAAM;KAsJd;;;;;;IAlJA,oBAAA,CAAA,KAAA,EAAH;QAyJI,OAxJO,CAAA,CAAE,KAAC,IAAQ,CAAA,IAAK,IAAA,CAAK,GAAC,KAAM,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;KAyJ1D;;;;;;IArJA,eAAA,CAAA,UAAA,EAAH;QA4JI,OA3JO,IAAA,CAAK,GAAC,GAAK,UAAA,IAAa,IAAE,CAAI,GAAC,GAAK,IAAA,CAAK,GAAC,CAAG,CAAC;KA4JtD;;;;;;;;IAxJA,MAAA,CAAA,KAAA,EAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAA,EAAH;QAiKI,OAhKO,IAAA,CAAK,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,KAAC,EAAM,GAAA,CAAI,CAAC,CAAC;KAiK5C;;;;;;;IAzJA,oBAAA,GAAH;QAiKI,OAhKO,IAAA,CAAK,cAAC,GAAgB,IAAA,CAAK,cAAC,CAAc,aAAC,CAAa,qBAAC,EAAqB,GAAI,IAAA,CAAK;KAiK/F;;;;;;IA1JA,iBAAA,GAAH;QAiKI,IAAI,CAhKC,WAAC,CAAW,aAAC,CAAa,KAAC,EAAK,CAAE;KAiKxC;;;;;;IAMH,UAhKG,CAAA,KAAA,EAgKH;QACI,IAAI,CAhKC,KAAC,GAAO,KAAA,CAAM;KAiKpB;;;;;;;IAOH,gBAhKG,CAAA,EAAA,EAgKH;QACI,IAAI,CAhKC,6BAAC,GAA+B,EAAA,CAAG;KAiKzC;;;;;;;IAOH,iBAhKG,CAAA,EAAA,EAgKH;QACI,IAAI,CAhKC,SAAC,GAAW,EAAA,CAAG;KAiKrB;;;;;;;IAOH,gBAhKG,CAAA,UAAA,EAgKH;QACI,IAAI,CAhKC,QAAC,GAAU,UAAA,CAAW;KAiK5B;;AA/JI,QAAP,CAAA,UAAO,GAAoC;IAiK3C,EAhKE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,CAgKzB,QAAA,EAAA,uBAAA;gBACE,SAAF,EAAA,CAAA,wBAAA,CAAA;gBACE,IAAF,EAAA;oBACA,SAAA,EAAA,YAAA;oBACM,QAAN,EAAA,WAAA;oBACI,SAAS,EAhKE,kBAgKf;oBACI,WAAJ,EAAA,oBAAA;oBACI,SAAS,EAhKE,YAgKf;oBACI,cAAJ,EAAA,iBAhKiB;oBAiKb,SAAS,EAhKE,kBAgKf;oBACI,YAAJ,EAAkB,eAAlB;oBACI,cAAJ,EAAA,uBAAA;oBACI,OAAJ,EAAA,YAAA;oBACI,MAAJ,EAAA,QAhKoB;oBAiKhB,UAAJ,EAAA,GAAA;oBACI,sBAAJ,EAAA,UAAA;oBACI,sBAAJ,EAAA,KAAA;oBACI,sBAAsB,EAhKE,KAgK5B;oBACI,sBAAsB,EAhKE,OAgK5B;oBACI,yBAAJ,EAAA,sCAAA;oBACI,6BAAJ,EAhK4B,UAgK5B;oBACI,8BAAJ,EAAA,cAAA;oBACI,+BAhK+B,EAgKnC,WAAA;oBACI,kCAAJ,EAAA,aAAA;oBACI,4BAAJ,EAAA,YAAA;oBACI,wCAAJ,EAAA,YAAA;oBACI,6BAAJ,EAAA,UAAA;oBACI,8BAAJ,EAAA,aAAA;oBACI,mCAAJ,EAAA,qDAAA;iBACA;gBACA,QAAA,EAAA,grBAAA;gBACA,MAAA,EAAA,CAAA,8/MAAA,CAAA;gBACE,MAAF,EAAA,CAAA,UAAA,EAAA,OAAA,CAAA;gBACE,aAAF,EAAA,iBAAA,CAAA,IAAA;gBACE,mBAhKU,EAAW,KAgKvB;gBACE,eAhKe,EAgKjB,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAA,SAAA,GAAA;IAjKA,EAAA,IAAA,EAAA,UAAA,GAAA;IAmKA,EAAC,IAAI,EAAE,YAAY,GAAnB;IACA,EAAC,IAAI,EAAE,iBAAP,GAAA;IACA,EAAC,IAAI,EAAE,cAAP,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA;CACA,CAAA;AACA,QAAA,CAAA,cAAA,GAAqB;IACrB,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IAjKA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IAmKA,KAAA,EAAA,CAAQ,EAlKE,IAkKV,EAAA,KAAA,EAAA,EAAA;IACA,MAAA,EAlKO,CAkKP,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,YAAA,EAlKU,CAkKV,EAAA,IAlKgB,EAAM,KAkKtB,EAAA,EAAA;IACA,uBAAA,EAAA,CAlKyB,EAkKzB,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA;IACA,cAlKc,EAkKd,CAlKiB,EAkKjB,IAlKuB,EAkKvB,KAlK6B,EAAE,EAkK/B;IACA,yBAlKyB,EAkKzB,CAlK4B,EAkK5B,IAlKkC,EAkKlC,KAlKyC,EAkKzC,IAlK+C,EAkK/C,CAAA,eAlKiE,EAAE,EAkKnE,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAlKgB,EAkKhB,KAlKmB,EAAM,EAkKzB;IACA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAlK2B,EAAG;IAmK9B,QAAA,EAlKS,CAkKT,EAAA,IAAA,EAAA,MAlKwB,EAAE,EAkK1B;IACA,OAAA,EAAA,CAAU,EAlKE,IAkKZ,EAAA,MAAA,EAlKqB,EAAM;IAmK3B,gBAAA,EAAA,CAlKmB,EAkKnB,IAlKmB,EAAO,SAkK1B,EAAA,IAAA,EAAA,CAAA,eAAA,EAAA,EAAA,EAAA;CACA,CAAA,AACA,AA+FA,AACA;;AD39BA,MAAA,cAAA,CAAA;;AAEoC,cAApC,CAAA,UAAoC,GAAoC;IADxE,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADtB,OAAO,EAEE,CAAA,YAAE,EAAa,cAAA,EAAgB,UAAA,EAAY,UAAA,CAAW;gBAD/D,OAAO,EAEE,CAAA,QAAE,EAAS,cAAA,CAAe;gBADnC,YAAY,EAEE,CAAA,QAAE,CAAQ;gBADxB,SAAS,EAEE,CAAA,EAAE,OAAC,EAAQ,qBAAA,EAAuB,QAAA,EAAU,aAAA,EAAc,CAAC;aADvE,EAEC,EAAG;CADJ,CAEC;;;;AAED,cAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC,AAGF,AAQC;;ADvCD;;GAEG,AAEH,AAA+M;;"}