{"version":3,"file":"expansion.es5.js","sources":["../../../src/lib/expansion/index.ts","../../../src/lib/expansion/expansion-module.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/accordion-item.ts","../../../src/lib/expansion/accordion.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdExpansionModule,MatAccordion,MatAccordionDisplayMode,MatExpansionModule,MatExpansionPanel,MatExpansionPanelActionRow,MatExpansionPanelDescription,MatExpansionPanelHeader,MatExpansionPanelState,MatExpansionPanelTitle} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MdExpansionPanelBase as ɵa,_MdExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkAccordion, MdAccordion} from './accordion';\nimport {MdExpansionPanel, MdExpansionPanelActionRow} from './expansion-panel';\nimport {\n  MdExpansionPanelDescription,\n  MdExpansionPanelHeader,\n  MdExpansionPanelTitle,\n} from './expansion-panel-header';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule, A11yModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  Input,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '@angular/material/core';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\nimport {filter} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\n    renderer: Renderer2,\npublic panel: MdExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdAccordion} from './accordion';\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MdExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const /** @type {?} */ _MdExpansionPanelMixinBase = mixinDisabled(MdExpansionPanelBase);\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends _MdExpansionPanelMixinBase\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["nextId"],"mappings":"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"}