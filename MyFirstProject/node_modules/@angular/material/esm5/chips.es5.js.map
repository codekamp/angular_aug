{"version":3,"file":"chips.es5.js","sources":["../../../src/lib/chips/index.ts","../../../src/lib/chips/chips-module.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/material/core';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\n * May be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\n  focused: boolean = false;\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\n    let /** @type {?} */ value: string | null = this._inputElement.value;\n    return value == null || value === '';\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n/**\n * @return {?}\n */\n_focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  BACKSPACE,\n  DELETE,\n  Directionality,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '@angular/material/core';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\nimport {MdChipInput} from './chip-input';\n\n// Increasing integer for generating unique ids for chip-list components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\n    AfterContentInit, OnInit, OnDestroy {\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\n\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget required() {\n    return this._required;\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n      (this._parentForm && this._parentForm.submitted);\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * its selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\n    this._chipInput = inputElement;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    this.stateChanges.next();\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Update key manager's active item when chip is deleted.\n * If the deleted chip is the last chip in chip list, focus the new last chip.\n * Otherwise focus the next chip in the list.\n * Save `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    } else if (chipsArray.length === 0) {\n      this._focusInput();\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\n      }\n    }\n  }\n/**\n * Finds and selects the chip based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Chip that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\n\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n      this.stateChanges.next();\n    });\n  }\n/**\n * Deselects every chip in the list.\n * @param {?=} skip Chip that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MdChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList, matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    'role': 'listbox',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  BACKSPACE,\n  CanColor,\n  CanDisable,\n  DELETE,\n  mixinColor,\n  mixinDisabled,\n  SPACE,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic selected: boolean,\npublic isUserInput = false) { }\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.selected;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) { this._value = newValue; }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean { return this._removable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) { this._removable = coerceBooleanProperty(value); }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\n    super(renderer, _elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * @return {?}\n */\n_blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip, matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AIkCA;;;AAGA,AAAA,MAAA,qBAAA,CAAA;;;;;;IAMA,WAAA,CAPqB,MAAQ,EAAe,QAAU,EAAgB,WAOtE,GAPoF,KAAA,EAOpF;QAPqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAAQ;QAAe,IAA5C,CAAA,QAA4C,GAAA,QAAA,CAAU;QAAgB,IAAtE,CAAA,WAAsE,GAAA,WAAA,CAAc;KAAM;CAUzF;AAED,AASA;;;AAGA,AAAA,MAAA,UAAA,CAAA;;;;;IAKA,WAAA,CAtBqB,SAAW,EAAkB,WAAa,EAsB/D;QAtBqB,IAArB,CAAA,SAAqB,GAAA,SAAA,CAAW;QAAkB,IAAlD,CAAA,WAAkD,GAAA,WAAA,CAAa;KAAW;CAwBzE;AAED,AAOA,AA/BO,MAAM,gBAAA,GAAmB,UAAA,CAAW,aAAC,CAAa,UAAC,CAAU,EAAE,SAAA,CAAU,CAAC;;;;;AAoCjF,AAAA,MAAA,WAAA,CAAA;;AA5BkC,WAAlC,CAAA,UAAkC,GAAoC;IA6BtE,EA5BE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA6BvB,QAAQ,EA5BE,CA4BZ,gEAAA,CA5BY;gBA6BV,IAAI,EA5BE,EAAA,OAAE,EAAQ,gBAAA,EAAiB;aA6BlC,EA5BC,EAAG;CA6BJ,CA5BC;;;;AAED,WAAD,CAAA,cAAC,GAAA,MAAA,EA+BA,CAAC;AAGF,AAUA;;;AAGA,AAAA,MAAA,MAvCC,SAAA,gBAAA,CAuCD;;;;;IA0GA,WAAA,CAhEG,QAAqB,EAAkB,WAAa,EAgEvD;QAEI,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAlES,IAA1C,CAAA,WAA0C,GAAA,WAAA,CAAa;QA5E3C,IAAZ,CAAA,SAAY,GAAqB,KAAA,CAAM;QAE3B,IAAZ,CAAA,WAAY,GAAuB,IAAA,CAAK;QAE5B,IAAZ,CAAA,UAAY,GAAsB,IAAA,CAAK;;;;QA2CvC,IAAA,CAAA,SAxCG,GAAA,KAAA,CAAA;;;;QAgGH,IAAA,CAAA,QAzDG,GAAA,IAAA,OAAA,EAAA,CAAA;;;;QA6DH,IAAA,CAAA,OA1DG,GAAA,IAAA,OAAA,EAAA,CAAA;;;;QA8DH,IAAA,CAAA,eA3DI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;QA+DJ,IAAA,CAAA,SA5DI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;;QAiEJ,IAAA,CAAA,OA3DI,GAAA,IAAA,CAAA,SAAA,CAAA;;;;QA+DJ,IAAA,CAAA,OA5DI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;;QAiEJ,IAAA,CAAA,QA3DI,GAAA,IAAA,CAAA,OAAA,CAAA;KAyED;;;;;IA3FH,IAzCG,QAAA,GAyCH,EAzC4B,OAAO,IAAA,CAAK,SAAC,CAAS,EAAC;;;;;IA8CnD,IA7CG,QAAA,CAAA,KAAA,EA6CH;QACI,IAAI,CA7CC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;QA8C9C,IAAI,CA7CC,eAAC,CAAe,IAAC,CAAI;YA8CxB,MAAM,EA7CE,IAAA;YA8CR,WAAW,EA7CE,KAAA;YA8Cb,QAAQ,EA7CE,KAAA;SA8CX,CA7CC,CAAC;KA8CJ;;;;;IAKH,IA9CG,KAAA,GA8CH;QACI,OA9CO,IAAA,CAAK,MAAC,IAAS,SAAA;cAClB,IAAA,CAAK,MAAC;cACN,IAAA,CAAK,WAAC,CAAW,aAAC,CAAa,WAAC,CAAW;KA+ChD;;;;;IAKH,IAlDG,KAAA,CAAA,QAAA,EAkDH,EAlD6B,IAAA,CAAK,MAAC,GAAQ,QAAA,CAAS,EAAC;;;;;;IAwDrD,IAjDG,UAAA,GAiDH,EAjD8B,OAAO,IAAA,CAAK,WAAC,CAAW,EAAC;;;;;IAsDvD,IArDG,UAAA,CAAA,KAAA,EAqDH,EArDmC,IAAA,CAAK,WAAC,GAAa,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;;IA0DpF,IApDG,SAAA,GAoDH,EApD6B,OAAO,IAAA,CAAK,UAAC,CAAU,EAAC;;;;;IAyDrD,IAxDG,SAAA,CAAA,KAAA,EAwDH,EAxDkC,IAAA,CAAK,UAAC,GAAY,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;IA0FlF,IA7DG,YAAA,GA6DH;QACI,OA7DO,IAAA,CAAK,UAAC,GAAY,IAAA,CAAK,QAAC,CAAQ,QAAC,EAAQ,GAAI,IAAA,CAAK;KA8D1D;;;;IAYH,WAnEG,GAmEH;QACI,IAAI,CAnEC,SAAC,CAAS,IAAC,CAAI,EAAC,IAAC,EAAK,IAAA,EAAK,CAAC,CAAC;KAoEnC;;;;;IAKH,MArEG,GAqEH;QACI,IAAI,CArEC,SAAC,GAAW,IAAA,CAAK;QAsEtB,IAAI,CArEC,eAAC,CAAe,IAAC,CAAI;YAsExB,MAAM,EArEE,IAAA;YAsER,WAAW,EArEE,KAAA;YAsEb,QAAQ,EArEE,IAAA;SAsEX,CArEC,CAAC;KAsEJ;;;;;IAKH,QAvEG,GAuEH;QACI,IAAI,CAvEC,SAAC,GAAW,KAAA,CAAM;QAwEvB,IAAI,CAvEC,eAAC,CAAe,IAAC,CAAI;YAwExB,MAAM,EAvEE,IAAA;YAwER,WAAW,EAvEE,KAAA;YAwEb,QAAQ,EAvEE,KAAA;SAwEX,CAvEC,CAAC;KAwEJ;;;;;IAKH,oBAzEG,GAyEH;QACI,IAAI,CAzEC,SAAC,GAAW,IAAA,CAAK;;QA2EtB,IAAI,CAzEC,eAAC,CAAe,IAAC,CAAI;YA0ExB,MAAM,EAzEE,IAAA;YA0ER,WAAW,EAzEE,IAAA;YA0Eb,QAAQ,EAzEE,IAAA;SA0EX,CAzEC,CAAC;KA0EJ;;;;;;IAMH,cA5EG,CAAA,WA4EH,GA5EG,KAAA,EA4EH;QACI,IAAI,CA5EC,SAAC,GAAW,CAAA,IAAE,CAAI,QAAC,CAAQ;QA8EhC,IAAI,CA5EC,eAAC,CAAe,IAAC,CAAI;YA6ExB,MAAM,EA5EE,IAAA;YA6ER,WAAW;YACX,QAAQ,EA5EE,IAAA,CAAK,SAAC;SA6EjB,CA5EC,CAAC;QA8EH,OA5EO,IAAA,CAAK,QAAC,CAAQ;KA6EtB;;;;;IAKH,KA9EG,GA8EH;QACI,IAAI,CA9EC,WAAC,CAAW,aAAC,CAAa,KAAC,EAAK,CAAE;QA+EvC,IAAI,CA9EC,QAAC,CAAQ,IAAC,CAAI,EAAC,IAAC,EAAK,IAAA,EAAK,CAAC,CAAC;KA+ElC;;;;;;;;IAQH,MA9EG,GA8EH;QACI,IAAI,IA9EC,CAAI,SAAC,EAAU;YA+ElB,IAAI,CA9EC,OAAC,CAAO,IAAC,CAAI,EAAC,IAAC,EAAK,IAAA,EAAK,CAAC,CAAC;SA+EjC;KACF;;;;;;IAMH,YAjFG,CAAA,KAAA,EAiFH;;QAEI,IAAI,IAjFC,CAAI,QAAC,EAAS;YAkFjB,OAAO;SACR;QAED,KAAK,CAjFC,cAAC,EAAc,CAAE;QAkFvB,KAAK,CAjFC,eAAC,EAAe,CAAE;QAmFxB,IAAI,CAjFC,KAAC,EAAK,CAAE;KAkFd;;;;;;IAMH,cApFG,CAAA,KAAA,EAoFH;QACI,IAAI,IApFC,CAAI,QAAC,EAAS;YAqFjB,OAAO;SACR;QAED,QAAQ,KApFC,CAAK,OAAC;YAqFb,KApFK,MAAA,CAAO;YAqFZ,KApFK,SAAA;;gBAsFH,IAAI,CApFC,MAAC,EAAM,CAAE;;gBAsFd,KAAK,CApFC,cAAC,EAAc,CAAE;gBAqFvB,MAAM;YACR,KApFK,KAAA;;gBAsFH,IAAI,IApFC,CAAI,UAAC,EAAW;oBAqFnB,IAAI,CApFC,cAAC,CAAc,IAAC,CAAI,CAAC;iBAqF3B;;gBAGD,KAAK,CApFC,cAAC,EAAc,CAAE;gBAqFvB,MAAM;SA/BZ;KAiCC;;;;IAIH,KAtFG,GAsFH;QACI,IAAI,CAtFC,SAAC,GAAW,KAAA,CAAM;QAuFvB,IAAI,CAtFC,OAAC,CAAO,IAAC,CAAI,EAAC,IAAC,EAAK,IAAA,EAAK,CAAC,CAAC;KAuFjC;;AArFI,MAAP,CAAA,UAAO,GAAoC;IAuF3C,EAtFE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAuFvB,QAAQ,EAtFE,CAsFZ;mEACA,CAAoE;gBAClE,MAAM,EAtFE,CAAA,OAAE,EAAQ,UAAA,CAAW;gBAuF7B,QAAQ,EAtFE,iBAAA;gBAuFV,IAAI,EAtFE;oBAuFJ,OAAO,EAtFE,UAAA;oBAuFT,UAAU,EAtFE,IAAA;oBAuFZ,MAAM,EAtFE,QAAA;oBAuFR,2BAA2B,EAtFE,UAAA;oBAuF7B,iBAAiB,EAtFE,kBAAA;oBAuFnB,sBAAsB,EAtFE,qBAAA;oBAuFxB,sBAAsB,EAtFE,cAAA;oBAuFxB,SAAS,EAtFE,sBAAA;oBAuFX,WAAW,EAtFE,wBAAA;oBAuFb,SAAS,EAtFE,kBAAA;oBAuFX,QAAQ,EAtFE,SAAA;iBAuFX;aAEF,EAtFC,EAAG;CAuFJ,CAtFC;;;;AAED,MAAD,CAAA,cAAC,GAAA,MAAA;IAyFD,EAAC,IAAI,EAAE,SAAS,GAAG;IACnB,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AAvFK,MAAP,CAAA,cAAO,GAAyD;IAyFhE,UAAU,EAxFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAyF7B,OAAO,EAxFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAyF1B,YAAY,EAxFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAyF/B,WAAW,EAxFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAyF9B,iBAAiB,EAxFE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyFrC,WAAW,EAxFE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyF/B,SAAS,EAxFE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyF7B,SAAS,EAxFE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;IAyF7B,UAAU,EAxFE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;CAyFjD,CAxFC;AA2FF,AAgEA;;;;;;;;;;;;;AAaA,AAAA,MAAA,YAAA,CAAA;;;;IAIA,WAAA,CAzJwB,WAAa,EAyJrC;QAzJwB,IAAxB,CAAA,WAAwB,GAAA,WAAA,CAAa;KAAO;;;;;IA8J5C,YA3JG,GA2JH;QACI,IAAI,IA3JC,CAAI,WAAC,CAAW,SAAC,EAAU;YA4J9B,IAAI,CA3JC,WAAC,CAAW,MAAC,EAAM,CAAE;SA4J3B;KACF;;AA1JI,YAAP,CAAA,UAAO,GAAoC;IA4J3C,EA3JE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA4JvB,QAAQ,EA3JE,iCAAA;gBA4JV,IAAI,EA3JE;oBA4JJ,OAAO,EA3JE,iBAAA;oBA4JT,SAAS,EA3JE,sBAAA;iBA4JZ;aACF,EA3JC,EAAG;CA4JJ,CA3JC;;;;AAED,YAAD,CAAA,cAAC,GAAA,MAAA;IA8JD,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,CAAC,AAGF,AAUC;;AD3cD;AACA,IADI,YAAA,GAAe,CAAA,CAAE;;;;AAKrB,AAAA,MAAA,gBAAA,CAAA;;;;;IAKA,WAAA,CANqB,MAAQ,EAAmB,KAAO,EAMvD;QANqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAAQ;QAAmB,IAAhD,CAAA,KAAgD,GAAA,KAAA,CAAO;KAAI;CAQ1D;AAED,AAOA;;;AAGA,AAAA,MAAA,UAAA,CAAA;;;;;;;;;;IAmTA,WAAA,CAhGwB,SAAW,EACX,WAAa,EACf,kBAAoB,EACnB,IAAM,EACN,WAAa,EACb,gBAAkB,EAClB,SAAW,EA0FlC;QAhGwB,IAAxB,CAAA,SAAwB,GAAA,SAAA,CAAW;QACX,IAAxB,CAAA,WAAwB,GAAA,WAAA,CAAa;QACf,IAAtB,CAAA,kBAAsB,GAAA,kBAAA,CAAoB;QACnB,IAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QACN,IAAvB,CAAA,WAAuB,GAAA,WAAA,CAAa;QACb,IAAvB,CAAA,gBAAuB,GAAA,gBAAA,CAAkB;QAClB,IAAvB,CAAA,SAAuB,GAAA,SAAA,CAAW;;;;;QAnNlC,IAAA,CAAA,YAXG,GAAA,IAAA,OAAA,EAAA,CAAA;;;;QAGA,IAAH,CAAA,mBAAG,GAAA,IAAA,CAAA;;;;QAGA,IAAH,CAAA,QAAG,GAAA,IAAA,OAAA,EAAA,CAAA;;;;QAGA,IAAH,CAAA,mBAAG,GAAA,YAAA,CAAA,KAAA,CAAA;;;;QAkBA,IAAH,CAAA,WAAG,GAAA,IAAA,CAAA;;;;QAGA,IAAH,CAAA,SAAG,GAAA,KAAA,CAAA;;;;QAYA,IAAH,CAAA,IAAG,GAAA,CAAH,aAAA,EAAG,YAAA,EAAA,CAAH,CAAG,CAAA;;;;QAGA,IAAH,CAAA,SAAG,GAAA,KAAA,CAAA;;;;QAGA,IAAH,CAAA,SAAG,GAAA,KAAA,CAAA;;;;QAqCH,IAAA,CAAA,SA7BG,GAAA,CAAA,CAAA;;;;;QAkCH,IAAA,CAAA,aA5BG,GAAA,IAAA,CAAA;;;;QAoCH,IAAA,CAAA,UA9BG,GAAA,MA8BH,GA9BG,CAAA;;;;QAkCH,IAAA,CAAA,SA/BG,GAAA,MA+BH,GA/BG,CAAA;;;;QAKA,IAAH,CAAA,YAAG,GAAA,CAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA;;;;QAqKH,IAAA,CAAA,eA1EI,GAAA,YAAA,CAAA;;;;QA6HJ,IAAA,CAAA,MAxFI,GAAA,IAAA,YAAA,EAAA,CAAA;;;;;;QA8FJ,IAAA,CAAA,WAvFI,GAAA,IAAA,YAAA,EAAA,CAAA;QA4GA,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SACrC;KACF;;;;;IAjNH,IAlCG,QAAA,GAkCH;QACI,OAlCO,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,eAAC,CAAe,QAAC,GAAU,IAAA,CAAK,eAAC,CAAe,QAAC,CAAQ,CAAC,CAAC,CAAC;KAmCzF;;;;;IAKH,IAnCG,QAAA,GAmCH,EAnC4B,OAAO,IAAA,CAAK,SAAC,CAAS,EAAC;;;;;IAwCnD,IAvCG,QAAA,CAAA,KAAA,EAuCH;QACI,IAAI,CAvCC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;KAwC/C;;;;;;;IAOH,IAtCG,WAAA,GAsCH,EAtCsB,OAAO,IAAA,CAAK,YAAC,CAAY,EAAC;;;;;IA2ChD,IA1CG,WAAA,CAAA,EAAA,EA0CH;QACI,IAAI,CA1CC,YAAC,GAAc,EAAA,CAAG;QA2CvB,IAAI,IA1CC,CAAI,eAAC,EAAgB;;YA4CxB,IAAI,CA1CC,oBAAC,EAAoB,CAAE;SA2C7B;KACF;;;;;IAKH,IA3CG,KAAA,GA2CH,EA3CgB,OAAO,IAAA,CAAK,MAAC,CAAM,EAAC;;;;;IAgDpC,IA/CG,KAAA,CAAA,QAAA,EA+CH;QACI,IAAI,CA/CC,UAAC,CAAU,QAAC,CAAQ,CAAC;QAgD1B,IAAI,CA/CC,MAAC,GAAQ,QAAA,CAAS;KAgDxB;;;;;;IAMH,IAjDG,EAAA,CAAA,KAAA,EAiDH;QACI,IAAI,CAjDC,GAAC,GAAK,KAAA,CAAM;QAkDjB,IAAI,CAjDC,YAAC,CAAY,IAAC,EAAI,CAAE;KAkD1B;;;;IAIH,IApDG,EAAA,GAoDH,EApDa,OAAO,IAAA,CAAK,GAAC,IAAM,IAAA,CAAK,IAAC,CAAI,EAAC;;;;;;IA0D3C,IAtDG,QAAA,CAAA,KAAA,EAsDH;QACI,IAAI,CAtDC,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC;QAuD9C,IAAI,CAtDC,YAAC,CAAY,IAAC,EAAI,CAAE;KAuD1B;;;;IAIH,IAzDG,QAAA,GAyDH;QACI,OAzDO,IAAA,CAAK,SAAC,CAAS;KA0DvB;;;;;;IAMH,IA3DG,WAAA,CAAA,KAAA,EA2DH;QACI,IAAI,CA3DC,YAAC,GAAc,KAAA,CAAM;QA4D1B,IAAI,CA3DC,YAAC,CAAY,IAAC,EAAI,CAAE;KA4D1B;;;;IAIH,IA9DG,WAAA,GA8DH;QACI,OA9DO,IAAA,CAAK,UAAC,GAAY,IAAA,CAAK,UAAC,CAAU,WAAC,GAAa,IAAA,CAAK,YAAC,CAAY;KA+D1E;;;;;IAKH,IAhEG,OAAA,GAgEH;QACI,OAhEO,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,IAAC,IAAO,IAAA,CAAK,SAAC,CAAS;aAiE3C,IAhEC,CAAI,UAAC,IAAa,IAAA,CAAK,UAAC,CAAU,OAAC,CAAO,CAAC;KAiEhD;;;;;IAKH,IAlEG,KAAA,GAkEH;QACI,OAlEO,CAAA,CAAE,IAAC,CAAI,UAAC,IAAa,IAAA,CAAK,UAAC,CAAU,KAAC,KAAS,IAAA,CAAK,KAAC,CAAK,MAAC,KAAU,CAAA,CAAE;KAmE/E;;;;;IAKH,IAnEG,QAAA,GAmEH,EAnEmB,OAAO,IAAA,CAAK,SAAC,GAAW,IAAA,CAAK,SAAC,CAAS,QAAC,GAAU,IAAA,CAAK,SAAC,CAAS,EAAC;;;;;IAwErF,IAvEG,QAAA,CAAA,KAAA,EAuEH,EAvE6B,IAAA,CAAK,SAAC,GAAW,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;;IA4E5E,IAzEG,UAAA,GAyEH;QACI,uBAzEM,SAAA,GAAY,IAAA,CAAK,SAAC,IAAY,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO;QA0E3D,uBAzEM,SAAA,GAAY,IAAA,CAAK,SAAC,IAAY,IAAA,CAAK,SAAC,CAAS,OAAC,CAAO;QA0E3D,uBAzEM,WAAA,GAAc,CAAA,IAAE,CAAI,gBAAC,IAAmB,IAAA,CAAK,gBAAC,CAAgB,SAAC;aA0ElE,IAzEC,CAAI,WAAC,IAAc,IAAA,CAAK,WAAC,CAAW,SAAC,CAAS,CAAC;QA0EnD,OAzEO,CAAA,EAAG,SAAC,KAAY,SAAE,IAAY,WAAA,CAAY,CAAC,CAAC;KA0EpD;;;;;;IAUH,IAzEG,UAAA,GAyEH,EAzE8B,OAAO,IAAA,CAAK,WAAC,CAAW,EAAC;;;;;IA8EvD,IA7EG,UAAA,CAAA,KAAA,EA6EH,EA7EmC,IAAA,CAAK,WAAC,GAAa,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;;IAkFpF,IA/EG,QAAA,CAAA,KAAA,EA+EH;QACI,IAAI,CA/EC,aAAC,GAAe,KAAA,CAAM;QAgF3B,IAAI,CA/EC,SAAC,GAAW,KAAA,CAAM;KAgFxB;;;;;IAKH,IAjFG,oBAAA,GAiFH;QACI,OAjFO,KAAA,CAAM,GAAC,IAAG,CAAI,KAAC,CAAK,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,eAAC,CAAe,CAAC,CAAC;KAkF/D;;;;;IAKH,IAnFG,gBAAA,GAmFH;QACI,OAnFO,KAAA,CAAM,GAAC,IAAG,CAAI,KAAC,CAAK,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,QAAC,CAAQ,CAAC,CAAC;KAoFxD;;;;;IAKH,IArFG,eAAA,GAqFH;QACI,OArFO,KAAA,CAAM,GAAC,IAAG,CAAI,KAAC,CAAK,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,OAAC,CAAO,CAAC,CAAC;KAsFvD;;;;;IAKH,IAvFG,iBAAA,GAuFH;QACI,OAvFO,KAAA,CAAM,GAAC,IAAG,CAAI,KAAC,CAAK,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,OAAC,CAAO,CAAC,CAAC;KAwFvD;;;;IAsCH,kBAlGG,GAkGH;QAEI,IAAI,CAlGC,WAAC,GAAa,IAAI,eAAA,CAAuB,IAAE,CAAI,KAAC,CAAK,CAAC,QAAC,EAAQ,CAAE;;;QAsGtE,IAAI,CAlGC,mBAAC,GAAqB,IAAA,CAAK,WAAC,CAAW,MAAC,CAAM,SAAC,CAAS,MAkGjE;YACM,IAAI,CAlGC,SAAC,GAAW,CAAA,CAAE,CAAC;YAmGpB,UAAU,CAlGC,MAAM,IAAA,CAAK,SAAC,GAAW,IAAA,CAAK,aAAC,IAAgB,CAAA,CAAE,CAAC;SAmG5D,CAlGC,CAAC;;QAqGH,IAAI,CAlGC,mBAAC,GAAqB,SAAA,CAAU,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,OAAC,EAAQ,IAAA,CAAK,CAAC,SAAC,CAAS,MAkGlF;YACM,IAAI,CAlGC,WAAC,EAAW,CAAE;;YAqGnB,IAAI,CAlGC,oBAAC,EAAoB,CAAE;;YAqG5B,IAAI,CAlGC,eAAC,EAAe,CAAE;;YAqGvB,IAAI,CAlGC,6BAAC,EAA6B,CAAE;SAmGtC,CAlGC,CAAC;KAmGJ;;;;IAIH,QApGG,GAoGH;QACI,IAAI,CApGC,eAAC,GAAiB,IAAI,cAAA,CAAsB,IAAE,CAAI,QAAC,EAAS,SAAA,EAAW,KAAA,CAAM,CAAC;QAqGnF,IAAI,CApGC,YAAC,CAAY,IAAC,EAAI,CAAE;KAqG1B;;;;IAIH,WAtGG,GAsGH;QACI,IAAI,CAtGC,mBAAC,CAAmB,WAAC,EAAW,CAAE;QAwGvC,IAAI,IAtGC,CAAI,mBAAC,EAAoB;YAuG5B,IAAI,CAtGC,mBAAC,CAAmB,WAAC,EAAW,CAAE;SAuGxC;QACD,IAAI,CAtGC,kBAAC,EAAkB,CAAE;KAuG3B;;;;;;IAMH,aAxGG,CAAA,YAAA,EAwGH;QACI,IAAI,CAxGC,UAAC,GAAY,YAAA,CAAa;KAyGhC;;;;;IAKH,iBA1GG,CAAA,GAAA,EA0GH,EA1GqC,IAAA,CAAK,gBAAC,GAAkB,GAAA,CAAI,IAAC,CAAI,GAAC,CAAG,CAAC,EAAC;;;;;IA+G5E,UA5GG,CAAA,KAAA,EA4GH;QACI,IAAI,IA5GC,CAAI,KAAC,EAAM;YA6Gd,IAAI,CA5GC,oBAAC,CAAoB,KAAC,EAAM,KAAA,CAAM,CAAC;SA6GzC;KACF;;;;;IAKH,gBA9GG,CAAA,EAAA,EA8GH;QACI,IAAI,CA9GC,SAAC,GAAW,EAAA,CAAG;KA+GrB;;;;;IAKH,iBAhHG,CAAA,EAAA,EAgHH;QACI,IAAI,CAhHC,UAAC,GAAY,EAAA,CAAG;KAiHtB;;;;;IAKH,gBAlHG,CAAA,QAAA,EAkHH;QACI,IAAI,CAlHC,QAAC,GAAU,QAAA,CAAS;QAmHzB,IAAI,CAlHC,SAAC,CAAS,WAAC,CAAW,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,UAAA,EAAY,QAAA,CAAS,CAAC;QAmHjF,IAAI,CAlHC,YAAC,CAAY,IAAC,EAAI,CAAE;KAmH1B;;;;;;IAMH,KAlHG,GAkHH;;;QAGI,IAAI,IAlHC,CAAI,UAAC,IAAa,IAAA,CAAK,UAAC,CAAU,OAAC,EAAQ;;SAoH/C;aAlHM,IAAA,IAAK,CAAI,KAAC,CAAK,MAAC,GAAQ,CAAA,EAAG;YAmHhC,IAAI,CAlHC,WAAC,CAAW,kBAAC,EAAkB,CAAE;YAmHtC,IAAI,CAlHC,YAAC,CAAY,IAAC,EAAI,CAAE;SAmH1B;aAlHM;YAmHL,IAAI,CAlHC,WAAC,EAAW,CAAE;YAmHnB,IAAI,CAlHC,YAAC,CAAY,IAAC,EAAI,CAAE;SAmH1B;KACF;;;;;IAKH,WApHG,GAoHH;QACI,IAAI,IApHC,CAAI,UAAC,EAAW;YAqHnB,IAAI,CApHC,UAAC,CAAU,KAAC,EAAK,CAAE;SAqHzB;KACF;;;;;;IAMH,QArHG,CAAA,KAAA,EAqHH;QACI,qBArHI,IAAA,GAAO,KAAA,CAAM,OAAC,CAAO;QAsHzB,qBArHI,MAAA,IAAS,KAAA,CAAM,MAAU,CAAA,CAAY;QAsHzC,qBArHI,YAAA,GAAe,IAAA,CAAK,aAAC,CAAa,MAAC,CAAM,CAAC;QAsH9C,qBArHI,KAAA,GAAQ,IAAA,CAAK,IAAC,IAAO,IAAA,CAAK,IAAC,CAAI,KAAC,IAAQ,KAAA,CAAM;QAuHlD,qBArHI,SAAA,IAAY,IAAE,MAAQ,KAAE,GAAO,WAAA,GAAc,UAAA,CAAW,CAAC,CAAC;QAsH9D,qBArHI,SAAA,IAAY,IAAE,MAAQ,KAAE,GAAO,UAAA,GAAa,WAAA,CAAY,CAAC,CAAC;QAsH9D,qBArHI,SAAA,IAAY,IAAE,KAAQ,SAAA,IAAa,IAAA,IAAQ,MAAA,IAAU,IAAA,IAAQ,QAAA,IAAY,SAAA,CAAU,CAAC;;QAuHxF,IAAI,YArHC,IAAe,SAAA,EAAW;YAsH7B,IAAI,CArHC,WAAC,CAAW,iBAAC,EAAiB,CAAE;YAsHrC,KAAK,CArHC,cAAC,EAAc,CAAE;YAsHvB,OAAO;SACR;;;QAID,IAAI,MArHC,IAAS,MAAA,CAAO,SAAC,CAAS,QAAC,CAAQ,UAAC,CAAU,EAAE;YAsHnD,IAAI,SArHC,EAAU;gBAsHb,IAAI,CArHC,WAAC,CAAW,qBAAC,EAAqB,CAAE;gBAsHzC,KAAK,CArHC,cAAC,EAAc,CAAE;aAsHxB;iBArHM,IAAA,SAAK,EAAU;gBAsHpB,IAAI,CArHC,WAAC,CAAW,iBAAC,EAAiB,CAAE;gBAsHrC,KAAK,CArHC,cAAC,EAAc,CAAE;aAsHxB;iBArHM;gBAsHL,IAAI,CArHC,WAAC,CAAW,SAAC,CAAS,KAAC,CAAK,CAAC;aAsHnC;SACF;QACD,IAAI,CArHC,YAAC,CAAY,IAAC,EAAI,CAAE;KAsH1B;;;;;IA/GA,eAAA,GAAH;;QAsHI,IAAI,CApHC,SAAC,GAAW,IAAA,CAAK,aAAC,KAAgB,IAAE,CAAI,KAAC,CAAK,MAAC,KAAU,CAAA,GAAI,CAAA,CAAE,GAAG,CAAA,CAAE,CAAC;KAqH3E;;;;;;;;;IA5GA,iBAAA,CAAA,IAAA,EAAH;QAsHI,qBArHI,SAAA,GAAoB,IAAA,CAAK,KAAC,CAAK,OAAC,EAAO,CAAE,OAAC,CAAO,IAAC,CAAI,CAAC;QAsH3D,IAAI,IArHC,CAAI,aAAC,CAAa,SAAC,CAAS,EAAE;YAsHjC,IAAI,IArHC,CAAI,SAAC,EAAU;;gBAuHlB,IAAI,SArHC,GAAW,IAAA,CAAK,KAAC,CAAK,MAAC,GAAQ,CAAA,EAAG;oBAsHrC,IAAI,CArHC,WAAC,CAAW,aAAC,CAAa,SAAC,CAAS,CAAC;iBAsH3C;qBArHM,IAAA,SAAK,GAAW,CAAA,IAAK,CAAA,EAAG;oBAsH7B,IAAI,CArHC,WAAC,CAAW,aAAC,CAAa,SAAC,GAAW,CAAA,CAAE,CAAC;iBAsH/C;aACF;YACD,IAAI,IArHC,CAAI,WAAC,CAAW,eAAC,KAAmB,SAAA,EAAW;gBAsHlD,IAAI,CArHC,mBAAC,GAAqB,SAAA,CAAU;aAsHtC;SACF;KACF;;;;;;IA/GA,6BAAA,GAAH;QAsHI,qBArHI,UAAA,GAAa,IAAA,CAAK,KAAC,CAAK;QAuH5B,IAAI,IArHC,CAAI,mBAAC,IAAsB,IAAA,IAAQ,UAAA,CAAW,MAAC,GAAQ,CAAA,EAAG;;YAuH7D,uBArHM,aAAA,GAAgB,IAAA,CAAK,GAAC,CAAG,IAAC,CAAI,mBAAC,EAAoB,UAAA,CAAW,MAAC,GAAQ,CAAA,CAAE,CAAC;YAsHhF,IAAI,CArHC,WAAC,CAAW,aAAC,CAAa,aAAC,CAAa,CAAC;YAsH9C,qBArHI,SAAA,GAAY,IAAA,CAAK,WAAC,CAAW,UAAC,CAAU;;YAuH5C,IAAI,SArHC,EAAU;gBAsHb,SAAS,CArHC,KAAC,EAAK,CAAE;aAsHnB;SACF;aArHM,IAAA,UAAK,CAAU,MAAC,KAAU,CAAA,EAAG;YAsHlC,IAAI,CArHC,WAAC,EAAW,CAAE;SAsHpB;;QAGD,IAAI,CArHC,mBAAC,GAAqB,IAAA,CAAK;KAsHjC;;;;;;;IA7GA,aAAA,CAAA,KAAA,EAAH;QAqHI,OApHO,KAAA,IAAS,CAAA,IAAK,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK,MAAC,CAAM;KAqHhD;;;;;IAlHA,aAAA,CAAA,OAAA,EAAH;QAwHI,IAAI,OAvHC,IAAU,OAAA,CAAQ,QAAC,CAAQ,WAAC,EAAW,KAAM,OAAA,EAAS;YAwHzD,qBAvHI,KAAA,IAAQ,OAAW,CAAA,CAAiB;YAyHxC,OAvHO,CAAA,KAAE,CAAK,KAAC,CAAK;SAwHrB;QAED,OAvHO,KAAA,CAAM;KAwHd;;;;;;IAMH,oBA3HG,CAAA,KAAA,EAAA,WA2HH,GA3HG,IAAA,EA2HH;QACI,IAAI,CA3HC,eAAC,EAAe,CAAE;QA4HvB,IAAI,CA3HC,KAAC,CAAK,OAAC,CAAO,IAAC,IAAO,IAAA,CAAK,QAAC,EAAQ,CAAE,CAAC;QA6H5C,IAAI,KA3HC,CAAK,OAAC,CAAO,KAAC,CAAK,EAAE;YA4HxB,KAAK,CA3HC,OAAC,CAAO,YAAC,IAAe,IAAA,CAAK,YAAC,CAAY,YAAC,EAAa,WAAA,CAAY,CAAC,CAAC;YA4H5E,IAAI,CA3HC,WAAC,EAAW,CAAE;SA4HpB;aA3HM;YA4HL,uBA3HM,iBAAA,GAAoB,IAAA,CAAK,YAAC,CAAY,KAAC,EAAM,WAAA,CAAY,CAAC;;;YA+HhE,IAAI,iBA3HC,EAAkB;gBA4HrB,IAAI,CA3HC,WAAC,CAAW,aAAC,CAAa,IAAC,CAAI,KAAC,CAAK,OAAC,EAAO,CAAE,OAAC,CAAO,iBAAC,CAAiB,CAAC,CAAC;aA4HjF;SACF;KACF;;;;;;;IArHA,YAAA,CAAA,KAAA,EAAA,WAAH,GAAG,IAAA,EAAH;QA8HI,uBA5HM,iBAAA,GAAoB,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,IAAC,IA4H/C;YACM,OA5HO,IAAA,CAAK,KAAC,IAAQ,IAAA,IAAQ,IAAA,CAAK,YAAC,CAAY,IAAC,CAAI,KAAC,EAAM,KAAA,CAAO,CAAC;SA6HpE,CA5HC,CAAC;QA8HH,IAAI,iBA5HC,EAAkB;YA6HrB,WAAW,GA5HG,iBAAA,CAAkB,oBAAC,EAAoB,GAAI,iBAAA,CAAkB,MAAC,EAAM,CAAE;YA6HpF,IAAI,CA5HC,eAAC,CAAe,MAAC,CAAM,iBAAC,CAAiB,CAAC;SA6HhD;QAED,OA5HO,iBAAA,CAAkB;KA6H1B;;;;IA1HA,oBAAA,GAAH;;;QAiII,OAAO,CA9HC,OAAC,EAAO,CAAE,IAAC,CAAI,MA8H3B;YACM,IAAI,CA9HC,oBAAC,CAAoB,IAAC,CAAI,SAAC,GAAW,IAAA,CAAK,SAAC,CAAS,KAAC,GAAO,IAAA,CAAK,MAAC,EAAO,KAAA,CAAM,CAAC;YA+HtF,IAAI,CA9HC,YAAC,CAAY,IAAC,EAAI,CAAE;SA+H1B,CA9HC,CAAC;KA+HJ;;;;;;IAxHA,eAAA,CAAA,IAAA,EAAH;QA+HI,IAAI,CA9HC,eAAC,CAAe,KAAC,EAAK,CAAE;QA+H7B,IAAI,CA9HC,KAAC,CAAK,OAAC,CAAO,IAAC,IA8HxB;YACM,IAAI,IA9HC,KAAQ,IAAA,EAAM;gBA+HjB,IAAI,CA9HC,QAAC,EAAQ,CAAE;aA+HjB;SACF,CA9HC,CAAC;QA+HH,IAAI,CA9HC,YAAC,CAAY,IAAC,EAAI,CAAE;KA+H1B;;;;;;IAxHA,WAAA,GAAH;QA+HI,IAAI,IA9HC,CAAI,SAAC,EAAU;YA+HlB,IAAI,CA9HC,eAAC,CAAe,KAAC,EAAK,CAAE;YAgI7B,IAAI,CA9HC,KAAC,CAAK,OAAC,CAAO,IAAC,IA8H1B;gBACQ,IAAI,IA9HC,CAAI,QAAC,EAAS;oBA+HjB,IAAI,CA9HC,eAAC,CAAe,MAAC,CAAM,IAAC,CAAI,CAAC;iBA+HnC;aACF,CA9HC,CAAC;YA+HH,IAAI,CA9HC,YAAC,CAAY,IAAC,EAAI,CAAE;SA+H1B;KACF;;;;;;IA3HA,iBAAA,CAAA,aAAA,EAAH;QAkII,qBAjII,WAAA,GAAmB,IAAA,CAAK;QAmI5B,IAAI,KAjIC,CAAK,OAAC,CAAO,IAAC,CAAI,QAAC,CAAQ,EAAE;YAkIhC,WAAW,GAjIG,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,KAAC,CAAK,CAAC;SAkIrD;aAjIM;YAkIL,WAAW,GAjIG,IAAA,CAAK,QAAC,GAAU,IAAA,CAAK,QAAC,CAAQ,KAAC,GAAO,aAAA,CAAc;SAkInE;QACD,IAAI,CAjIC,MAAC,GAAQ,WAAA,CAAY;QAkI1B,IAAI,CAjIC,MAAC,CAAM,IAAC,CAAI,IAAI,gBAAA,CAAiB,IAAC,EAAK,WAAA,CAAY,CAAC,CAAC;QAkI1D,IAAI,CAjIC,WAAC,CAAW,IAAC,CAAI,WAAC,CAAW,CAAC;QAkInC,IAAI,CAjIC,SAAC,CAAS,WAAC,CAAW,CAAC;QAkI5B,IAAI,CAjIC,kBAAC,CAAkB,YAAC,EAAY,CAAE;KAkIxC;;;;;IAKH,KAnIG,GAmIH;QACI,IAAI,CAnIC,IAAC,CAAI,QAAC,EAAS;YAoIlB,IAAI,IAnIC,CAAI,UAAC,EAAW;;;;;gBAwInB,UAAU,CAnIC,MAmInB;oBACU,IAAI,CAnIC,IAAC,CAAI,OAAC,EAAQ;wBAoIjB,IAAI,CAnIC,cAAC,EAAc,CAAE;qBAoIvB;iBACF,CAnIC,CAAC;aAoIJ;iBAnIM;;gBAqIL,IAAI,CAnIC,cAAC,EAAc,CAAE;aAoIvB;SACF;KACF;;;;;IAKH,cArIG,GAqIH;QACI,IAAI,CArIC,UAAC,EAAU,CAAE;QAsIlB,IAAI,CArIC,kBAAC,CAAkB,YAAC,EAAY,CAAE;QAsIvC,IAAI,CArIC,YAAC,CAAY,IAAC,EAAI,CAAE;KAsI1B;;;;IAnIA,WAAA,GAAH;QAwII,IAAI,CAvIC,kBAAC,EAAkB,CAAE;QAwI1B,IAAI,CAvIC,mBAAC,EAAmB,CAAE;QAwI3B,IAAI,CAvIC,uBAAC,EAAuB,CAAE;QAwI/B,IAAI,CAvIC,qBAAC,EAAqB,CAAE;KAwI9B;;;;IApIA,kBAAA,GAAH;QAyII,IAAI,IAxIC,CAAI,sBAAC,EAAuB;YAyI/B,IAAI,CAxIC,sBAAC,CAAsB,WAAC,EAAW,CAAE;YAyI1C,IAAI,CAxIC,sBAAC,GAAwB,IAAA,CAAK;SAyIpC;QAED,IAAI,IAxIC,CAAI,qBAAC,EAAsB;YAyI9B,IAAI,CAxIC,qBAAC,CAAqB,WAAC,EAAW,CAAE;YAyIzC,IAAI,CAxIC,qBAAC,GAAuB,IAAA,CAAK;SAyInC;QAED,IAAI,IAxIC,CAAI,0BAAC,EAA2B;YAyInC,IAAI,CAxIC,0BAAC,CAA0B,WAAC,EAAW,CAAE;YAyI9C,IAAI,CAxIC,0BAAC,GAA4B,IAAA,CAAK;SAyIxC;KACF;;;;;IArIA,uBAAA,GAAH;QA2II,IAAI,CA1IC,0BAAC,GAA4B,IAAA,CAAK,oBAAC,CAAoB,SAAC,CAAS,KAAC,IA0I3E;YACM,KAAK,CA1IC,MAAC,CAAM,QAAC;kBACV,IAAA,CAAK,eAAC,CAAe,MAAC,CAAM,KAAC,CAAK,MAAC,CAAM;kBACzC,IAAA,CAAK,eAAC,CAAe,QAAC,CAAQ,KAAC,CAAK,MAAC,CAAM,CAAC;;YA6IhD,IAAI,CA1IC,IAAC,CAAI,QAAC,EAAS;gBA2IlB,IAAI,CA1IC,KAAC,CAAK,OAAC,CAAO,IAAC,IA0I5B;oBACU,IAAI,CA1IC,IAAC,CAAI,eAAC,CAAe,UAAC,CAAU,IAAC,CAAI,IAAI,IAAA,CAAK,QAAC,EAAS;wBA2I3D,IAAI,CA1IC,QAAC,EAAQ,CAAE;qBA2IjB;iBACF,CA1IC,CAAC;aA2IJ;YAED,IAAI,KA1IC,CAAK,WAAC,EAAY;gBA2IrB,IAAI,CA1IC,iBAAC,EAAiB,CAAE;aA2I1B;SACF,CA1IC,CAAC;KA2IJ;;;;;IAvIA,mBAAA,GAAH;QA6II,IAAI,CA5IC,sBAAC,GAAwB,IAAA,CAAK,gBAAC,CAAgB,SAAC,CAAS,KAAC,IA4InE;YACM,qBA5II,SAAA,GAAoB,IAAA,CAAK,KAAC,CAAK,OAAC,EAAO,CAAE,OAAC,CAAO,KAAC,CAAK,IAAC,CAAI,CAAC;YA8IjE,IAAI,IA5IC,CAAI,aAAC,CAAa,SAAC,CAAS,EAAE;gBA6IjC,IAAI,CA5IC,WAAC,CAAW,qBAAC,CAAqB,SAAC,CAAS,CAAC;aA6InD;YACD,IAAI,CA5IC,YAAC,CAAY,IAAC,EAAI,CAAE;SA6I1B,CA5IC,CAAC;QA8IH,IAAI,CA5IC,qBAAC,GAAuB,IAAA,CAAK,eAAC,CAAe,SAAC,CAAS,CAAC,IA4IjE;YACM,IAAI,CA5IC,KAAC,EAAK,CAAE;YA6Ib,IAAI,CA5IC,YAAC,CAAY,IAAC,EAAI,CAAE;SA6I1B,CA5IC,CAAC;KA6IJ;;;;IA1IA,qBAAA,GAAH;QA+II,IAAI,CA9IC,uBAAC,GAAyB,IAAA,CAAK,iBAAC,CAAiB,SAAC,CAAS,CAAC,KAAC,KA8ItE;YACM,IAAI,CA9IC,iBAAC,CAAiB,KAAC,CAAK,IAAC,CAAI,CAAC;SA+IpC,CA9IC,CAAC;KA+IJ;;AA7II,UAAP,CAAA,UAAO,GAAoC;IA+I3C,EA9IE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,CA8IzB,QAAA,EAAA,6BAAA;gBACE,QAAQ,EA9IE,CA8IZ,kEAAA,CAAA;gBACE,QAAQ,EA9IE,yBA8IZ;gBACE,IAAF,EAAA;oBACA,iBAAA,EAAA,WAAA;oBACM,yBAAN,EAAA,0BAAA;oBACI,sBAAJ,EAAA,qBAAA;oBACI,sBAAJ,EAAA,qBAAA;oBACI,qBAAJ,EAAA,YAAA;oBACI,6BAAJ,EAAA,UAAA;oBACI,gCAAJ,EAAA,UAAA;oBACI,+BA9I+B,EA8InC,YAAA;oBACI,gCAAgC,EA9IE,UAAA;oBA+IlC,MAAJ,EAAA,SAAA;oBACI,yBAAJ,EAAA,iBA9IsC;oBA+IlC,OAAJ,EAAA,eAAA;oBACI,SAAJ,EAAA,SAAA;oBACI,QAAJ,EAAA,SAAA;oBACI,WA9IW,EA8If,kBAAA;iBACA;gBACA,SAAA,EAAA,CAAA,EAAA,OAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,CAAA;gBACA,MAAA,EAAA,CAAA,ynDAAA,CAAA;gBACE,aAAF,EAAA,iBAAA,CAAA,IAAA;gBACE,mBAAF,EAAA,KAAA;gBACE,eA9Ie,EA8IjB,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAA,SAAA,GAAA;IA/IA,EAAA,IAAA,EAAA,UAAA,GAAC;IAiJD,EAAC,IAAI,EAAE,iBAAP,GAAA;IACA,EAAC,IAAI,EAAE,cAAP,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA;IACA,EAAC,IAAI,EAAE,MAAP,EAAA,UAAA,EAA2B,CAA3B,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA;IACA,EAAC,IAAI,EAAE,kBAAP,EAAA,UAAA,EAAA,CAAA,EAA0C,IAA1C,EAAA,QAAyD,EAAC,EAA1D,EAAA;IACA,EAAC,IAAI,EAAE,SAAP,EAAA,UAA4B,EAAE,CAA9B,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA;CACA,CAAA;AACA,UAAK,CAAL,cAAA,GAAA;IACA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IA/IA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAgE,KAAhE,EAAA,EAAA;IAiJA,OAAA,EAAA,CAAU,EAhJE,IAgJZ,EAAA,KAAA,EAAA,EAAA;IACA,IAAA,EAAA,CAAA,EAAA,IAAa,EAhJE,KAgJf,EAhJkB,EAAM;IAiJxB,UAhJS,EAAG,CAgJZ,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,aAhJS,EAAM,CAgJf,EAAA,IAhJqB,EAAE,KAgJvB,EAAA,EAAA;IACA,UAAU,EAhJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAiJ7B,iBAAA,EAAA,CAAA,EAhJkB,IAgJlB,EAAA,KAhJgC,EAgJhC,IAAA,EAAA,CAAA,kBAAA,EAAA,EAAA,EAAA;IACA,YAhJY,EAgJZ,CAhJe,EAgJf,IAhJqB,EAgJrB,KAhJ2B,EAAE,EAgJ7B;IACA,UAAA,EAAA,CAAA,EAAA,IAhJmB,EAgJnB,KAhJsB,EAAM,EAgJ5B;IACA,QAAA,EAAA,CAAA,EAAA,IAhJiB,EAgJjB,MAAA,EAAA,EAAA;IACA,aAhJY,EAAG,CAgJf,EAAA,IAAA,EAAA,MAhJ6B,EAgJ7B,EAAA;IACA,OAAA,EAAA,CAhJU,EAgJV,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,EAAA,EAAA;CACA,CAAA,AACA,AA8KA,AACA;;ADjhCA;;;;AAIA,AAAA,MAAA,WAAA,CAAA;;;;IA8EA,WAAA,CArBwB,WAAa,EAqBrC;QArBwB,IAAxB,CAAA,WAAwB,GAAA,WAAA,CAAa;QAxDnC,IAAF,CAAA,OAAS,GACY,KAAA,CAAM;QAsBzB,IAAF,CAAA,UAAY,GAJY,KAAA,CAAM;;;;;;;QAY3B,IAAH,CAAA,iBAAoB,GAJa,CAAA,KAAE,CAAK,CAAC;;;;QAQzC,IAAA,CAAA,OAJG,GAAA,IAAA,YAAA,EAAA,CAAA;QAMA,IAAH,CAAA,qBAAwB,GAJG,IAAA,CAAK,OAAC,CAAO;QA6BrC,IAAH,CAAA,WAAc,GAhBW,EAAA,CAAG;QAgCxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAiC,CAAC;KACzE;;;;;;IAxEH,IADG,QAAA,CAAA,KAAA,EACH;QACI,IAAI,KADC,EAAM;YAET,IAAI,CADC,SAAC,GAAW,KAAA,CAAM;YAEvB,IAAI,CADC,SAAC,CAAS,aAAC,CAAa,IAAC,CAAI,CAAC;SAEpC;KACF;;;;;IAKH,IAAG,SAAA,GAAH,EAAoB,OAAO,IAAA,CAAK,UAAC,CAAU,EAAC;;;;;IAK5C,IAJG,SAAA,CAAA,KAAA,EAIH,EAJyB,IAAA,CAAK,UAAC,GAAY,qBAAA,CAAsB,KAAC,CAAK,CAAC,EAAC;;;;;IAwBzE,IANG,WAAA,CAAA,KAAA,EAMH,EANuC,IAAA,CAAK,QAAC,GAAU,KAAA,CAAM,EAAC;;;;IAU9D,IAPG,YAAA,GAOH,EAPuB,OAAO,IAAA,CAAK,UAAC,CAAU,EAAC;;;;;IAY/C,IAXG,YAAA,CAAA,KAAA,EAWH,EAX4B,IAAA,CAAK,SAAC,GAAW,KAAA,CAAM,EAAC;;;;IAepD,IAZG,oBAAA,GAYH,EAZ+B,OAAO,IAAA,CAAK,iBAAC,CAAiB,EAAC;;;;;IAiB9D,IAhBG,oBAAA,CAAA,CAAA,EAgBH,EAhB0C,IAAA,CAAK,iBAAC,GAAmB,CAAA,CAAE,EAAC;;;;IAsBtE,IAlBG,KAAA,GAkBH;QACI,qBAlBI,KAAA,GAAuB,IAAA,CAAK,aAAC,CAAa,KAAC,CAAK;QAmBpD,OAlBO,KAAA,IAAS,IAAA,IAAQ,KAAA,KAAU,EAAA,CAAG;KAmBtC;;;;;;IAgBH,QAxBG,CAAA,KAAA,EAwBH;QACI,IAAI,CAxBC,YAAC,CAAY,KAAC,CAAK,CAAC;KAyB1B;;;;;IAKH,KA1BG,GA0BH;QACI,IAAI,IA1BC,CAAI,SAAC,EAAU;YA2BlB,IAAI,CA1BC,YAAC,EAAY,CAAE;SA2BrB;QACD,IAAI,CA1BC,OAAC,GAAS,KAAA,CAAM;;QA4BrB,IAAI,CA1BC,IAAC,CAAI,SAAC,CAAS,OAAC,EAAQ;YA2B3B,IAAI,CA1BC,SAAC,CAAS,KAAC,EAAK,CAAE;SA2BxB;QACD,IAAI,CA1BC,SAAC,CAAS,YAAC,CAAY,IAAC,EAAI,CAAE;KA2BpC;;;;IAIH,MA5BG,GA4BH;QACI,IAAI,CA5BC,OAAC,GAAS,IAAA,CAAK;QA6BpB,IAAI,CA5BC,SAAC,CAAS,YAAC,CAAY,IAAC,EAAI,CAAE;KA6BpC;;;;;;IAMH,YA/BG,CAAA,KAAA,EA+BH;QACI,IAAI,CA/BC,IAAC,CAAI,aAAC,CAAa,KAAC,IAAQ,CAAA,CAAE,KAAC,EAAM;YAgCxC,IAAI,CA/BC,SAAC,CAAS,QAAC,CAAQ,KAAC,CAAK,CAAC;SAgChC;QACD,IAAI,CA/BC,KAAC,IAAQ,IAAA,CAAK,iBAAC,CAAiB,OAAC,CAAO,KAAC,CAAK,OAAC,CAAO,GAAG,CAAA,CAAE,EAAE;YAgChE,IAAI,CA/BC,OAAC,CAAO,IAAC,CAAI,EAAE,KAAA,EAAO,IAAA,CAAK,aAAC,EAAc,KAAA,EAAO,IAAA,CAAK,aAAC,CAAa,KAAC,EAAK,CAAE,CAAC;YAiClF,IAAI,KA/BC,EAAM;gBAgCT,KAAK,CA/BC,cAAC,EAAc,CAAE;aAc7B;SAmBG;KACF;;;;IAIH,KAjCG,GAiCH,EAjCY,IAAA,CAAK,aAAC,CAAa,KAAC,EAAK,CAAE,EAAC;;AACjC,WAAP,CAAA,UAAO,GAAoC;IAkC3C,EAjCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAkCvB,QAAQ,EAjCE,+CAAA;gBAkCV,IAAI,EAjCE;oBAkCJ,OAAO,EAjCE,kCAAA;oBAkCT,WAAW,EAjCE,kBAAA;oBAkCb,QAAQ,EAjCE,SAAA;oBAkCV,SAAS,EAjCE,UAAA;iBAkCZ;aACF,EAjCC,EAAG;CAkCJ,CAjCC;;;;AAED,WAAD,CAAA,cAAC,GAAA,MAAA;IAoCD,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AAlCK,WAAP,CAAA,cAAO,GAAyD;IAoChE,UAAU,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,gBAAE,EAAgB,EAAG,EAAE;IAoCzD,WAAW,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,sBAAE,EAAsB,EAAG,EAAE;IAoChE,mBAAmB,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,8BAAE,EAA8B,EAAG,EAAE;IAoChF,SAAS,EAnCE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,qBAAE,EAAqB,EAAG,EAAE;IAoC9D,uBAAuB,EAnCE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,sBAAE,EAAsB,EAAG,EAAE;IAoC7E,aAAa,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,iBAAE,EAAiB,EAAG,EAAE;IAoC7D,cAAc,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,uBAAE,EAAuB,EAAG,EAAE;IAoCpE,sBAAsB,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,+BAAE,EAA+B,EAAG,EAAE;IAoCpF,aAAa,EAnCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;CAoC/B,CAnCC,AAsCF,AAkCC;;ADnND,MAAA,aAAA,CAAA;;AAEmC,aAAnC,CAAA,UAAmC,GAAoC;IADvE,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADtB,OAAO,EAEE,EAAA;gBADT,OAAO,EAEE,CAAA,UAAE,EAAW,MAAA,EAAQ,WAAA,EAAa,YAAA,EAAc,YAAA,EAAc,WAAA,CAAY;gBADnF,YAAY,EAEE,CAAA,UAAE,EAAW,MAAA,EAAQ,WAAA,EAAa,YAAA,EAAc,YAAA,EAAe,WAAA,CAAY;aAD1F,EAEC,EAAG;CADJ,CAEC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC,AAGF,AAQC;;ADnCD;;GAEG,AAEH,AAA0U;;"}