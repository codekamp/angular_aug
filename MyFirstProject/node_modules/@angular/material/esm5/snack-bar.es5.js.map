{"version":3,"file":"snack-bar.es5.js","sources":["../../../src/lib/snack-bar/index.ts","../../../src/lib/snack-bar/snack-bar-module.ts","../../../src/lib/snack-bar/snack-bar.ts","../../../src/lib/snack-bar/simple-snack-bar.ts","../../../src/lib/snack-bar/snack-bar-container.ts","../../../src/lib/snack-bar/snack-bar-ref.ts","../../../src/lib/snack-bar/snack-bar-config.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarHorizontalPosition,MdSnackBarVerticalPosition,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MAT_SNACK_BAR_DATA,MatSnackBar,MatSnackBarConfig,MatSnackBarContainer,MatSnackBarModule,MatSnackBarRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf } from '@angular/core';\nimport {Overlay, OverlayRef, OverlayConfig} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {PortalInjector} from '@angular/material/core';\nimport {extendObject} from '@angular/material/core';\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayConfig();\n    state.direction = config.direction;\n\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\n    const /** @type {?} */ isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    state.positionStrategy = positionStrategy;\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarConfig} from './snack-bar-config';\n\n\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\n * SnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (event.toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': 'getAnimationState()',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      // Animation from top.\n      state('visible-top', style({transform: 'translateY(0%)'})),\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\n      // Animation from bottom.\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\n      transition('void => visible-bottom',\n        animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMdSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMdSnackBarContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\n\n/** Possible values for horizontalPosition on MdSnackBarConfig. */\nexport type MdSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MdSnackBarConfig. */\nexport type MdSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MdSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MdSnackBarVerticalPosition = 'bottom';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.verticalPosition;\n}\n\n"],"names":["state"],"mappings":"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"}