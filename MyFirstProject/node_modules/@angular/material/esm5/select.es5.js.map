{"version":3,"file":"select.es5.js","sources":["../../../src/lib/select/index.ts","../../../src/lib/select/select-module.ts","../../../src/lib/select/select.ts","../../../src/lib/select/select-errors.ts","../../../src/lib/select/select-animations.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {fadeInContent,transformPanel,transformPlaceholder,MdSelectModule,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MatSelect,MatSelectBase,MatSelectChange,MatSelectModule,MatSelectTrigger} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, MdOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {filter, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  FloatPlaceholderType,\n  HasTabIndex,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  MdOptgroup,\n  MdOption,\n  MdOptionSelectionChange,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\nimport {\n  getMdSelectDynamicMultipleError,\n  getMdSelectNonArrayValueError,\n  getMdSelectNonFunctionValueError,\n} from './select-errors';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MdSelectBase), 'primary'));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMdSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this._control ? this._control.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    this._optionSubscription.unsubscribe();\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n          this.options, this.optionGroups);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      let /** @type {?} */ groupLabels = MdOption.countGroupLabelsBeforeOption(0, this.options, this.optionGroups);\n\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (groupLabels * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect, matSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n"],"names":[],"mappings":"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"}