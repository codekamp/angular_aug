{"version":3,"file":"radio.es5.js","sources":["../../../src/lib/radio/index.ts","../../../src/lib/radio/radio-module.ts","../../../src/lib/radio/radio.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioButton,MatRadioButtonBase,MatRadioChange,MatRadioGroup,MatRadioGroupBase,MatRadioModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from '@angular/material/core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, A11yModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple, MATERIAL_COMPATIBILITY_MODE,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}