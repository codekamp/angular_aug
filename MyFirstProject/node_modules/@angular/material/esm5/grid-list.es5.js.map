{"version":3,"file":"grid-list.es5.js","sources":["../../../src/lib/grid-list/index.ts","../../../src/lib/grid-list/grid-list-module.ts","../../../src/lib/grid-list/grid-list.ts","../../../src/lib/grid-list/tile-styler.ts","../../../src/lib/grid-list/tile-coordinator.ts","../../../src/lib/grid-list/grid-tile.ts","../../../src/lib/grid-list/grid-list-measure.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdGridTile,MdGridListModule,MdGridList,MatGridList,MatGridListModule,MatGridTile} from './public_api';\n\nexport {MdGridAvatarCssMatStyler as ɵb,MdGridTileFooterCssMatStyler as ɵd,MdGridTileHeaderCssMatStyler as ɵc,MdGridTileText as ɵa} from './grid-tile';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '@angular/material/core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    const /** @type {?} */ newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                  `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @param {?} rowHeight\n * @return {?}\n */\nprivate _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridList} from './grid-list';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n/**\n * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n * \\@docs-private\n * @abstract\n * @param {?} list Grid list that the styler was attached to.\n * @return {?}\n */\nreset(list: MdGridList) {}\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    const /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: any): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n"],"names":[],"mappings":"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"}