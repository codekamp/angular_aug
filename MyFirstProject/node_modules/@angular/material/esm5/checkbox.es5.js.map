{"version":3,"file":"checkbox.es5.js","sources":["../../../src/lib/checkbox/index.ts","../../../src/lib/checkbox/checkbox-module.ts","../../../src/lib/checkbox/checkbox-required-validator.ts","../../../src/lib/checkbox/checkbox.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdCheckboxModule,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckbox,MatCheckboxBase,MatCheckboxChange,MatCheckboxModule,MatCheckboxRequiredValidator} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdRippleModule, MdCommonModule} from '@angular/material/core';\nimport {MdCheckbox} from './checkbox';\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule, A11yModule],\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-checkbox[required][formControlName],\n             mat-checkbox[required][formControlName],\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleRef,\n} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}