{"version":3,"file":"material-list.umd.js","sources":["../../src/lib/list/index.ts","../../src/lib/list/list-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/core/index.ts","../../src/lib/core/style/index.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/line/line.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/animation/animation.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdSelectionListBase,_MdSelectionListMixinBase,MdListOptionBase,_MdListOptionMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList,MatDividerCssMatStyler,MatList,MatListAvatarCssMatStyler,MatListBase,MatListCssMatStyler,MatListDivider,MatListIconCssMatStyler,MatListItem,MatListItemBase,MatListModule,MatListOption,MatListOptionBase,MatListSubheaderCssMatStyler,MatNavListCssMatStyler,MatSelectionList,MatSelectionListBase,MatSelectionListOptionEvent} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MdCommonModule,\n  MdLineModule,\n  MdPseudoCheckboxModule,\n  MdRippleModule,\n} from '@angular/material/core';\nimport {\n  MdDividerCssMatStyler,\n  MdList,\n  MdListAvatarCssMatStyler,\n  MdListCssMatStyler,\n  MdListDivider,\n  MdListIconCssMatStyler,\n  MdListItem,\n  MdListSubheaderCssMatStyler,\n  MdNavListCssMatStyler,\n} from './list';\nimport {MdListOption, MdSelectionList} from './selection-list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule, MdPseudoCheckboxModule, CommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdPseudoCheckboxModule,\n    MdSelectionList,\n    MdListOption\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdSelectionList,\n    MdListOption\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MATERIAL_COMPATIBILITY_MODE,\n  MdLine,\n  MdLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  RxChain,\n  SPACE,\n  startWith,\n  switchMap,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * \\@docs-private\n */\nexport class MdSelectionListBase {}\nexport const /** @type {?} */ _MdSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MdSelectionListBase));\n/**\n * \\@docs-private\n */\nexport class MdListOptionBase {}\nexport const /** @type {?} */ _MdListOptionMixinBase = mixinDisableRipple(MdListOptionBase);\n\n/** Event emitted by a selection-list whenever the state of an option is changed. */\nexport interface MdSelectionListOptionEvent {\n  option: MdListOption;\n}\n\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport class MdListOption extends _MdListOptionMixinBase\n    implements AfterContentInit, OnDestroy, FocusableOption, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _selected: boolean = false;\nprivate _disabled: boolean = false;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Value of the option\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the option is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MdSelectionList) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n\n    if (this.selectionList.disabled) {\n      this.disabled = true;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({option: this});\n  }\n/**\n * Toggles the selection state of the option.\n * @return {?}\n */\ntoggle(): void {\n    this.selected = !this.selected;\n    this.selectionList.selectedOptions.toggle(this);\n    this._changeDetector.markForCheck();\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\n    this._element.nativeElement.focus();\n    this.onFocus.emit({option: this});\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-option, mat-list-option',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MdSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MdListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListOption.ctorParameters;\n/** @type {?} */\nMdListOption.propDecorators;\n/** @type {?} */\nMdListOption.prototype._lineSetter;\n/** @type {?} */\nMdListOption.prototype._selected;\n/** @type {?} */\nMdListOption.prototype._disabled;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMdListOption.prototype._hasFocus;\n/** @type {?} */\nMdListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdListOption.prototype.checkboxPosition;\n/**\n * Value of the option\n * @type {?}\n */\nMdListOption.prototype.value;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMdListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMdListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMdListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMdListOption.prototype.destroyed;\n/** @type {?} */\nMdListOption.prototype._renderer;\n/** @type {?} */\nMdListOption.prototype._element;\n/** @type {?} */\nMdListOption.prototype._changeDetector;\n/** @type {?} */\nMdListOption.prototype.selectionList;\n}\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MdSelectionList extends _MdSelectionListMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterContentInit, OnDestroy {\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription = Subscription.EMPTY;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream = Subscription.EMPTY;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MdListOption>;\n/**\n * The currently selected options.\n */\nselectedOptions: SelectionModel<MdListOption> = new SelectionModel<MdListOption>(true);\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdListOption>(this.options).withWrap();\n\n    if (this.disabled) {\n      this._tabIndex = -1;\n    }\n\n    this._optionFocusSubscription = this._onFocusSubscription();\n    this._optionDestroyStream = this._onDestroySubscription();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._optionDestroyStream.unsubscribe();\n    this._optionFocusSubscription.unsubscribe();\n  }\n/**\n * Focus the selection-list.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * Selects all of the options.\n * @return {?}\n */\nselectAll() {\n    this.options.forEach(option => {\n      if (!option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Deselects all of the options.\n * @return {?}\n */\ndeselectAll() {\n    this.options.forEach(option => {\n      if (option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.destroyed));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n        if (e.option._hasFocus) {\n          // Check whether the option is the last item\n          if (optionIndex < this.options.length - 1) {\n            this._keyManager.setActiveItem(optionIndex);\n          } else if (optionIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(optionIndex - 1);\n          }\n        }\n        e.option.destroyed.unsubscribe();\n      });\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.onFocus));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n      this._keyManager.updateActiveItemIndex(optionIndex);\n    });\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedOption: MdListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n      }\n    }\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of options.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-selection-list, mat-selection-list',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': '_tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MdListOption, ] },],\n};\n}\n\nfunction MdSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionList.ctorParameters;\n/** @type {?} */\nMdSelectionList.propDecorators;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMdSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMdSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMdSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMdSelectionList.prototype.options;\n/**\n * The currently selected options.\n * @type {?}\n */\nMdSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMdSelectionList.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE, MdLine, MdLineSetter} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n/**\n * A Material Design list component.\n */\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\n/**\n * An item within a Material Design list.\n */\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {A11yModule,AnimationCurves,AnimationDurations,Directionality,DIRECTIONALITY_PROVIDER,DIR_DOCUMENT,Direction,Dir,BidiModule,MdCommonModule,MATERIAL_SANITY_CHECKS,CanDisable,mixinDisabled,CanColor,mixinColor,ThemePalette,CanDisableRipple,mixinDisableRipple,HasTabIndex,mixinTabIndex,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,CompatibilityModule,NoConflictStyleCompatibilityMode,UniqueSelectionDispatcherListener,UniqueSelectionDispatcher,UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY,UNIQUE_SELECTION_DISPATCHER_PROVIDER,NativeDateModule,MdNativeDateModule,MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MD_ERROR_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,HammerInput,HammerStatic,Recognizer,RecognizerStatic,HammerInstance,HammerManager,GestureConfig,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z,MdLine,MdLineSetter,MdLineModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,OverlayConfig,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,MD_PLACEHOLDER_GLOBAL_OPTIONS,FloatPlaceholderType,PlaceholderOptions,PlatformModule,Platform,getSupportedInputTypes,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule,PortalInjector,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,RxChain,StrictRxChain,FinallyBrand,CatchBrand,DoBrand,MapBrand,FilterBrand,ShareBrand,FirstBrand,SwitchMapBrand,StartWithBrand,DebounceTimeBrand,AuditTimeBrand,TakeUntilBrand,finallyOperatorType,catchOperatorType,doOperatorType,mapOperatorType,filterOperatorType,shareOperatorType,firstOperatorType,switchMapOperatorType,startWithOperatorType,debounceTimeOperatorType,auditTimeOperatorType,takeUntilOperatorType,finallyOperator,catchOperator,doOperator,map,filter,share,first,switchMap,startWith,debounceTime,auditTime,takeUntil,MdPseudoCheckboxModule,MdPseudoCheckboxState,MdPseudoCheckbox,StyleModule,CdkMonitorFocus,FocusMonitor,FOCUS_MONITOR_PROVIDER,FocusOrigin,applyCssTransform,extendObject,MAT_DATE_FORMATS,MAT_RIPPLE_GLOBAL_OPTIONS,MAT_NATIVE_DATE_FORMATS,MAT_PLACEHOLDER_GLOBAL_OPTIONS,MAT_ERROR_GLOBAL_OPTIONS,MatCommonModule,MatDateFormats,MatLine,MatLineModule,MatLineSetter,MatOptgroup,MatOptgroupBase,MatOption,MatOptionModule,MatOptionSelectionChange,MatNativeDateModule,MatPseudoCheckbox,MatPseudoCheckboxModule,MatPseudoCheckboxState,MatRipple,MatRippleModule,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC} from './public_api';\n\nexport {RippleRenderer as ɵa} from './ripple/ripple-renderer';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n/**\n * @deprecated\n */\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [A11yModule],\n  exports: [A11yModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\nexport {\n  CdkMonitorFocus,\n  FocusMonitor,\n  FOCUS_MONITOR_PROVIDER,\n  FocusOrigin,\n} from '@angular/cdk/a11y';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdPseudoCheckboxModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  QueryList,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\n    optionGroups: QueryList<MdOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple, matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["Component","merge","switchMap","startWith","RxChain","FocusKeyManager","SelectionModel","Subscription","tslib_1.__extends","Output","Input","Optional","Inject","forwardRef","ChangeDetectorRef","ChangeDetectionStrategy","coerceBooleanProperty","EventEmitter","ContentChild","ElementRef","Renderer2","Directive","ViewEncapsulation","A11yModule","NgModule","InjectionToken","CommonModule","ENTER","SPACE","VIEWPORT_RULER_PROVIDER","PlatformModule","ScrollDispatchModule","Platform","ViewportRuler","NgZone","HammerGestureConfig","isDevMode","LOCALE_ID","Injectable"],"mappings":"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"}