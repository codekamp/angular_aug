{"version":3,"file":"material-examples.umd.js","sources":["../../src/material-examples/index.ts","../../src/material-examples/example-data.ts","../../src/material-examples/example-module.ts","../../src/material-examples/tooltip-position/tooltip-position-example.ts","../../src/material-examples/tooltip-overview/tooltip-overview-example.ts","../../src/material-examples/toolbar-overview/toolbar-overview-example.ts","../../src/material-examples/toolbar-multirow/toolbar-multirow-example.ts","../../src/material-examples/tabs-template-label/tabs-template-label-example.ts","../../src/material-examples/tabs-overview/tabs-overview-example.ts","../../src/material-examples/table-sorting/table-sorting-example.ts","../../src/material-examples/table-pagination/table-pagination-example.ts","../../src/material-examples/table-overview/table-overview-example.ts","../../src/material-examples/table-http/table-http-example.ts","../../src/material-examples/table-filtering/table-filtering-example.ts","../../src/material-examples/table-basic/table-basic-example.ts","../../src/material-examples/stepper-overview/stepper-overview-example.ts","../../src/material-examples/sort-overview/sort-overview-example.ts","../../src/material-examples/snack-bar-overview/snack-bar-overview-example.ts","../../src/material-examples/snack-bar-component/snack-bar-component-example.ts","../../src/material-examples/slider-overview/slider-overview-example.ts","../../src/material-examples/slider-configurable/slider-configurable-example.ts","../../src/material-examples/slide-toggle-overview/slide-toggle-overview-example.ts","../../src/material-examples/slide-toggle-forms/slide-toggle-forms-example.ts","../../src/material-examples/slide-toggle-configurable/slide-toggle-configurable-example.ts","../../src/material-examples/sidenav-overview/sidenav-overview-example.ts","../../src/material-examples/sidenav-fab/sidenav-fab-example.ts","../../src/material-examples/select-overview/select-overview-example.ts","../../src/material-examples/select-form/select-form-example.ts","../../src/material-examples/radio-overview/radio-overview-example.ts","../../src/material-examples/radio-ng-model/radio-ng-model-example.ts","../../src/material-examples/progress-spinner-overview/progress-spinner-overview-example.ts","../../src/material-examples/progress-spinner-configurable/progress-spinner-configurable-example.ts","../../src/material-examples/progress-bar-overview/progress-bar-overview-example.ts","../../src/material-examples/progress-bar-configurable/progress-bar-configurable-example.ts","../../src/material-examples/paginator-overview/paginator-overview-example.ts","../../src/material-examples/paginator-configurable/paginator-configurable-example.ts","../../src/material-examples/nested-menu/nested-menu-example.ts","../../src/material-examples/menu-overview/menu-overview-example.ts","../../src/material-examples/menu-icons/menu-icons-example.ts","../../src/material-examples/list-selection/list-selection-example.ts","../../src/material-examples/list-sections/list-sections-example.ts","../../src/material-examples/list-overview/list-overview-example.ts","../../src/material-examples/input-prefix-suffix/input-prefix-suffix-example.ts","../../src/material-examples/input-overview/input-overview-example.ts","../../src/material-examples/input-hint/input-hint-example.ts","../../src/material-examples/input-form/input-form-example.ts","../../src/material-examples/input-errors/input-errors-example.ts","../../src/material-examples/input-clearable/input-clearable-example.ts","../../src/material-examples/icon-svg-example/icon-svg-example.ts","../../src/material-examples/icon-overview/icon-overview-example.ts","../../src/material-examples/grid-list-overview/grid-list-overview-example.ts","../../src/material-examples/grid-list-dynamic/grid-list-dynamic-example.ts","../../src/material-examples/expansion-steps/expansion-steps-example.ts","../../src/material-examples/expansion-overview/expansion-overview-example.ts","../../src/material-examples/dialog-overview/dialog-overview-example.ts","../../src/material-examples/dialog-elements/dialog-elements-example.ts","../../src/material-examples/dialog-data/dialog-data-example.ts","../../src/material-examples/dialog-content/dialog-content-example.ts","../../src/material-examples/datepicker-touch/datepicker-touch-example.ts","../../src/material-examples/datepicker-start-view/datepicker-start-view-example.ts","../../src/material-examples/datepicker-overview/datepicker-overview-example.ts","../../src/material-examples/datepicker-min-max/datepicker-min-max-example.ts","../../src/material-examples/datepicker-filter/datepicker-filter-example.ts","../../src/material-examples/datepicker-api/datepicker-api-example.ts","../../src/material-examples/chips-stacked/chips-stacked-example.ts","../../src/material-examples/chips-overview/chips-overview-example.ts","../../src/material-examples/chips-input/chips-input-example.ts","../../src/material-examples/checkbox-overview/checkbox-overview-example.ts","../../src/material-examples/checkbox-configurable/checkbox-configurable-example.ts","../../src/material-examples/cdk-table-basic/cdk-table-basic-example.ts","../../src/material-examples/card-overview/card-overview-example.ts","../../src/material-examples/card-fancy/card-fancy-example.ts","../../src/material-examples/button-types/button-types-example.ts","../../src/material-examples/button-toggle-overview/button-toggle-overview-example.ts","../../src/material-examples/button-toggle-exclusive/button-toggle-exclusive-example.ts","../../src/material-examples/button-overview/button-overview-example.ts","../../src/material-examples/autocomplete-simple/autocomplete-simple-example.ts","../../src/material-examples/autocomplete-overview/autocomplete-overview-example.ts","../../src/material-examples/autocomplete-filter/autocomplete-filter-example.ts","../../src/material-examples/autocomplete-display/autocomplete-display-example.ts","../../src/material-examples/material-module.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ExampleData,LiveExample,EXAMPLE_COMPONENTS,EXAMPLE_LIST,ExampleModule,ListOverviewExample,DatepickerOverviewExample,CardFancyExample,ToolbarMultirowExample,ButtonToggleOverviewExample,ExpansionOverviewExample,StepperOverviewExample} from './public_api';\n\nexport {AutocompleteDisplayExample as ɵa} from './autocomplete-display/autocomplete-display-example';\nexport {AutocompleteFilterExample as ɵb} from './autocomplete-filter/autocomplete-filter-example';\nexport {AutocompleteOverviewExample as ɵc} from './autocomplete-overview/autocomplete-overview-example';\nexport {AutocompleteSimpleExample as ɵd} from './autocomplete-simple/autocomplete-simple-example';\nexport {ButtonOverviewExample as ɵe} from './button-overview/button-overview-example';\nexport {ButtonToggleExclusiveExample as ɵf} from './button-toggle-exclusive/button-toggle-exclusive-example';\nexport {ButtonTypesExample as ɵg} from './button-types/button-types-example';\nexport {CardOverviewExample as ɵh} from './card-overview/card-overview-example';\nexport {CdkTableBasicExample as ɵi} from './cdk-table-basic/cdk-table-basic-example';\nexport {CheckboxConfigurableExample as ɵj} from './checkbox-configurable/checkbox-configurable-example';\nexport {CheckboxOverviewExample as ɵk} from './checkbox-overview/checkbox-overview-example';\nexport {ChipsInputExample as ɵl} from './chips-input/chips-input-example';\nexport {ChipsOverviewExample as ɵm} from './chips-overview/chips-overview-example';\nexport {ChipsStackedExample as ɵn} from './chips-stacked/chips-stacked-example';\nexport {DatepickerApiExample as ɵo} from './datepicker-api/datepicker-api-example';\nexport {DatepickerFilterExample as ɵp} from './datepicker-filter/datepicker-filter-example';\nexport {DatepickerMinMaxExample as ɵq} from './datepicker-min-max/datepicker-min-max-example';\nexport {DatepickerStartViewExample as ɵr} from './datepicker-start-view/datepicker-start-view-example';\nexport {DatepickerTouchExample as ɵs} from './datepicker-touch/datepicker-touch-example';\nexport {DialogContentExample as ɵt,DialogContentExampleDialog as ɵu} from './dialog-content/dialog-content-example';\nexport {DialogDataExample as ɵv,DialogDataExampleDialog as ɵw} from './dialog-data/dialog-data-example';\nexport {DialogElementsExample as ɵx,DialogElementsExampleDialog as ɵy} from './dialog-elements/dialog-elements-example';\nexport {DialogOverviewExample as ɵz,DialogOverviewExampleDialog as ɵba} from './dialog-overview/dialog-overview-example';\nexport {ExpansionStepsExample as ɵbb} from './expansion-steps/expansion-steps-example';\nexport {GridListDynamicExample as ɵbc} from './grid-list-dynamic/grid-list-dynamic-example';\nexport {GridListOverviewExample as ɵbd} from './grid-list-overview/grid-list-overview-example';\nexport {IconOverviewExample as ɵbe} from './icon-overview/icon-overview-example';\nexport {IconSvgExample as ɵbf} from './icon-svg-example/icon-svg-example';\nexport {InputClearableExample as ɵbg} from './input-clearable/input-clearable-example';\nexport {InputErrorsExample as ɵbh} from './input-errors/input-errors-example';\nexport {InputFormExample as ɵbi} from './input-form/input-form-example';\nexport {InputHintExample as ɵbj} from './input-hint/input-hint-example';\nexport {InputOverviewExample as ɵbk} from './input-overview/input-overview-example';\nexport {InputPrefixSuffixExample as ɵbl} from './input-prefix-suffix/input-prefix-suffix-example';\nexport {ListSectionsExample as ɵbm} from './list-sections/list-sections-example';\nexport {ListSelectionExample as ɵbn} from './list-selection/list-selection-example';\nexport {ExampleMaterialModule as ɵcx} from './material-module';\nexport {MenuIconsExample as ɵbo} from './menu-icons/menu-icons-example';\nexport {MenuOverviewExample as ɵbp} from './menu-overview/menu-overview-example';\nexport {NestedMenuExample as ɵbq} from './nested-menu/nested-menu-example';\nexport {PaginatorConfigurableExample as ɵbr} from './paginator-configurable/paginator-configurable-example';\nexport {PaginatorOverviewExample as ɵbs} from './paginator-overview/paginator-overview-example';\nexport {ProgressBarConfigurableExample as ɵbt} from './progress-bar-configurable/progress-bar-configurable-example';\nexport {ProgressBarOverviewExample as ɵbu} from './progress-bar-overview/progress-bar-overview-example';\nexport {ProgressSpinnerConfigurableExample as ɵbv} from './progress-spinner-configurable/progress-spinner-configurable-example';\nexport {ProgressSpinnerOverviewExample as ɵbw} from './progress-spinner-overview/progress-spinner-overview-example';\nexport {RadioNgModelExample as ɵbx} from './radio-ng-model/radio-ng-model-example';\nexport {RadioOverviewExample as ɵby} from './radio-overview/radio-overview-example';\nexport {SelectFormExample as ɵbz} from './select-form/select-form-example';\nexport {SelectOverviewExample as ɵca} from './select-overview/select-overview-example';\nexport {SidenavFabExample as ɵcb} from './sidenav-fab/sidenav-fab-example';\nexport {SidenavOverviewExample as ɵcc} from './sidenav-overview/sidenav-overview-example';\nexport {SlideToggleConfigurableExample as ɵcd} from './slide-toggle-configurable/slide-toggle-configurable-example';\nexport {SlideToggleFormsExample as ɵce} from './slide-toggle-forms/slide-toggle-forms-example';\nexport {SlideToggleOverviewExample as ɵcf} from './slide-toggle-overview/slide-toggle-overview-example';\nexport {SliderConfigurableExample as ɵcg} from './slider-configurable/slider-configurable-example';\nexport {SliderOverviewExample as ɵch} from './slider-overview/slider-overview-example';\nexport {PizzaPartyComponent as ɵcj,SnackBarComponentExample as ɵci} from './snack-bar-component/snack-bar-component-example';\nexport {SnackBarOverviewExample as ɵck} from './snack-bar-overview/snack-bar-overview-example';\nexport {SortOverviewExample as ɵcl} from './sort-overview/sort-overview-example';\nexport {TableBasicExample as ɵcm} from './table-basic/table-basic-example';\nexport {TableFilteringExample as ɵcn} from './table-filtering/table-filtering-example';\nexport {TableHttpExample as ɵco} from './table-http/table-http-example';\nexport {TableOverviewExample as ɵcp} from './table-overview/table-overview-example';\nexport {TablePaginationExample as ɵcq} from './table-pagination/table-pagination-example';\nexport {TableSortingExample as ɵcr} from './table-sorting/table-sorting-example';\nexport {TabsOverviewExample as ɵcs} from './tabs-overview/tabs-overview-example';\nexport {TabsTemplateLabelExample as ɵct} from './tabs-template-label/tabs-template-label-example';\nexport {ToolbarOverviewExample as ɵcu} from './toolbar-overview/toolbar-overview-example';\nexport {TooltipOverviewExample as ɵcv} from './tooltip-overview/tooltip-overview-example';\nexport {TooltipPositionExample as ɵcw} from './tooltip-position/tooltip-position-example';","import {EXAMPLE_COMPONENTS} from './example-module';\n/**\n * Example data\n *   with information about Component name, selector, files used in example, and path to examples\n */\nexport class ExampleData {\n  // TODO: figure out how do we get these variables.\n  description = 'Some description for material';\n  // TODO: use real example and delete the example/ folder.\n  examplePath = '/assets/example/';\n  exampleFiles = ['button-demo.html', 'button-demo.scss', 'button-demo.ts'];\n\n  // TODO: extract these variables from example code.\n  selectorName = 'button-demo';\n  indexFilename = 'button-demo';\n  componentName = 'ButtonDemo';\n/**\n * @param {?} example\n */\nconstructor(example: string) {\n    if (example && EXAMPLE_COMPONENTS[example]) {\n      this.examplePath = `/assets/plunker/examples/${example}/`;\n      // TODO(tinayuangao): Do not hard-code extensions\n      this.exampleFiles = ['html', 'ts', 'css']\n        .map((extension) => `${example}-example.${extension}`);\n      if (EXAMPLE_COMPONENTS[example].additionalFiles) {\n        this.exampleFiles = this.exampleFiles.concat(EXAMPLE_COMPONENTS[example].additionalFiles);\n      }\n      this.selectorName = this.indexFilename = `${example}-example`;\n\n      let exampleName = example.replace(/(?:^\\w|\\b\\w)/g, letter => letter.toUpperCase());\n\n      if (EXAMPLE_COMPONENTS[example].title) {\n        this.description = EXAMPLE_COMPONENTS[example].title;\n      } else {\n        this.description = exampleName.replace(/[\\-]+/g, ' ') + ' Example';\n      }\n\n      if (EXAMPLE_COMPONENTS[example].selectorName) {\n        this.componentName = EXAMPLE_COMPONENTS[example].selectorName;\n      } else {\n        this.componentName = exampleName.replace(/[\\-]+/g, '') + 'Example';\n      }\n    }\n  }\n}\n\nfunction ExampleData_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleData.prototype.description;\n/** @type {?} */\nExampleData.prototype.examplePath;\n/** @type {?} */\nExampleData.prototype.exampleFiles;\n/** @type {?} */\nExampleData.prototype.selectorName;\n/** @type {?} */\nExampleData.prototype.indexFilename;\n/** @type {?} */\nExampleData.prototype.componentName;\n}\n\n","\n/* tslint:disable */\n/** DO NOT MANUALLY EDIT THIS FILE, IT IS GENERATED VIA GULP 'build-examples-module' */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {ExampleMaterialModule} from './material-module';\n\nexport interface LiveExample {\n  title: string;\n  component: any;\n  additionalFiles?: string[];\n  selectorName?: string;\n}\n\nimport {AutocompleteDisplayExample} from './autocomplete-display/autocomplete-display-example';\nimport {AutocompleteFilterExample} from './autocomplete-filter/autocomplete-filter-example';\nimport {AutocompleteOverviewExample} from './autocomplete-overview/autocomplete-overview-example';\nimport {AutocompleteSimpleExample} from './autocomplete-simple/autocomplete-simple-example';\nimport {ButtonOverviewExample} from './button-overview/button-overview-example';\nimport {ButtonToggleExclusiveExample} from './button-toggle-exclusive/button-toggle-exclusive-example';\nimport {ButtonToggleOverviewExample} from './button-toggle-overview/button-toggle-overview-example';\nimport {ButtonTypesExample} from './button-types/button-types-example';\nimport {CardFancyExample} from './card-fancy/card-fancy-example';\nimport {CardOverviewExample} from './card-overview/card-overview-example';\nimport {CdkTableBasicExample} from './cdk-table-basic/cdk-table-basic-example';\nimport {CheckboxConfigurableExample} from './checkbox-configurable/checkbox-configurable-example';\nimport {CheckboxOverviewExample} from './checkbox-overview/checkbox-overview-example';\nimport {ChipsInputExample} from './chips-input/chips-input-example';\nimport {ChipsOverviewExample} from './chips-overview/chips-overview-example';\nimport {ChipsStackedExample} from './chips-stacked/chips-stacked-example';\nimport {DatepickerApiExample} from './datepicker-api/datepicker-api-example';\nimport {DatepickerFilterExample} from './datepicker-filter/datepicker-filter-example';\nimport {DatepickerMinMaxExample} from './datepicker-min-max/datepicker-min-max-example';\nimport {DatepickerOverviewExample} from './datepicker-overview/datepicker-overview-example';\nimport {DatepickerStartViewExample} from './datepicker-start-view/datepicker-start-view-example';\nimport {DatepickerTouchExample} from './datepicker-touch/datepicker-touch-example';\nimport {DialogContentExampleDialog,DialogContentExample} from './dialog-content/dialog-content-example';\nimport {DialogDataExampleDialog,DialogDataExample} from './dialog-data/dialog-data-example';\nimport {DialogElementsExampleDialog,DialogElementsExample} from './dialog-elements/dialog-elements-example';\nimport {DialogOverviewExampleDialog,DialogOverviewExample} from './dialog-overview/dialog-overview-example';\nimport {ExpansionOverviewExample} from './expansion-overview/expansion-overview-example';\nimport {ExpansionStepsExample} from './expansion-steps/expansion-steps-example';\nimport {GridListDynamicExample} from './grid-list-dynamic/grid-list-dynamic-example';\nimport {GridListOverviewExample} from './grid-list-overview/grid-list-overview-example';\nimport {IconOverviewExample} from './icon-overview/icon-overview-example';\nimport {IconSvgExample} from './icon-svg-example/icon-svg-example';\nimport {InputClearableExample} from './input-clearable/input-clearable-example';\nimport {InputErrorsExample} from './input-errors/input-errors-example';\nimport {InputFormExample} from './input-form/input-form-example';\nimport {InputHintExample} from './input-hint/input-hint-example';\nimport {InputOverviewExample} from './input-overview/input-overview-example';\nimport {InputPrefixSuffixExample} from './input-prefix-suffix/input-prefix-suffix-example';\nimport {ListOverviewExample} from './list-overview/list-overview-example';\nimport {ListSectionsExample} from './list-sections/list-sections-example';\nimport {ListSelectionExample} from './list-selection/list-selection-example';\nimport {MenuIconsExample} from './menu-icons/menu-icons-example';\nimport {MenuOverviewExample} from './menu-overview/menu-overview-example';\nimport {NestedMenuExample} from './nested-menu/nested-menu-example';\nimport {PaginatorConfigurableExample} from './paginator-configurable/paginator-configurable-example';\nimport {PaginatorOverviewExample} from './paginator-overview/paginator-overview-example';\nimport {ProgressBarConfigurableExample} from './progress-bar-configurable/progress-bar-configurable-example';\nimport {ProgressBarOverviewExample} from './progress-bar-overview/progress-bar-overview-example';\nimport {ProgressSpinnerConfigurableExample} from './progress-spinner-configurable/progress-spinner-configurable-example';\nimport {ProgressSpinnerOverviewExample} from './progress-spinner-overview/progress-spinner-overview-example';\nimport {RadioNgModelExample} from './radio-ng-model/radio-ng-model-example';\nimport {RadioOverviewExample} from './radio-overview/radio-overview-example';\nimport {SelectFormExample} from './select-form/select-form-example';\nimport {SelectOverviewExample} from './select-overview/select-overview-example';\nimport {SidenavFabExample} from './sidenav-fab/sidenav-fab-example';\nimport {SidenavOverviewExample} from './sidenav-overview/sidenav-overview-example';\nimport {SlideToggleConfigurableExample} from './slide-toggle-configurable/slide-toggle-configurable-example';\nimport {SlideToggleFormsExample} from './slide-toggle-forms/slide-toggle-forms-example';\nimport {SlideToggleOverviewExample} from './slide-toggle-overview/slide-toggle-overview-example';\nimport {SliderConfigurableExample} from './slider-configurable/slider-configurable-example';\nimport {SliderOverviewExample} from './slider-overview/slider-overview-example';\nimport {PizzaPartyComponent,SnackBarComponentExample} from './snack-bar-component/snack-bar-component-example';\nimport {SnackBarOverviewExample} from './snack-bar-overview/snack-bar-overview-example';\nimport {SortOverviewExample} from './sort-overview/sort-overview-example';\nimport {StepperOverviewExample} from './stepper-overview/stepper-overview-example';\nimport {TableBasicExample} from './table-basic/table-basic-example';\nimport {TableFilteringExample} from './table-filtering/table-filtering-example';\nimport {TableHttpExample} from './table-http/table-http-example';\nimport {TableOverviewExample} from './table-overview/table-overview-example';\nimport {TablePaginationExample} from './table-pagination/table-pagination-example';\nimport {TableSortingExample} from './table-sorting/table-sorting-example';\nimport {TabsOverviewExample} from './tabs-overview/tabs-overview-example';\nimport {TabsTemplateLabelExample} from './tabs-template-label/tabs-template-label-example';\nimport {ToolbarMultirowExample} from './toolbar-multirow/toolbar-multirow-example';\nimport {ToolbarOverviewExample} from './toolbar-overview/toolbar-overview-example';\nimport {TooltipOverviewExample} from './tooltip-overview/tooltip-overview-example';\nimport {TooltipPositionExample} from './tooltip-position/tooltip-position-example';\n\nexport const /** @type {?} */ EXAMPLE_COMPONENTS = {\n  'autocomplete-display': {\n    title: 'Display value autocomplete',\n    component: AutocompleteDisplayExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-filter': {\n    title: 'Filter autocomplete',\n    component: AutocompleteFilterExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-overview': {\n    title: 'Autocomplete overview',\n    component: AutocompleteOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'autocomplete-simple': {\n    title: 'Simple autocomplete',\n    component: AutocompleteSimpleExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-overview': {\n    title: 'Basic buttons',\n    component: ButtonOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-exclusive': {\n    title: 'Exclusive selection',\n    component: ButtonToggleExclusiveExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-toggle-overview': {\n    title: 'Basic button-toggles',\n    component: ButtonToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'button-types': {\n    title: 'Button varieties',\n    component: ButtonTypesExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-fancy': {\n    title: 'Card with multiple sections',\n    component: CardFancyExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'card-overview': {\n    title: 'Basic cards',\n    component: CardOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'cdk-table-basic': {\n    title: 'Basic CDK data-table',\n    component: CdkTableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-configurable': {\n    title: 'Configurable checkbox',\n    component: CheckboxConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'checkbox-overview': {\n    title: 'Basic checkboxes',\n    component: CheckboxOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-input': {\n    title: 'Chips with input',\n    component: ChipsInputExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-overview': {\n    title: 'Basic chips',\n    component: ChipsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'chips-stacked': {\n    title: 'Stacked chips',\n    component: ChipsStackedExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-api': {\n    title: 'Datepicker API',\n    component: DatepickerApiExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-filter': {\n    title: 'Datepicker Filter',\n    component: DatepickerFilterExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-min-max': {\n    title: 'Datepicker Min Max',\n    component: DatepickerMinMaxExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-overview': {\n    title: 'Basic datepicker',\n    component: DatepickerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-start-view': {\n    title: 'Datepicker start date',\n    component: DatepickerStartViewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'datepicker-touch': {\n    title: 'Datepicker Touch',\n    component: DatepickerTouchExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'dialog-content': {\n    title: 'Dialog with header, scrollable content and actions',\n    component: DialogContentExample,\n    additionalFiles: [\"dialog-content-example-dialog.html\"],\n    selectorName: 'DialogContentExample, DialogContentExampleDialog'\n  },\n  'dialog-data': {\n    title: 'Injecting data when opening a dialog',\n    component: DialogDataExample,\n    additionalFiles: [\"dialog-data-example-dialog.html\"],\n    selectorName: 'DialogDataExample, DialogDataExampleDialog'\n  },\n  'dialog-elements': {\n    title: 'Dialog elements',\n    component: DialogElementsExample,\n    additionalFiles: [\"dialog-elements-example-dialog.html\"],\n    selectorName: 'DialogElementsExample, DialogElementsExampleDialog'\n  },\n  'dialog-overview': {\n    title: 'Dialog Overview',\n    component: DialogOverviewExample,\n    additionalFiles: [\"dialog-overview-example-dialog.html\"],\n    selectorName: 'DialogOverviewExample, DialogOverviewExampleDialog'\n  },\n  'expansion-overview': {\n    title: 'Basic expansion panel',\n    component: ExpansionOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'expansion-steps': {\n    title: 'Expansion panel as accordion',\n    component: ExpansionStepsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'grid-list-dynamic': {\n    title: 'Dynamic grid-list',\n    component: GridListDynamicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'grid-list-overview': {\n    title: 'Basic grid-list',\n    component: GridListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-overview': {\n    title: 'Basic icons',\n    component: IconOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'icon-svg': {\n    title: 'SVG icons',\n    component: IconSvgExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-clearable': {\n    title: 'Input Clearable',\n    component: InputClearableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-errors': {\n    title: 'Input Errors',\n    component: InputErrorsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-form': {\n    title: 'Inputs in a form',\n    component: InputFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-hint': {\n    title: 'Input hints',\n    component: InputHintExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-overview': {\n    title: 'Basic Inputs',\n    component: InputOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'input-prefix-suffix': {\n    title: 'Input Prefixes and Suffixes',\n    component: InputPrefixSuffixExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-overview': {\n    title: 'Basic list',\n    component: ListOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-sections': {\n    title: 'List with sections',\n    component: ListSectionsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'list-selection': {\n    title: 'List with selection',\n    component: ListSelectionExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-icons': {\n    title: 'Menu with icons',\n    component: MenuIconsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'menu-overview': {\n    title: 'Basic menu',\n    component: MenuOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'nested-menu': {\n    title: 'Nested menu',\n    component: NestedMenuExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-configurable': {\n    title: 'Configurable paginator',\n    component: PaginatorConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'paginator-overview': {\n    title: 'Paginator',\n    component: PaginatorOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-configurable': {\n    title: 'Configurable progress-bar',\n    component: ProgressBarConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-bar-overview': {\n    title: 'Basic progress-bar',\n    component: ProgressBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-configurable': {\n    title: 'Configurable progress spinner',\n    component: ProgressSpinnerConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'progress-spinner-overview': {\n    title: 'Basic progress-spinner',\n    component: ProgressSpinnerOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-ng-model': {\n    title: 'Radios with ngModel',\n    component: RadioNgModelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'radio-overview': {\n    title: 'Basic radios',\n    component: RadioOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-form': {\n    title: 'Select in a form',\n    component: SelectFormExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'select-overview': {\n    title: 'Basic select',\n    component: SelectOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-fab': {\n    title: 'Sidenav with a FAB',\n    component: SidenavFabExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sidenav-overview': {\n    title: 'Basic sidenav',\n    component: SidenavOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-configurable': {\n    title: 'Configurable slide-toggle',\n    component: SlideToggleConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-forms': {\n    title: 'Slide-toggle with forms',\n    component: SlideToggleFormsExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slide-toggle-overview': {\n    title: 'Basic slide-toggles',\n    component: SlideToggleOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-configurable': {\n    title: 'Configurable slider',\n    component: SliderConfigurableExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'slider-overview': {\n    title: 'Basic slider',\n    component: SliderOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'snack-bar-component': {\n    title: 'Snack-bar with a custom component',\n    component: SnackBarComponentExample,\n    additionalFiles: [\"snack-bar-component-example-snack.html\"],\n    selectorName: 'SnackBarComponentExample, PizzaPartyComponent'\n  },\n  'snack-bar-overview': {\n    title: 'Basic snack-bar',\n    component: SnackBarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'sort-overview': {\n    title: 'Sorting overview',\n    component: SortOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'stepper-overview': {\n    title: 'Stepper overview',\n    component: StepperOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-basic': {\n    title: 'Basic table',\n    component: TableBasicExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-filtering': {\n    title: 'Table with filtering',\n    component: TableFilteringExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-http': {\n    title: 'Table retrieving data through HTTP',\n    component: TableHttpExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-overview': {\n    title: 'Feature-rich data table',\n    component: TableOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-pagination': {\n    title: 'Table with pagination',\n    component: TablePaginationExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'table-sorting': {\n    title: 'Table with sorting',\n    component: TableSortingExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-overview': {\n    title: 'Basic tabs',\n    component: TabsOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tabs-template-label': {\n    title: 'Complex Example',\n    component: TabsTemplateLabelExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-multirow': {\n    title: 'Multi-row toolbar',\n    component: ToolbarMultirowExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'toolbar-overview': {\n    title: 'Basic toolbar',\n    component: ToolbarOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-overview': {\n    title: 'Basic tooltip',\n    component: TooltipOverviewExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n  'tooltip-position': {\n    title: 'Tooltip with custom position',\n    component: TooltipPositionExample,\n    additionalFiles: null,\n    selectorName: null\n  },\n};\n\nexport const /** @type {?} */ EXAMPLE_LIST = [\n  AutocompleteDisplayExample,\n  AutocompleteFilterExample,\n  AutocompleteOverviewExample,\n  AutocompleteSimpleExample,\n  ButtonOverviewExample,\n  ButtonToggleExclusiveExample,\n  ButtonToggleOverviewExample,\n  ButtonTypesExample,\n  CardFancyExample,\n  CardOverviewExample,\n  CdkTableBasicExample,\n  CheckboxConfigurableExample,\n  CheckboxOverviewExample,\n  ChipsInputExample,\n  ChipsOverviewExample,\n  ChipsStackedExample,\n  DatepickerApiExample,\n  DatepickerFilterExample,\n  DatepickerMinMaxExample,\n  DatepickerOverviewExample,\n  DatepickerStartViewExample,\n  DatepickerTouchExample,\n  DialogContentExampleDialog,DialogContentExample,\n  DialogDataExampleDialog,DialogDataExample,\n  DialogElementsExampleDialog,DialogElementsExample,\n  DialogOverviewExampleDialog,DialogOverviewExample,\n  ExpansionOverviewExample,\n  ExpansionStepsExample,\n  GridListDynamicExample,\n  GridListOverviewExample,\n  IconOverviewExample,\n  IconSvgExample,\n  InputClearableExample,\n  InputErrorsExample,\n  InputFormExample,\n  InputHintExample,\n  InputOverviewExample,\n  InputPrefixSuffixExample,\n  ListOverviewExample,\n  ListSectionsExample,\n  ListSelectionExample,\n  MenuIconsExample,\n  MenuOverviewExample,\n  NestedMenuExample,\n  PaginatorConfigurableExample,\n  PaginatorOverviewExample,\n  ProgressBarConfigurableExample,\n  ProgressBarOverviewExample,\n  ProgressSpinnerConfigurableExample,\n  ProgressSpinnerOverviewExample,\n  RadioNgModelExample,\n  RadioOverviewExample,\n  SelectFormExample,\n  SelectOverviewExample,\n  SidenavFabExample,\n  SidenavOverviewExample,\n  SlideToggleConfigurableExample,\n  SlideToggleFormsExample,\n  SlideToggleOverviewExample,\n  SliderConfigurableExample,\n  SliderOverviewExample,\n  PizzaPartyComponent,SnackBarComponentExample,\n  SnackBarOverviewExample,\n  SortOverviewExample,\n  StepperOverviewExample,\n  TableBasicExample,\n  TableFilteringExample,\n  TableHttpExample,\n  TableOverviewExample,\n  TablePaginationExample,\n  TableSortingExample,\n  TabsOverviewExample,\n  TabsTemplateLabelExample,\n  ToolbarMultirowExample,\n  ToolbarOverviewExample,\n  TooltipOverviewExample,\n  TooltipPositionExample,\n];\nexport class ExampleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: EXAMPLE_LIST,\n  entryComponents: EXAMPLE_LIST,\n  imports: [\n    ExampleMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Tooltip with custom position\n */\nexport class TooltipPositionExample {\n  position = 'before';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-position-example',\n  templateUrl: 'tooltip-position-example.html',\n  styleUrls: ['tooltip-position-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipPositionExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipPositionExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipPositionExample.ctorParameters;\n/** @type {?} */\nTooltipPositionExample.prototype.position;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tooltip\n */\nexport class TooltipOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-overview-example',\n  templateUrl: 'tooltip-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TooltipOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic toolbar\n */\nexport class ToolbarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-overview-example',\n  templateUrl: 'toolbar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Multi-row toolbar\n */\nexport class ToolbarMultirowExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'toolbar-multirow-example',\n  templateUrl: 'toolbar-multirow-example.html',\n  styleUrls: ['toolbar-multirow-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToolbarMultirowExample_tsickle_Closure_declarations() {\n/** @type {?} */\nToolbarMultirowExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToolbarMultirowExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Complex Example\n */\nexport class TabsTemplateLabelExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-template-label-example',\n  templateUrl: 'tabs-template-label-example.html',\n  styleUrls: ['./tabs-template-label-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsTemplateLabelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsTemplateLabelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsTemplateLabelExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic tabs\n */\nexport class TabsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tabs-overview-example',\n  templateUrl: 'tabs-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TabsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTabsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTabsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdSort} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with sorting\n */\nexport class TableSortingExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   sort: MdSort;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.sort);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-sorting-example',\n  styleUrls: ['table-sorting-example.css'],\n  templateUrl: 'table-sorting-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableSortingExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableSortingExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableSortingExample.ctorParameters;\n/** @type {?} */\nTableSortingExample.propDecorators;\n/** @type {?} */\nTableSortingExample.prototype.displayedColumns;\n/** @type {?} */\nTableSortingExample.prototype.exampleDatabase;\n/** @type {?} */\nTableSortingExample.prototype.dataSource;\n/** @type {?} */\nTableSortingExample.prototype.sort;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.sortChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this.getSortedData();\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @return {?}\n */\ngetSortedData(): UserData[] {\n    const /** @type {?} */ data = this._exampleDatabase.data.slice();\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator} from '@angular/material';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Table with pagination\n */\nexport class TablePaginationExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-pagination-example',\n  styleUrls: ['table-pagination-example.css'],\n  templateUrl: 'table-pagination-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n};\n}\n\nfunction TablePaginationExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTablePaginationExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTablePaginationExample.ctorParameters;\n/** @type {?} */\nTablePaginationExample.propDecorators;\n/** @type {?} */\nTablePaginationExample.prototype.displayedColumns;\n/** @type {?} */\nTablePaginationExample.prototype.exampleDatabase;\n/** @type {?} */\nTablePaginationExample.prototype.dataSource;\n/** @type {?} */\nTablePaginationExample.prototype.paginator;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      const /** @type {?} */ data = this._exampleDatabase.data.slice();\n\n      // Grab the page's slice of data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      return data.splice(startIndex, this._paginator.pageSize);\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator, MdSort} from '@angular/material';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/debounceTime';\n/**\n * \\@title Feature-rich data table\n */\nexport class TableOverviewExample {\n  displayedColumns = ['select', 'userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  selection = new SelectionModel<string>(true, []);\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator, this.sort);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\n/**\n * @return {?}\n */\nisAllSelected(): boolean {\n    if (!this.dataSource) { return false; }\n    if (this.selection.isEmpty()) { return false; }\n\n    if (this.filter.nativeElement.value) {\n      return this.selection.selected.length == this.dataSource.renderedData.length;\n    } else {\n      return this.selection.selected.length == this.exampleDatabase.data.length;\n    }\n  }\n/**\n * @return {?}\n */\nmasterToggle() {\n    if (!this.dataSource) { return; }\n\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else if (this.filter.nativeElement.value) {\n      this.dataSource.renderedData.forEach(data => this.selection.select(data.id));\n    } else {\n      this.exampleDatabase.data.forEach(data => this.selection.select(data.id));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-overview-example',\n  styleUrls: ['table-overview-example.css'],\n  templateUrl: 'table-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableOverviewExample.ctorParameters;\n/** @type {?} */\nTableOverviewExample.propDecorators;\n/** @type {?} */\nTableOverviewExample.prototype.displayedColumns;\n/** @type {?} */\nTableOverviewExample.prototype.exampleDatabase;\n/** @type {?} */\nTableOverviewExample.prototype.selection;\n/** @type {?} */\nTableOverviewExample.prototype.dataSource;\n/** @type {?} */\nTableOverviewExample.prototype.paginator;\n/** @type {?} */\nTableOverviewExample.prototype.sort;\n/** @type {?} */\nTableOverviewExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n\n  filteredData: UserData[] = [];\n  renderedData: UserData[] = [];\n/**\n * @param {?} _exampleDatabase\n * @param {?} _paginator\n * @param {?} _sort\n */\nconstructor(private _exampleDatabase: ExampleDatabase,\nprivate _paginator: MdPaginator,\nprivate _sort: MdSort) {\n    super();\n\n    // Reset to the first page when the user changes the filter.\n    this._filterChange.subscribe(() => this._paginator.pageIndex = 0);\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.sortChange,\n      this._filterChange,\n      this._paginator.page,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      // Filter data\n      this.filteredData = this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n\n      // Sort filtered data\n      const /** @type {?} */ sortedData = this.sortData(this.filteredData.slice());\n\n      // Grab the page's slice of the filtered sorted data.\n      const /** @type {?} */ startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n      return this.renderedData;\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n/**\n * Returns a sorted copy of the database data.\n * @param {?} data\n * @return {?}\n */\nsortData(data: UserData[]): UserData[] {\n    if (!this._sort.active || this._sort.direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let /** @type {?} */ propertyA: number|string = '';\n      let /** @type {?} */ propertyB: number|string = '';\n\n      switch (this._sort.active) {\n        case 'userId': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'userName': [propertyA, propertyB] = [a.name, b.name]; break;\n        case 'progress': [propertyA, propertyB] = [a.progress, b.progress]; break;\n        case 'color': [propertyA, propertyB] = [a.color, b.color]; break;\n      }\n\n      let /** @type {?} */ valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      let /** @type {?} */ valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction == 'asc' ? 1 : -1);\n    });\n  }\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype.filteredData;\n/** @type {?} */\nExampleDataSource.prototype.renderedData;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype._paginator;\n/** @type {?} */\nExampleDataSource.prototype._sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MdPaginator, MdSort} from '@angular/material';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\n/**\n * \\@title Table retrieving data through HTTP\n */\nexport class TableHttpExample implements OnInit {\n  displayedColumns = ['created_at', 'state', 'number', 'title'];\n  exampleDatabase: ExampleHttpDao | null;\n  dataSource: ExampleDataSource | null;\n\n   paginator: MdPaginator;\n   sort: MdSort;\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this.exampleDatabase = new ExampleHttpDao(this.http);\n    this.dataSource = new ExampleDataSource( /** @type {?} */((\n      this.exampleDatabase)), this.paginator, this.sort);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-http-example',\n  styleUrls: ['table-http-example.css'],\n  templateUrl: 'table-http-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'paginator': [{ type: ViewChild, args: [MdPaginator, ] },],\n'sort': [{ type: ViewChild, args: [MdSort, ] },],\n};\n}\n\nfunction TableHttpExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableHttpExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableHttpExample.ctorParameters;\n/** @type {?} */\nTableHttpExample.propDecorators;\n/** @type {?} */\nTableHttpExample.prototype.displayedColumns;\n/** @type {?} */\nTableHttpExample.prototype.exampleDatabase;\n/** @type {?} */\nTableHttpExample.prototype.dataSource;\n/** @type {?} */\nTableHttpExample.prototype.paginator;\n/** @type {?} */\nTableHttpExample.prototype.sort;\n/** @type {?} */\nTableHttpExample.prototype.http;\n}\n\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleHttpDao {\n/**\n * @param {?} http\n */\nconstructor(private http: Http) {}\n/**\n * @param {?} sort\n * @param {?} order\n * @param {?} page\n * @return {?}\n */\ngetRepoIssues(sort: string, order: string, page: number): Observable<GithubApi> {\n    const /** @type {?} */ href = 'https://api.github.com/search/issues';\n    const /** @type {?} */ requestUrl =\n      `${href}?q=repo:angular/material2&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    return this.http.get(requestUrl)\n                    .map(response => /** @type {?} */(( response.json() as GithubApi)));\n  }\n}\n\nfunction ExampleHttpDao_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleHttpDao.prototype.http;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleHttpDao. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<GithubIssue> {\n  // The number of issues returned by github matching the query.\n  resultsLength = 0;\n  isLoadingResults = false;\n  isRateLimitReached = false;\n/**\n * @param {?} exampleDatabase\n * @param {?} paginator\n * @param {?} sort\n */\nconstructor(private exampleDatabase: ExampleHttpDao,\nprivate paginator: MdPaginator,\nprivate sort: MdSort) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<GithubIssue[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this.sort.sortChange,\n      this.paginator.page\n    ];\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    return Observable.merge(...displayDataChanges)\n      .startWith(null)\n      .switchMap(() => {\n        this.isLoadingResults = true;\n        return this.exampleDatabase.getRepoIssues(\n          this.sort.active, this.sort.direction, this.paginator.pageIndex);\n      })\n      .map(data => {\n        // Flip flag to show that loading has finished.\n        this.isLoadingResults = false;\n        this.isRateLimitReached = false;\n        this.resultsLength = data.total_count;\n\n        return data.items;\n      })\n      .catch(() => {\n        this.isLoadingResults = false;\n        // Catch if the GitHub API has reached its rate limit. Return empty data.\n        this.isRateLimitReached = true;\n        return Observable.of([]);\n      });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype.resultsLength;\n/** @type {?} */\nExampleDataSource.prototype.isLoadingResults;\n/** @type {?} */\nExampleDataSource.prototype.isRateLimitReached;\n/** @type {?} */\nExampleDataSource.prototype.exampleDatabase;\n/** @type {?} */\nExampleDataSource.prototype.paginator;\n/** @type {?} */\nExampleDataSource.prototype.sort;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ElementRef, ViewChild} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/observable/fromEvent';\n/**\n * \\@title Table with filtering\n */\nexport class TableFilteringExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n\n   filter: ElementRef;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n    Observable.fromEvent(this.filter.nativeElement, 'keyup')\n        .debounceTime(150)\n        .distinctUntilChanged()\n        .subscribe(() => {\n          if (!this.dataSource) { return; }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-filtering-example',\n  styleUrls: ['table-filtering-example.css'],\n  templateUrl: 'table-filtering-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'filter': [{ type: ViewChild, args: ['filter', ] },],\n};\n}\n\nfunction TableFilteringExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableFilteringExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableFilteringExample.ctorParameters;\n/** @type {?} */\nTableFilteringExample.propDecorators;\n/** @type {?} */\nTableFilteringExample.prototype.displayedColumns;\n/** @type {?} */\nTableFilteringExample.prototype.exampleDatabase;\n/** @type {?} */\nTableFilteringExample.prototype.dataSource;\n/** @type {?} */\nTableFilteringExample.prototype.filter;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n  _filterChange = new BehaviorSubject('');\n/**\n * @return {?}\n */\nget filter(): string { return this._filterChange.value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset filter(filter: string) { this._filterChange.next(filter); }\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    const /** @type {?} */ displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._filterChange,\n    ];\n\n    return Observable.merge(...displayDataChanges).map(() => {\n      return this._exampleDatabase.data.slice().filter((item: UserData) => {\n        let /** @type {?} */ searchStr = (item.name + item.color).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      });\n    });\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._filterChange;\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n/**\n * \\@title Basic table\n */\nexport class TableBasicExample {\n  displayedColumns = ['position', 'name', 'weight', 'symbol'];\n  dataSource = new ExampleDataSource();\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'table-basic-example',\n  styleUrls: ['table-basic-example.css'],\n  templateUrl: 'table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTableBasicExample.ctorParameters;\n/** @type {?} */\nTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nTableBasicExample.prototype.dataSource;\n}\n\n\nexport interface Element {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst /** @type {?} */ data: Element[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n  {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n  {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n  {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n  {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n  {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n  {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n  {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n  {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n  {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n  {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\n  {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\n  {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\n  {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\n  {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\n  {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\n  {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\n  {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\n  {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\n  {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\n];\n/**\n * Data source to provide what data should be rendered in the table. The observable provided\n * in connect should emit exactly the data that should be rendered by the table. If the data is\n * altered, the observable should emit that new set of data on the stream. In our case here,\n * we return a stream that contains only one set of data that doesn't change.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<Element[]> {\n    return Observable.of(data);\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n/**\n * \\@title Stepper overview\n */\nexport class StepperOverviewExample {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n/**\n * @param {?} _formBuilder\n */\nconstructor(private _formBuilder: FormBuilder) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'stepper-overview-example',\n  templateUrl: 'stepper-overview-example.html',\n  styleUrls: ['stepper-overview-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\nfunction StepperOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nStepperOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStepperOverviewExample.ctorParameters;\n/** @type {?} */\nStepperOverviewExample.prototype.isLinear;\n/** @type {?} */\nStepperOverviewExample.prototype.firstFormGroup;\n/** @type {?} */\nStepperOverviewExample.prototype.secondFormGroup;\n/** @type {?} */\nStepperOverviewExample.prototype._formBuilder;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {Sort} from '@angular/material';\n/**\n * \\@title Sorting overview\n */\nexport class SortOverviewExample {\n  desserts = [\n    {name: 'Frozen yogurt', calories: '159', fat: '6', carbs: '24', protein: '4'},\n    {name: 'Ice cream sandwich', calories: '237', fat: '9', carbs: '37', protein: '4'},\n    {name: 'Eclair', calories: '262', fat: '16', carbs: '24', protein: '6'},\n    {name: 'Cupcake', calories: '305', fat: '4', carbs: '67', protein: '4'},\n    {name: 'Gingerbread', calories: '356', fat: '16', carbs: '49', protein: '4'},\n  ];\n\n  sortedData;\nconstructor() {\n    this.sortedData = this.desserts.slice();\n  }\n/**\n * @param {?} sort\n * @return {?}\n */\nsortData(sort: Sort) {\n    const /** @type {?} */ data = this.desserts.slice();\n    if (!sort.active || sort.direction == '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      let /** @type {?} */ isAsc = sort.direction == 'asc';\n      switch (sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'calories': return compare(+a.calories, +b.calories, isAsc);\n        case 'fat': return compare(+a.fat, +b.fat, isAsc);\n        case 'carbs': return compare(+a.carbs, +b.carbs, isAsc);\n        case 'protein': return compare(+a.protein, +b.protein, isAsc);\n        default: return 0;\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrls: ['sort-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SortOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSortOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSortOverviewExample.ctorParameters;\n/** @type {?} */\nSortOverviewExample.prototype.desserts;\n/** @type {?} */\nSortOverviewExample.prototype.sortedData;\n}\n\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} isAsc\n * @return {?}\n */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Basic snack-bar\n */\nexport class SnackBarOverviewExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @param {?} message\n * @param {?} action\n * @return {?}\n */\nopenSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-overview-example',\n  templateUrl: 'snack-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarOverviewExample.ctorParameters;\n/** @type {?} */\nSnackBarOverviewExample.prototype.snackBar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBar} from '@angular/material';\n/**\n * \\@title Snack-bar with a custom component\n */\nexport class SnackBarComponentExample {\n/**\n * @param {?} snackBar\n */\nconstructor(public snackBar: MdSnackBar) {}\n/**\n * @return {?}\n */\nopenSnackBar() {\n    this.snackBar.openFromComponent(PizzaPartyComponent, {\n      duration: 500,\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example',\n  templateUrl: 'snack-bar-component-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBar, },\n];\n}\n\nfunction SnackBarComponentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSnackBarComponentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSnackBarComponentExample.ctorParameters;\n/** @type {?} */\nSnackBarComponentExample.prototype.snackBar;\n}\n\nexport class PizzaPartyComponent {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'snack-bar-component-example-snack',\n  templateUrl: 'snack-bar-component-example-snack.html',\n  styleUrls: ['snack-bar-component-example-snack.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PizzaPartyComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPizzaPartyComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPizzaPartyComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slider\n */\nexport class SliderOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-overview-example',\n  templateUrl: 'slider-overview-example.html',\n  styleUrls: ['slider-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Configurable slider\n */\nexport class SliderConfigurableExample {\n  autoTicks = false;\n  disabled = false;\n  invert = false;\n  max = 100;\n  min = 0;\n  showTicks = false;\n  step = 1;\n  thumbLabel = false;\n  value = 0;\n  vertical = false;\n/**\n * @return {?}\n */\nget tickInterval(): number | 'auto' {\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset tickInterval(v) {\n    this._tickInterval = Number(v);\n  }\nprivate _tickInterval = 1;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slider-configurable-example',\n  templateUrl: 'slider-configurable-example.html',\n  styleUrls: ['slider-configurable-example.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderConfigurableExample.ctorParameters;\n/** @type {?} */\nSliderConfigurableExample.prototype.autoTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.disabled;\n/** @type {?} */\nSliderConfigurableExample.prototype.invert;\n/** @type {?} */\nSliderConfigurableExample.prototype.max;\n/** @type {?} */\nSliderConfigurableExample.prototype.min;\n/** @type {?} */\nSliderConfigurableExample.prototype.showTicks;\n/** @type {?} */\nSliderConfigurableExample.prototype.step;\n/** @type {?} */\nSliderConfigurableExample.prototype.thumbLabel;\n/** @type {?} */\nSliderConfigurableExample.prototype.value;\n/** @type {?} */\nSliderConfigurableExample.prototype.vertical;\n/** @type {?} */\nSliderConfigurableExample.prototype._tickInterval;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic slide-toggles\n */\nexport class SlideToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-overview-example',\n  templateUrl: 'slide-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n/**\n * \\@title Slide-toggle with forms\n */\nexport class SlideToggleFormsExample {\n  isChecked = true;\n  formGroup: FormGroup;\n/**\n * @param {?} formBuilder\n */\nconstructor(formBuilder: FormBuilder) {\n    this.formGroup = formBuilder.group({\n      enableWifi: '',\n      acceptTerms: ['', Validators.requiredTrue]\n    });\n  }\n/**\n * @param {?} formValue\n * @return {?}\n */\nonFormSubmit(formValue: any) {\n    alert(JSON.stringify(formValue, null, 2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-forms-example',\n  templateUrl: './slide-toggle-forms-example.html',\n  styleUrls: ['./slide-toggle-forms-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n];\n}\n\nfunction SlideToggleFormsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleFormsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleFormsExample.ctorParameters;\n/** @type {?} */\nSlideToggleFormsExample.prototype.isChecked;\n/** @type {?} */\nSlideToggleFormsExample.prototype.formGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable slide-toggle\n */\nexport class SlideToggleConfigurableExample {\n  color = 'accent';\n  checked = false;\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle-configurable-example',\n  templateUrl: 'slide-toggle-configurable-example.html',\n  styleUrls: ['slide-toggle-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlideToggleConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSlideToggleConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlideToggleConfigurableExample.ctorParameters;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.color;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.checked;\n/** @type {?} */\nSlideToggleConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic sidenav\n */\nexport class SidenavOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-overview-example',\n  templateUrl: 'sidenav-overview-example.html',\n  styleUrls: ['sidenav-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\n/**\n * \\@title Sidenav with a FAB\n */\nexport class SidenavFabExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sidenav-fab-example',\n  templateUrl: 'sidenav-fab-example.html',\n  styleUrls: ['sidenav-fab-example.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SidenavFabExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSidenavFabExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSidenavFabExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic select\n */\nexport class SelectOverviewExample {\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-overview-example',\n  templateUrl: 'select-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectOverviewExample.ctorParameters;\n/** @type {?} */\nSelectOverviewExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Select in a form\n */\nexport class SelectFormExample {\n  selectedValue: string;\n\n  foods = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'}\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'select-form-example',\n  templateUrl: 'select-form-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SelectFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectFormExample.ctorParameters;\n/** @type {?} */\nSelectFormExample.prototype.selectedValue;\n/** @type {?} */\nSelectFormExample.prototype.foods;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic radios\n */\nexport class RadioOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-overview-example',\n  templateUrl: 'radio-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Radios with ngModel\n */\nexport class RadioNgModelExample {\n  favoriteSeason: string;\n\n  seasons = [\n    'Winter',\n    'Spring',\n    'Summer',\n    'Autumn',\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'radio-ng-model-example',\n  templateUrl: 'radio-ng-model-example.html',\n  styleUrls: ['radio-ng-model-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioNgModelExample_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioNgModelExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioNgModelExample.ctorParameters;\n/** @type {?} */\nRadioNgModelExample.prototype.favoriteSeason;\n/** @type {?} */\nRadioNgModelExample.prototype.seasons;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-spinner\n */\nexport class ProgressSpinnerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-overview-example',\n  templateUrl: 'progress-spinner-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress spinner\n */\nexport class ProgressSpinnerConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-spinner-configurable-example',\n  templateUrl: 'progress-spinner-configurable-example.html',\n  styleUrls: ['progress-spinner-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressSpinnerConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressSpinnerConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressSpinnerConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.color;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressSpinnerConfigurableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic progress-bar\n */\nexport class ProgressBarOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-overview-example',\n  templateUrl: 'progress-bar-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable progress-bar\n */\nexport class ProgressBarConfigurableExample {\n  color = 'primary';\n  mode = 'determinate';\n  value = 50;\n  bufferValue = 75;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'progress-bar-configurable-example',\n  templateUrl: 'progress-bar-configurable-example.html',\n  styleUrls: ['progress-bar-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProgressBarConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarConfigurableExample.ctorParameters;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.color;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.mode;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.value;\n/** @type {?} */\nProgressBarConfigurableExample.prototype.bufferValue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Paginator\n */\nexport class PaginatorOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-overview-example',\n  templateUrl: 'paginator-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {PageEvent} from '@angular/material';\n/**\n * \\@title Configurable paginator\n */\nexport class PaginatorConfigurableExample {\n  // MdPaginator Inputs\n  length = 100;\n  pageSize = 10;\n  pageSizeOptions = [5, 10, 25, 100];\n\n  // MdPaginator Output\n  pageEvent: PageEvent;\n/**\n * @param {?} setPageSizeOptionsInput\n * @return {?}\n */\nsetPageSizeOptions(setPageSizeOptionsInput: string) {\n    this.pageSizeOptions = setPageSizeOptionsInput.split(',').map(str => +str);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'paginator-configurable-example',\n  templateUrl: 'paginator-configurable-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PaginatorConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nPaginatorConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPaginatorConfigurableExample.ctorParameters;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.length;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSize;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageSizeOptions;\n/** @type {?} */\nPaginatorConfigurableExample.prototype.pageEvent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Nested menu\n */\nexport class NestedMenuExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'nested-menu-example',\n  templateUrl: 'nested-menu-example.html',\n  styleUrls: ['nested-menu-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NestedMenuExample_tsickle_Closure_declarations() {\n/** @type {?} */\nNestedMenuExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNestedMenuExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic menu\n */\nexport class MenuOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-overview-example',\n  templateUrl: 'menu-overview-example.html',\n  styleUrls: ['menu-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Menu with icons\n */\nexport class MenuIconsExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'menu-icons-example',\n  templateUrl: 'menu-icons-example.html',\n  styleUrls: ['menu-icons-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuIconsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuIconsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuIconsExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title List with selection\n */\nexport class ListSelectionExample {\n  typesOfShoes = ['Boots', 'Clogs', 'Loafers', 'Moccasins', 'Sneakers'];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-selection-example',\n  styleUrls: ['list-selection-example.css'],\n  templateUrl: 'list-selection-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListSelectionExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListSelectionExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListSelectionExample.ctorParameters;\n/** @type {?} */\nListSelectionExample.prototype.typesOfShoes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title List with sections\n */\nexport class ListSectionsExample {\n  folders = [\n    {\n      name: 'Photos',\n      updated: new Date('1/1/16'),\n    },\n    {\n      name: 'Recipes',\n      updated: new Date('1/17/16'),\n    },\n    {\n      name: 'Work',\n      updated: new Date('1/28/16'),\n    }\n  ];\n  notes = [\n    {\n      name: 'Vacation Itinerary',\n      updated: new Date('2/20/16'),\n    },\n    {\n      name: 'Kitchen Remodel',\n      updated: new Date('1/18/16'),\n    }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-sections-example',\n  styleUrls: ['list-sections-example.css'],\n  templateUrl: 'list-sections-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListSectionsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListSectionsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListSectionsExample.ctorParameters;\n/** @type {?} */\nListSectionsExample.prototype.folders;\n/** @type {?} */\nListSectionsExample.prototype.notes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic list\n */\nexport class ListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'list-overview-example',\n  templateUrl: 'list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Prefixes and Suffixes\n */\nexport class InputPrefixSuffixExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-prefix-suffix-example',\n  templateUrl: 'input-prefix-suffix-example.html',\n  styleUrls: ['input-prefix-suffix-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputPrefixSuffixExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputPrefixSuffixExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputPrefixSuffixExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic Inputs\n */\nexport class InputOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-overview-example',\n  styleUrls: ['input-overview-example.css'],\n  templateUrl: 'input-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input hints\n */\nexport class InputHintExample { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-hint-example',\n  templateUrl: 'input-hint-example.html',\n  styleUrls: ['input-hint-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputHintExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputHintExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputHintExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Inputs in a form\n */\nexport class InputFormExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-form-example',\n  templateUrl: 'input-form-example.html',\n  styleUrls: ['input-form-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputFormExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputFormExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputFormExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\n\nconst /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n/**\n * \\@title Input Errors\n */\nexport class InputErrorsExample {\n\n  emailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(EMAIL_REGEX)]);\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-errors-example',\n  templateUrl: 'input-errors-example.html',\n  styleUrls: ['input-errors-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputErrorsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputErrorsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputErrorsExample.ctorParameters;\n/** @type {?} */\nInputErrorsExample.prototype.emailFormControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Input Clearable\n */\nexport class InputClearableExample {\n  value = 'Clear me';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'input-clearable-example',\n  templateUrl: './input-clearable-example.html',\n  styleUrls: ['./input-clearable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InputClearableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nInputClearableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInputClearableExample.ctorParameters;\n/** @type {?} */\nInputClearableExample.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdIconRegistry} from '@angular/material';\n/**\n * \\@title SVG icons\n */\nexport class IconSvgExample {\n/**\n * @param {?} iconRegistry\n * @param {?} sanitizer\n */\nconstructor(iconRegistry: MdIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n        'thumbs-up',\n        sanitizer.bypassSecurityTrustResourceUrl('assets/img/examples/thumbup-icon.svg'));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-svg-example',\n  templateUrl: 'icon-svg-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdIconRegistry, },\n{type: DomSanitizer, },\n];\n}\n\nfunction IconSvgExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconSvgExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconSvgExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic icons\n */\nexport class IconOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'icon-overview-example',\n  templateUrl: 'icon-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction IconOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nIconOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nIconOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic grid-list\n */\nexport class GridListOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-overview-example',\n  styleUrls: ['grid-list-overview-example.css'],\n  templateUrl: 'grid-list-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Dynamic grid-list\n */\nexport class GridListDynamicExample {\n  tiles = [\n    {text: 'One', cols: 3, rows: 1, color: 'lightblue'},\n    {text: 'Two', cols: 1, rows: 2, color: 'lightgreen'},\n    {text: 'Three', cols: 1, rows: 1, color: 'lightpink'},\n    {text: 'Four', cols: 2, rows: 1, color: '#DDBDF1'},\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'grid-list-dynamic-example',\n  templateUrl: 'grid-list-dynamic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridListDynamicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nGridListDynamicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridListDynamicExample.ctorParameters;\n/** @type {?} */\nGridListDynamicExample.prototype.tiles;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Expansion panel as accordion\n */\nexport class ExpansionStepsExample {\n  step = 0;\n/**\n * @param {?} index\n * @return {?}\n */\nsetStep(index: number) {\n    this.step = index;\n  }\n/**\n * @return {?}\n */\nnextStep() {\n    this.step++;\n  }\n/**\n * @return {?}\n */\nprevStep() {\n    this.step--;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'expansion-steps-example',\n  templateUrl: 'expansion-steps-example.html',\n  styleUrls: ['expansion-steps-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExpansionStepsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionStepsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpansionStepsExample.ctorParameters;\n/** @type {?} */\nExpansionStepsExample.prototype.step;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic expansion panel\n */\nexport class ExpansionOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'expansion-overview-example',\n  templateUrl: 'expansion-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExpansionOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExpansionOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MdDialogRef, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Dialog Overview\n */\nexport class DialogOverviewExample {\n\n  animal: string;\n  name: string;\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog(): void {\n    let /** @type {?} */ dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n      width: '250px',\n      data: { name: this.name, animal: this.animal }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example',\n  templateUrl: 'dialog-overview-example.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExample.ctorParameters;\n/** @type {?} */\nDialogOverviewExample.prototype.animal;\n/** @type {?} */\nDialogOverviewExample.prototype.name;\n/** @type {?} */\nDialogOverviewExample.prototype.dialog;\n}\n\nexport class DialogOverviewExampleDialog {\n/**\n * @param {?} dialogRef\n * @param {?} data\n */\nconstructor(\npublic dialogRef: MdDialogRef<DialogOverviewExampleDialog>,\npublic data: any) { }\n/**\n * @return {?}\n */\nonNoClick(): void {\n    this.dialogRef.close();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: 'dialog-overview-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogOverviewExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogOverviewExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogOverviewExampleDialog.ctorParameters;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.dialogRef;\n/** @type {?} */\nDialogOverviewExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog elements\n */\nexport class DialogElementsExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) { }\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogElementsExampleDialog);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example',\n  templateUrl: 'dialog-elements-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogElementsExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExample.ctorParameters;\n/** @type {?} */\nDialogElementsExample.prototype.dialog;\n}\n\nexport class DialogElementsExampleDialog { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-elements-example-dialog',\n  templateUrl: 'dialog-elements-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogElementsExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogElementsExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogElementsExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, Inject} from '@angular/core';\nimport {MdDialog, MD_DIALOG_DATA} from '@angular/material';\n/**\n * \\@title Injecting data when opening a dialog\n */\nexport class DialogDataExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    this.dialog.open(DialogDataExampleDialog, {\n      data: {\n        animal: 'panda'\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example',\n  templateUrl: 'dialog-data-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogDataExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExample.ctorParameters;\n/** @type {?} */\nDialogDataExample.prototype.dialog;\n}\n\nexport class DialogDataExampleDialog {\n/**\n * @param {?} data\n */\nconstructor(\npublic data: any) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-data-example-dialog',\n  templateUrl: 'dialog-data-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction DialogDataExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogDataExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogDataExampleDialog.ctorParameters;\n/** @type {?} */\nDialogDataExampleDialog.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdDialog} from '@angular/material';\n/**\n * \\@title Dialog with header, scrollable content and actions\n */\nexport class DialogContentExample {\n/**\n * @param {?} dialog\n */\nconstructor(public dialog: MdDialog) {}\n/**\n * @return {?}\n */\nopenDialog() {\n    const /** @type {?} */ dialogRef = this.dialog.open(DialogContentExampleDialog, {\n      height: '350px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(`Dialog result: ${result}`);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example',\n  templateUrl: 'dialog-content-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\n}\n\nfunction DialogContentExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExample.ctorParameters;\n/** @type {?} */\nDialogContentExample.prototype.dialog;\n}\n\nexport class DialogContentExampleDialog {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'dialog-content-example-dialog',\n  templateUrl: 'dialog-content-example-dialog.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogContentExampleDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogContentExampleDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogContentExampleDialog.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Touch\n */\nexport class DatepickerTouchExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-touch-example',\n  templateUrl: 'datepicker-touch-example.html',\n  styleUrls: ['datepicker-touch-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerTouchExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerTouchExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerTouchExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker start date\n */\nexport class DatepickerStartViewExample {\n  startDate = new Date(1990, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-start-view-example',\n  templateUrl: 'datepicker-start-view-example.html',\n  styleUrls: ['datepicker-start-view-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerStartViewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerStartViewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerStartViewExample.ctorParameters;\n/** @type {?} */\nDatepickerStartViewExample.prototype.startDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic datepicker\n */\nexport class DatepickerOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-overview-example',\n  templateUrl: 'datepicker-overview-example.html',\n  styleUrls: ['datepicker-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Min Max\n */\nexport class DatepickerMinMaxExample {\n  minDate = new Date(2000, 0, 1);\n  maxDate = new Date(2020, 0, 1);\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-min-max-example',\n  templateUrl: 'datepicker-min-max-example.html',\n  styleUrls: ['datepicker-min-max-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerMinMaxExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerMinMaxExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerMinMaxExample.ctorParameters;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.minDate;\n/** @type {?} */\nDatepickerMinMaxExample.prototype.maxDate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker Filter\n */\nexport class DatepickerFilterExample {\n  myFilter = (d: Date): boolean => {\n    const /** @type {?} */ day = d.getDay();\n    // Prevent Saturday and Sunday from being selected.\n    return day !== 0 && day !== 6;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-filter-example',\n  templateUrl: 'datepicker-filter-example.html',\n  styleUrls: ['datepicker-filter-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerFilterExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerFilterExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerFilterExample.ctorParameters;\n/** @type {?} */\nDatepickerFilterExample.prototype.myFilter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Datepicker API\n */\nexport class DatepickerApiExample {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'datepicker-api-example',\n  templateUrl: 'datepicker-api-example.html',\n  styleUrls: ['datepicker-api-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DatepickerApiExample_tsickle_Closure_declarations() {\n/** @type {?} */\nDatepickerApiExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatepickerApiExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Stacked chips\n */\nexport class ChipsStackedExample {\n  color: string;\n\n  availableColors = [\n    { name: 'none', color: '' },\n    { name: 'Primary', color: 'primary' },\n    { name: 'Accent', color: 'accent' },\n    { name: 'Warn', color: 'warn' }\n  ];\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-stacked-example',\n  templateUrl: 'chips-stacked-example.html',\n  styleUrls: ['chips-stacked-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsStackedExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsStackedExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsStackedExample.ctorParameters;\n/** @type {?} */\nChipsStackedExample.prototype.color;\n/** @type {?} */\nChipsStackedExample.prototype.availableColors;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic chips\n */\nexport class ChipsOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-overview-example',\n  templateUrl: 'chips-overview-example.html',\n  styleUrls: ['chips-overview-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdChipInputEvent, ENTER} from '@angular/material';\n\nconst /** @type {?} */ COMMA = 188;\n/**\n * \\@title Chips with input\n */\nexport class ChipsInputExample {\n  visible: boolean = true;\n  selectable: boolean = true;\n  removable: boolean = true;\n  addOnBlur: boolean = true;\n\n  // Enter, comma\n  separatorKeysCodes = [ENTER, COMMA];\n\n  fruits = [\n    { name: 'Lemon' },\n    { name: 'Lime' },\n    { name: 'Apple' },\n  ];\n/**\n * @param {?} event\n * @return {?}\n */\nadd(event: MdChipInputEvent): void {\n    let /** @type {?} */ input = event.input;\n    let /** @type {?} */ value = event.value;\n\n    // Add our person\n    if ((value || '').trim()) {\n      this.fruits.push({ name: value.trim() });\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n  }\n/**\n * @param {?} fruit\n * @return {?}\n */\nremove(fruit: any): void {\n    let /** @type {?} */ index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'chips-input-example',\n  templateUrl: 'chips-input-example.html',\n  styleUrls: ['chips-input-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsInputExample_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsInputExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsInputExample.ctorParameters;\n/** @type {?} */\nChipsInputExample.prototype.visible;\n/** @type {?} */\nChipsInputExample.prototype.selectable;\n/** @type {?} */\nChipsInputExample.prototype.removable;\n/** @type {?} */\nChipsInputExample.prototype.addOnBlur;\n/** @type {?} */\nChipsInputExample.prototype.separatorKeysCodes;\n/** @type {?} */\nChipsInputExample.prototype.fruits;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic checkboxes\n */\nexport class CheckboxOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-overview-example',\n  templateUrl: 'checkbox-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Configurable checkbox\n */\nexport class CheckboxConfigurableExample {\n  checked = false;\n  indeterminate = false;\n  align = 'start';\n  disabled = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'checkbox-configurable-example',\n  templateUrl: 'checkbox-configurable-example.html',\n  styleUrls: ['checkbox-configurable-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxConfigurableExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxConfigurableExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxConfigurableExample.ctorParameters;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.checked;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.indeterminate;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.align;\n/** @type {?} */\nCheckboxConfigurableExample.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Basic CDK data-table\n */\nexport class CdkTableBasicExample {\n  displayedColumns = ['userId', 'userName', 'progress', 'color'];\n  exampleDatabase = new ExampleDatabase();\n  dataSource: ExampleDataSource | null;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dataSource = new ExampleDataSource(this.exampleDatabase);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table-basic-example',\n  styleUrls: ['cdk-table-basic-example.css'],\n  templateUrl: 'cdk-table-basic-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableBasicExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableBasicExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableBasicExample.ctorParameters;\n/** @type {?} */\nCdkTableBasicExample.prototype.displayedColumns;\n/** @type {?} */\nCdkTableBasicExample.prototype.exampleDatabase;\n/** @type {?} */\nCdkTableBasicExample.prototype.dataSource;\n}\n\n/**\n * Constants used to fill up our data base.\n */\nconst COLORS = ['maroon', 'red', 'orange', 'yellow', 'olive', 'green', 'purple',\n  'fuchsia', 'lime', 'teal', 'aqua', 'blue', 'navy', 'black', 'gray'];\nconst /** @type {?} */ NAMES = ['Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack',\n  'Charlotte', 'Theodore', 'Isla', 'Oliver', 'Isabella', 'Jasper',\n  'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'];\n\nexport interface UserData {\n  id: string;\n  name: string;\n  progress: string;\n  color: string;\n}\n/**\n * An example database that the data source uses to retrieve data for the table.\n */\nexport class ExampleDatabase {\n/**\n * Stream that emits whenever the data has been modified.\n */\ndataChange: BehaviorSubject<UserData[]> = new BehaviorSubject<UserData[]>([]);\n/**\n * @return {?}\n */\nget data(): UserData[] { return this.dataChange.value; }\nconstructor() {\n    // Fill up the database with 100 users.\n    for (let i = 0; i < 100; i++) { this.addUser(); }\n  }\n/**\n * Adds a new user to the database.\n * @return {?}\n */\naddUser() {\n    const /** @type {?} */ copiedData = this.data.slice();\n    copiedData.push(this.createNewUser());\n    this.dataChange.next(copiedData);\n  }\n/**\n * Builds and returns a new User.\n * @return {?}\n */\nprivate createNewUser() {\n    const /** @type {?} */ name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) + '.';\n\n    return {\n      id: (this.data.length + 1).toString(),\n      name: name,\n      progress: Math.round(Math.random() * 100).toString(),\n      color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n  }\n}\n\nfunction ExampleDatabase_tsickle_Closure_declarations() {\n/**\n * Stream that emits whenever the data has been modified.\n * @type {?}\n */\nExampleDatabase.prototype.dataChange;\n}\n\n/**\n * Data source to provide what data should be rendered in the table. Note that the data source\n * can retrieve its data in any way. In this case, the data source is provided a reference\n * to a common data base, ExampleDatabase. It is not the data source's responsibility to manage\n * the underlying data. Instead, it only needs to take the data and send the table exactly what\n * should be rendered.\n */\nexport class ExampleDataSource extends DataSource<any> {\n/**\n * @param {?} _exampleDatabase\n */\nconstructor(private _exampleDatabase: ExampleDatabase) {\n    super();\n  }\n/**\n * Connect function called by the table to retrieve one stream containing the data to render.\n * @return {?}\n */\nconnect(): Observable<UserData[]> {\n    return this._exampleDatabase.dataChange;\n  }\n/**\n * @return {?}\n */\ndisconnect() {}\n}\n\nfunction ExampleDataSource_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleDataSource.prototype._exampleDatabase;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic cards\n */\nexport class CardOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-overview-example',\n  templateUrl: 'card-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Card with multiple sections\n */\nexport class CardFancyExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'card-fancy-example',\n  templateUrl: 'card-fancy-example.html',\n  styleUrls: ['card-fancy-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CardFancyExample_tsickle_Closure_declarations() {\n/** @type {?} */\nCardFancyExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCardFancyExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Button varieties\n */\nexport class ButtonTypesExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-types-example',\n  templateUrl: 'button-types-example.html',\n  styleUrls: ['button-types-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonTypesExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonTypesExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonTypesExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic button-toggles\n */\nexport class ButtonToggleOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-overview-example',\n  templateUrl: 'button-toggle-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Exclusive selection\n */\nexport class ButtonToggleExclusiveExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-toggle-exclusive-example',\n  templateUrl: 'button-toggle-exclusive-example.html',\n  styleUrls: ['button-toggle-exclusive-example.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonToggleExclusiveExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonToggleExclusiveExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonToggleExclusiveExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\n/**\n * \\@title Basic buttons\n */\nexport class ButtonOverviewExample {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button-overview-example',\n  templateUrl: 'button-overview-example.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonOverviewExample.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n/**\n * \\@title Simple autocomplete\n */\nexport class AutocompleteSimpleExample {\n\n  myControl: FormControl = new FormControl();\n\n  options = [\n    'One',\n    'Two',\n    'Three'\n   ];\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-simple-example',\n  templateUrl: 'autocomplete-simple-example.html',\n  styleUrls: ['autocomplete-simple-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteSimpleExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteSimpleExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteSimpleExample.ctorParameters;\n/** @type {?} */\nAutocompleteSimpleExample.prototype.myControl;\n/** @type {?} */\nAutocompleteSimpleExample.prototype.options;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Autocomplete overview\n */\nexport class AutocompleteOverviewExample {\n  stateCtrl: FormControl;\n  filteredStates: Observable<any[]>;\n\n  states: any[] = [\n    {\n      name: 'Arkansas',\n      population: '2.978M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Arkansas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/9/9d/Flag_of_Arkansas.svg'\n    },\n    {\n      name: 'California',\n      population: '39.14M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_California.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/0/01/Flag_of_California.svg'\n    },\n    {\n      name: 'Florida',\n      population: '20.27M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Florida.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Florida.svg'\n    },\n    {\n      name: 'Texas',\n      population: '27.47M',\n      // https://commons.wikimedia.org/wiki/File:Flag_of_Texas.svg\n      flag: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Flag_of_Texas.svg'\n    }\n  ];\nconstructor() {\n    this.stateCtrl = new FormControl();\n    this.filteredStates = this.stateCtrl.valueChanges\n        .startWith(null)\n        .map(state => state ? this.filterStates(state) : this.states.slice());\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nfilterStates(name: string) {\n    return this.states.filter(state =>\n      state.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-overview-example',\n  templateUrl: 'autocomplete-overview-example.html',\n  styleUrls: ['autocomplete-overview-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteOverviewExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteOverviewExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteOverviewExample.ctorParameters;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.stateCtrl;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.filteredStates;\n/** @type {?} */\nAutocompleteOverviewExample.prototype.states;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\n/**\n * \\@title Filter autocomplete\n */\nexport class AutocompleteFilterExample {\n\n  myControl: FormControl = new FormControl();\n\n  options = [\n    'One',\n    'Two',\n    'Three'\n  ];\n\n  filteredOptions: Observable<string[]>;\n/**\n * @return {?}\n */\nngOnInit() {\n      this.filteredOptions = this.myControl.valueChanges\n         .startWith(null)\n         .map(val => val ? this.filter(val) : this.options.slice());\n   }\n/**\n * @param {?} val\n * @return {?}\n */\nfilter(val: string): string[] {\n      return this.options.filter(option =>\n        option.toLowerCase().indexOf(val.toLowerCase()) === 0);\n   }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-filter-example',\n  templateUrl: 'autocomplete-filter-example.html',\n  styleUrls: ['autocomplete-filter-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteFilterExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteFilterExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteFilterExample.ctorParameters;\n/** @type {?} */\nAutocompleteFilterExample.prototype.myControl;\n/** @type {?} */\nAutocompleteFilterExample.prototype.options;\n/** @type {?} */\nAutocompleteFilterExample.prototype.filteredOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/map';\nexport class User {\n/**\n * @param {?} name\n */\nconstructor(public name: string) { }\n}\n\nfunction User_tsickle_Closure_declarations() {\n/** @type {?} */\nUser.prototype.name;\n}\n\n/**\n * \\@title Display value autocomplete\n */\nexport class AutocompleteDisplayExample {\n\n  myControl = new FormControl();\n\n  options = [\n    new User('Mary'),\n    new User('Shelley'),\n    new User('Igor')\n  ];\n\n  filteredOptions: Observable<User[]>;\n/**\n * @return {?}\n */\nngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges\n        .startWith(null)\n        .map(user => user && typeof user === 'object' ? user.name : user)\n        .map(name => name ? this.filter(name) : this.options.slice());\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nfilter(name: string): User[] {\n    return this.options.filter(option =>\n      option.name.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n/**\n * @param {?} user\n * @return {?}\n */\ndisplayFn(user: User): string {\n    return user ? user.name : user;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-display-example',\n  templateUrl: 'autocomplete-display-example.html',\n  styleUrls: ['autocomplete-display-example.css']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AutocompleteDisplayExample_tsickle_Closure_declarations() {\n/** @type {?} */\nAutocompleteDisplayExample.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAutocompleteDisplayExample.ctorParameters;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.myControl;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.options;\n/** @type {?} */\nAutocompleteDisplayExample.prototype.filteredOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\n\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MdAutocompleteModule, MdButtonModule, MdButtonToggleModule, MdPaginatorModule,\n  MdCardModule, MdCheckboxModule, MdChipsModule, MdDatepickerModule,\n  MdDialogModule, MdGridListModule, MdIconModule, MdInputModule,\n  MdListModule, MdMenuModule, MdProgressBarModule, MdProgressSpinnerModule,\n  MdRadioModule, MdSelectModule, MdSidenavModule, MdSliderModule, MdSortModule,\n  MdSlideToggleModule, MdSnackBarModule, MdTableModule, MdTabsModule, MdToolbarModule,\n  MdTooltipModule, MdFormFieldModule, MdExpansionModule, MdStepperModule\n} from '@angular/material';\nexport class ExampleMaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [\n    CdkTableModule,\n    MdAutocompleteModule,\n    MdButtonModule,\n    MdButtonToggleModule,\n    MdCardModule,\n    MdCheckboxModule,\n    MdChipsModule,\n    MdDatepickerModule,\n    MdDialogModule,\n    MdExpansionModule,\n    MdFormFieldModule,\n    MdGridListModule,\n    MdIconModule,\n    MdInputModule,\n    MdListModule,\n    MdMenuModule,\n    MdProgressBarModule,\n    MdProgressSpinnerModule,\n    MdRadioModule,\n    MdSelectModule,\n    MdSlideToggleModule,\n    MdSliderModule,\n    MdSidenavModule,\n    MdSnackBarModule,\n    MdStepperModule,\n    MdTabsModule,\n    MdToolbarModule,\n    MdTooltipModule,\n    MdPaginatorModule,\n    MdSortModule,\n    MdTableModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ExampleMaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nExampleMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nExampleMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["Component","DataSource","Observable","tslib_1.__extends","BehaviorSubject","ViewChild","MdSort","NAMES","MdPaginator","ExampleDatabase","SelectionModel","Http","ExampleDataSource","FormBuilder","Validators","MdSnackBar","ViewEncapsulation","DomSanitizer","Inject","MD_DIALOG_DATA","MdDialog","ENTER","FormControl","MdTableModule","MdSortModule","MdPaginatorModule","MdTooltipModule","MdToolbarModule","MdTabsModule","MdStepperModule","MdSnackBarModule","MdSidenavModule","MdSliderModule","MdSlideToggleModule","MdSelectModule","MdRadioModule","MdProgressSpinnerModule","MdProgressBarModule","MdMenuModule","MdListModule","MdInputModule","MdIconModule","MdGridListModule","MdFormFieldModule","MdExpansionModule","MdDialogModule","MdDatepickerModule","MdChipsModule","MdCheckboxModule","MdCardModule","MdButtonToggleModule","MdButtonModule","MdAutocompleteModule","CdkTableModule","NgModule"],"mappings":"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"}