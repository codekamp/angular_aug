{"version":3,"file":"material-menu.umd.min.js","sources":["../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/menu/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/core/style/index.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/menu/menu-item.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '@angular/cdk/bidi';\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MdMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MdMenuItem>(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return RxChain.from(this.items.changes)\n      .call(startWith, this.items)\n      .call(switchMap, (items: MdMenuItem[]) => merge(...items.map(item => item.hover)))\n      .result();\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu, matMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, RxChain} from '@angular/cdk/rxjs';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdMenu} from './menu-directive';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _hoverSubscription = Subscription.EMPTY;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this.menu.close.emit();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\n * mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayConfig\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY})\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n        .call(filter, active => active !== this._menuItemInstance)\n        .call(filter, () => this._menuOpen)\n        .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'mdMenuTrigger, matMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MdRippleModule} from '@angular/material/core';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n  providers: [\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MD_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_MENU_SCROLL_STRATEGY,fadeInItems,transformMenu,MdMenuModule,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MAT_MENU_DEFAULT_OPTIONS,MatMenu,MatMenuDefaultOptions,MatMenuItem,MatMenuModule,MatMenuPanel,MatMenuTrigger} from './public_api';\n\nexport {MdMenuItemBase as ɵa,_MdMenuItemMixinBase as ɵb} from './menu-item';\nexport {MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵd,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵc} from './menu-trigger';","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple, matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  QueryList,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\n    optionGroups: QueryList<MdOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdPseudoCheckboxModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n/**\n * @deprecated\n */\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [A11yModule],\n  exports: [A11yModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\nexport {\n  CdkMonitorFocus,\n  FocusMonitor,\n  FOCUS_MONITOR_PROVIDER,\n  FocusOrigin,\n} from '@angular/cdk/a11y';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, MATERIAL_COMPATIBILITY_MODE, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem, matMenuItem',\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["opacity","transition","style","animate","MD_MENU_DEFAULT_OPTIONS","InjectionToken","this","_xPosition","_defaultOptions","xPosition","_yPosition","yPosition","throwMdMenuInvalidPositionX","value","setPositionClasses","enumerable","configurable","set","throwMdMenuInvalidPositionY","classes","length","_classList","split","reduce","obj","className","MdMenu","prototype","ngAfterContentInit","_this","_keyManager","FocusKeyManager","items","withWrap","ngOnDestroy","_tabSubscription","unsubscribe","close","emit","complete","RxChain","from","changes","call","startWith","switchMap","merge","apply","map","item","hover","result","_handleKeydown","event","keyCode","ESCAPE","stopPropagation","LEFT_ARROW","parentMenu","direction","onKeydown","focusFirstItem","setFirstItemActive","posX","posY","customElevation","_previousElevation","_resetAnimation","_panelAnimationState","_onAnimationDone","toState","decorators","encapsulation","ViewEncapsulation","None","preserveWhitespaces","animations","transformMenu","fadeInItems","exportAs","type","ElementRef","propDecorators","classList","Input","args","Output","MD_MENU_SCROLL_STRATEGY","provide","MdMenuTrigger","_overlay","_element","_viewContainerRef","_scrollStrategy","_parentMenu","_menuItemInstance","_dir","_menuOpen","_closeSubscription","Subscription","EMPTY","_positionSubscription","_hoverSubscription","_openedByMouse","Object","defineProperty","menu","v","get","ngAfterViewInit","_checkMenu","subscribe","reason","closeMenu","triggersSubmenu","openMenu","_overlayRef","dispose","_menuClosingActions","_initMenu","_startAnimation","focus","dir","_setMenuElevation","_setIsMenuOpen","setElevation","depth","isOpen","onMenuOpen","onMenuClose","_highlighted","_createOverlay","_getOverlayConfig","hasBackdrop","backdropClass","_subscribeToPositions","position","onPositionChange","change","connectionPair","overlayX","overlayY","_getPosition","offsetY","overlayFallbackX","originX","originFallbackX","connectedTo","originY","withDirection","withFallbackPosition","originFallbackY","overlayFallbackY","of","backdrop","parentClose","_handleMousedown","isFakeMousedownFromScreenReader","preventDefault","LEFT_ARROW$1","_handleClick","toggleMenu","Directive","selector","host","aria-haspopup","(mousedown)","(keydown)","(click)","ctorParameters","Overlay","ViewContainerRef","undefined","Inject","Optional","MdMenuItem","Self","_deprecatedMdMenuTriggerFor","_matMenuTriggerFor","__extends","d","b","__","constructor","extendStatics","create","nodeName","toLowerCase","mixinDisabled","base","_super","_i","arguments","_disabled","coerceBooleanProperty","class_1","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","UniqueSelectionDispatcher","dest","range","valueFunction","valuesArray","Array","i","window","getComputedStyle","element","getPropertyValue","distanceToFurthestCorner","x","y","rect","distX","Math","max","abs","left","right","distY","top","bottom","sqrt","throwMdMenuMissingError","Error","setPrototypeOf","__proto__","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","_a","_listeners","listen","listener","push","filter","registered","Injectable","MAT_DATE_LOCALE_PROVIDER","MAT_DATE_LOCALE","useExisting","LOCALE_ID","DateAdapter","getMonth","date","getDayOfWeek","getDayOfWeekNames","getNumDaysInMonth","format","displayFormat","compareDate","long","DEFAULT_DAY_OF_WEEK_NAMES","useUtcForDisplay","setLocale","matDateLocale","tslib_1.__extends","NativeDateAdapter","getYear","getDate","getDay","DEFAULT_MONTH_NAMES","getDateNames","_stripDirectionalityCharacters","dtf","String","clone","createDate","year","month","today","Date","parse","isValid","Intl","DateTimeFormat","locale","toDateString","addCalendarYears","years","addCalendarMonths","_createDateWithOverflow","days","_2digit","getUTCMonth","fromIso8601","iso8601String","ISO_8601_REGEX","test","isNaN","getTime","setFullYear","display","dateInput","day","NativeDateModule","MdNativeDateModule","providers","MD_DATE_FORMATS","useValue","MD_NATIVE_DATE_FORMATS","GestureConfig","_hammer","isDevMode","console","warn","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","time","recognizeWith","add","options","inheritances","recognizer","HammerGestureConfig","MdLine","MdLineModule","NgModule","exports","MdCommonModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","_renderer","config","state","fadeOutRipple","RippleRef","RippleRenderer","elementRef","_ngZone","_ruler","platform","_triggerEvents","Map","rippleDisabled","isBrowser","_containerElement","nativeElement","onMousedown","bind","setTriggerElement","containerRect","getBoundingClientRect","centered","scrollPosition","getViewportScrollPosition","pageX","offsetX","ripple","radius","_activeRipples","rippleRef","persistent","_isMousedown","rippleEl","runTimeoutOutsideZone","removeChild","_triggerElement","runOutsideAngular","forEach","fn","addEventListener","fadeOut","delay","MD_RIPPLE_GLOBAL_OPTIONS","MdRipple","ngZone","ruler","globalOptions","_rippleRenderer","_globalOptions","_updateRippleRenderer","trigger","disabled","speedFactor","color","fadeInRipple","pageY","NgZone","ViewportRuler","Platform","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","MdRippleModule","imports","PlatformModule","ScrollDispatchModule","declarations","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","Component","changeDetection","ChangeDetectionStrategy","OnPush","styles","template","[class.mat-pseudo-checkbox-checked]","MdPseudoCheckboxModule","MdOptgroupBase","_MdOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","MdOptgroup","class","[class.mat-optgroup-disabled]","label","_uniqueIdCounter","MdOptionSelectionChange","source","isUserInput","MdOption","_changeDetectorRef","group","_multiple","onSelectionChange","EventEmitter","markForCheck","_selected","_emitSelectionChangeEvent","_getHostElement","_active","viewValue","ENTER","SPACE","_selectViaInteraction","multiple","countGroupLabelsBeforeOption","optionIndex","optionGroups","optionsArray","toArray","groups","groupCounter","role","[attr.tabindex]","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[id]","[attr.aria-selected]","[attr.aria-disabled]","[class.mat-option-disabled]","viewProviders","MATERIAL_COMPATIBILITY_MODE","ChangeDetectorRef","MdOptionModule","CommonModule","StyleModule","A11yModule","MdMenuItemBase","next","_MdMenuItemMixinBase","inputs","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","(mouseenter)","transform"],"mappings":"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"}