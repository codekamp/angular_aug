{"version":3,"file":"sidenav.js","sources":["../../../src/lib/sidenav/index.ts","../../../src/lib/sidenav/sidenav-module.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/drawer.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawer,MdDrawerContainer,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nexport class MdSidenav extends MdDrawer {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\n   _drawers;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ESCAPE, first, startWith, takeUntil} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-drawer> component.\n * \n * This component corresponds to a drawer that can be opened on the drawer container.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeDrawerWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    this._enableAnimations = true;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this drawer.\n * @param {?=} isOpen Whether the drawer should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n      }\n\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\n    }\n\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n    // the end if animations are disabled. Make this call async to ensure that it still fires\n    // at the appropriate time.\n    Promise.resolve().then(() => {\n      this._isAnimating = false;\n      this._currentTogglePromise = null;\n    });\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer, mat-drawer',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdDrawer.prototype.mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\n * \n * This is the parent component to one or two <md-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\n   _drawers: QueryList<MdDrawer>;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * Inline styles to be applied to the container.\n */\n_styles: { marginLeft: string; marginRight: string; transform: string; };\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._drawers.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach((drawer: MdDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\n * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\n      this._updateStyles();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\n * changes.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n    }\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n/**\n * Return the width of the drawer, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} drawer\n * @param {?} mode\n * @return {?}\n */\nprivate _getDrawerEffectiveWidth(drawer: MdDrawer, mode: string): number {\n    return (this._isDrawerOpen(drawer) && drawer.mode == mode) ? drawer._width : 0;\n  }\n/**\n * Recalculates and updates the inline styles. Note that this\n * should be used sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateStyles() {\n    const /** @type {?} */ marginLeft = this._left ? this._getDrawerEffectiveWidth(this._left, 'side') : 0;\n    const /** @type {?} */ marginRight = this._right ? this._getDrawerEffectiveWidth(this._right, 'side') : 0;\n    const /** @type {?} */ leftWidth = this._left ? this._getDrawerEffectiveWidth(this._left, 'push') : 0;\n    const /** @type {?} */ rightWidth = this._right ? this._getDrawerEffectiveWidth(this._right, 'push') : 0;\n\n    this._styles = {\n      marginLeft: `${marginLeft}px`,\n      marginRight: `${marginRight}px`,\n      transform: `translate3d(${leftWidth - rightWidth}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer-container, mat-drawer-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/**\n * Inline styles to be applied to the container.\n * @type {?}\n */\nMdDrawerContainer.prototype._styles;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}