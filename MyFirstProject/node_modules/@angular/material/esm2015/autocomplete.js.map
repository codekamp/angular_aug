{"version":3,"file":"autocomplete.js","sources":["../../../src/lib/autocomplete/index.ts","../../../src/lib/autocomplete/autocomplete-module.ts","../../../src/lib/autocomplete/autocomplete-trigger.ts","../../../src/lib/autocomplete/autocomplete.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdAutocompleteSelectedEvent,MdAutocomplete,MdAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,MatAutocomplete,MatAutocompleteModule,MatAutocompleteTrigger} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdOptionModule, MdCommonModule} from '@angular/material/core';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MdOption, MdOptionSelectionChange} from '@angular/material/core';\nimport {MdFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    this._attachOverlay();\n    this._floatPlaceholder();\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\n    this._attachOverlay();\n    this._floatPlaceholder(true);\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @param {?=} shouldAnimate Whether the placeholder should be animated when it is floated.\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockPlaceholder();\n      } else {\n        this._formField.floatPlaceholder = 'always';\n      }\n\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._panelOpen = true;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdAutocomplete], input[matAutocomplete],\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MdOption, MdOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MdAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MdAutocomplete,\npublic option: MdOption) { }\n}\n\nfunction MdAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MdAutocompleteSelectedEvent> =\n      new EventEmitter<MdAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MdOption): void {\n    const /** @type {?} */ event = new MdAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete, matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMdAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AG0BA;;;;AAIA,IACC,4BAAA,GAAA,CAAA,CAAA;;;;AAGD,AAAA,MAAA,2BAAA,CAAA;;;;;IAKA,WAAA,CAJqB,MAAQ,EAAuB,MAAQ,EAI5D;QAJqB,IAArB,CAAA,MAAqB,GAAA,MAAA,CAAQ;QAAuB,IAApD,CAAA,MAAoD,GAAA,MAAA,CAAQ;KAAS;CAMpE;AAED,AAOA,AAAA,MAAA,cAAA,CAAA;;;;IAyCA,WAAA,CArBsB,kBAAoB,EAqB1C;QArBsB,IAAtB,CAAA,kBAAsB,GAAA,kBAAA,CAAoB;;;;QAZ1C,IAAA,CAAA,SAZG,GAAA,KAAA,CAAA;;;;QAgCH,IAAA,CAAA,WAjBI,GAAA,IAAA,CAAA;;;;QAqBJ,IAAA,CAAA,cAlBI,GAmBE,IAAI,YAAY,EAA+B,CAAC;;;;QAItD,IAAA,CAAA,EAnBG,GAAA,CAmBH,gBAAA,EAnBG,4BAAA,EAAA,CAmBH,CAnBG,CAAA;KAEyD;;;;IAyB5D,kBAvBG,GAuBH;QACI,IAAI,CAvBC,WAAC,GAAa,IAAI,0BAAA,CAAoC,IAAE,CAAI,OAAC,CAAO,CAAC,QAAC,EAAQ,CAAE;KAwBtF;;;;;;;IAOH,aAxBG,CAAA,SAAA,EAwBH;QACI,IAAI,IAxBC,CAAI,KAAC,EAAM;YAyBd,IAAI,CAxBC,KAAC,CAAK,aAAC,CAAa,SAAC,GAAW,SAAA,CAAU;SAyBhD;KACF;;;;;IAKH,aA1BG,GA0BH;QACI,OA1BO,IAAA,CAAK,KAAC,GAAO,IAAA,CAAK,KAAC,CAAK,aAAC,CAAa,SAAC,GAAW,CAAA,CAAE;KA2B5D;;;;;IAKH,cA5BG,GA4BH;QACI,OAAO,CA5BC,OAAC,EAAO,CAAE,IAAC,CAAI,MA4B3B;YACM,IAAI,CA5BC,SAAC,GAAW,CAAA,CAAE,IAAC,CAAI,OAAC,CAAO,MAAC,CAAM;YA6BvC,IAAI,CA5BC,kBAAC,CAAkB,YAAC,EAAY,CAAE;SA6BxC,CA5BC,CAAC;KA6BJ;;;;;;IAMH,gBA/BG,CAAA,MAAA,EA+BH;QACI,uBA/BM,KAAA,GAAQ,IAAI,2BAAA,CAA4B,IAAC,EAAK,MAAA,CAAO,CAAC;QAgC5D,IAAI,CA/BC,cAAC,CAAc,IAAC,CAAI,KAAC,CAAK,CAAC;KAgCjC;;;;;IAKH,aAjCG,GAiCH;QAdE,OAlBS;YAkCL,0BAA0B,EAjCE,IAAA,CAAK,SAAC;YAkClC,yBAAyB,EAjCE,CAAA,IAAE,CAAI,SAAC;SAkCnC,CAjCC;KAkCH;;AA/BI,cAAP,CAAA,UAAO,GAAoC;IAkC3C,EAjCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,CAiCzB,QAAA,EAAA,mCAAA;gBACE,QAAQ,EAjCE,oKAiCZ;gBACE,MAAF,EAAU,CAAV,gdAAA,CAAA;gBACE,aAjCa,EAiCf,iBAjCe,CAiCf,IAAA;gBACE,mBAAF,EAAA,KAAA;gBACE,eAjCe,EAiCjB,uBAAA,CAAA,MAAA;gBACE,QAAF,EAAA,iCAAA;gBACE,IAAF,EAAA;oBACA,OAAA,EAAA,kBAAA;iBACA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAA,iBAAA,GAAA;CAlCA,CAAA;AAoCA,cAAA,CAAA,cAAwB,GAAG;IAC3B,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA;IAlCA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IAoCA,SAAA,EAAA,CAnCY,EAmCZ,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAAA,QAnCmD,EAAG,EAAE,WAmCxD,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA;IACA,cAAA,EAnCY,CAmCZ,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,CAnCiD,UAmCjD,EAAA,EAAA,EAAA;IACA,aAAA,EAAA,CAAA,EAnCc,IAmCd,EAAA,KAAA,EAAA,EAAA;IACA,gBAnCgB,EAmChB,CAnCmB,EAmCnB,IAnCyB,EAmCzB,MAAA,EAAA,EAAA;CACA,CAAA,AACA,AA2DA,AACA;;AD3LA;;;AAGA,AAKC,MAAA,0BAAA,GAAA,EAAA,CAAA;;;;AADD,AAIC,MAAA,yBAAA,GAAA,GAAA,CAAA;;;;AAAD,AAGC,MAAA,+BAAA,GAFG,IAAI,cAAc,CAAuB,iCAAiC,CAAC,CAAC;;;;;;AAMhF,AAAA,SAAA,gDAAA,CAAC,OAAA,EAAD;IAEE,OAAO,MAAM,OAAA,CAAQ,gBAAC,CAAgB,UAAC,EAAU,CAAE;CACpD;;;;AAID,AADC,MAAA,wCAAA,GAAA;IAEC,OAAM,EAAE,+BAAS;IACjB,IAAI,EAAE,CAAC,OAAK,CAAA;IACZ,UAAC,EAAA,gDAAA;CACF,CAAC;;;;;AAKF,AAAC,MAAA,8BAAA,GAAA;IACC,OAAO,EAAE,iBAAA;IACT,WAAW,EAAE,UAAA,CAAW,MAAM,qBAAA,CAAsB;IACpD,KAAK,EAAE,IAAA;CACR,CAAC;;;;;AAKF,AAAA,SAAA,kCAAA,GAAA;IACE,OAAO,KAAA,CAAM,iEAAC;QACD,2EAA2E;QAC3E,kEAAkE,CAAC,CAAC;CAClF;AACD,AAAA,MAAA,qBAAA,CAAA;;;;;;;;;;;;IAoDA,WAAA,CAjBsB,QAAU,EAAoB,QAAU,EACxC,iBAAmB,EACnB,KAAO,EACP,kBAAoB,EACnB,eAAA,EACA,IAAM,EACL,UAAY,EACZ,SAAW,EAUnC;QAjBsB,IAAtB,CAAA,QAAsB,GAAA,QAAA,CAAU;QAAoB,IAApD,CAAA,QAAoD,GAAA,QAAA,CAAU;QACxC,IAAtB,CAAA,iBAAsB,GAAA,iBAAA,CAAmB;QACnB,IAAtB,CAAA,KAAsB,GAAA,KAAA,CAAO;QACP,IAAtB,CAAA,kBAAsB,GAAA,kBAAA,CAAoB;QACnB,IAAvB,CAAA,eAAuB,GAAA,eAAA,CAAA;QACA,IAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QACL,IAAxB,CAAA,UAAwB,GAAA,UAAA,CAAY;QACZ,IAAxB,CAAA,SAAwB,GAAA,SAAA,CAAW;QArCzB,IAAV,CAAA,UAAU,GAAsB,KAAA,CAAM;;;;QAMnC,IAAH,CAAA,4BAAG,GAAA,KAAA,CAAA;;;;QAQH,IAAA,CAAA,SAFG,GAAA,MAEH,GAFG,CAAA;;;;QAMH,IAAA,CAAA,UAHG,GAAA,MAGH,GAHG,CAAA;KAsBoC;;;;;IAXvC,IAJG,gBAAA,GAIH;QACI,OAJO,IAAA,CAAK,YAAC,CAAY;KAK1B;;;;;IAKH,IAPG,gBAAA,CAAA,YAAA,EAOH;QACI,IAAI,CAPC,YAAC,GAAc,YAAA,CAAa;KAQlC;;;;IAwBH,WApBG,GAoBH;QACI,IAAI,CApBC,aAAC,EAAa,CAAE;KAqBtB;;;;IAIH,IArBG,SAAA,GAqBH;QACI,OArBO,IAAA,CAAK,UAAC,IAAa,IAAA,CAAK,YAAC,CAAY,SAAC,CAAS;KAsBvD;;;;;IAKH,SAvBG,GAuBH;QACI,IAAI,CAvBC,cAAC,EAAc,CAAE;QAwBtB,IAAI,CAvBC,iBAAC,EAAiB,CAAE;KAwB1B;;;;;IAKH,UAzBG,GAyBH;QACI,IAAI,IAzBC,CAAI,WAAC,IAAc,IAAA,CAAK,WAAC,CAAW,WAAC,EAAW,EAAG;YA0BtD,IAAI,CAzBC,WAAC,CAAW,MAAC,EAAM,CAAE;YA0B1B,IAAI,CAzBC,2BAAC,CAA2B,WAAC,EAAW,CAAE;SA0BhD;QAED,IAAI,CAzBC,iBAAC,EAAiB,CAAE;QA2BzB,IAAI,IAzBC,CAAI,UAAC,EAAW;YA0BnB,IAAI,CAzBC,UAAC,GAAY,KAAA,CAAM;;;;;YA+BxB,IAAI,CAzBC,kBAAC,CAAkB,aAAC,EAAa,CAAE;SA0BzC;KACF;;;;;;IAMH,IAzBG,mBAAA,GAyBH;QACI,OAzBO,KAAA,CA0BL,IAAI,CAzBC,gBAAC,EA0BN,IAAI,CAzBC,YAAC,CAAY,WAAC,CAAW,MAAC,EA0B/B,IAAI,CAzBC,mBAAC,CA0BP,CAzBC;KA0BH;;;;;IAKH,IA3BG,gBAAA,GA2BH;QACI,OA3BO,KAAA,CAAM,GAAC,IAAG,CAAI,YAAC,CAAY,OAAC,CAAO,GAAC,CAAG,MAAC,IAAS,MAAA,CAAO,iBAAC,CAAiB,CAAC,CAAC;KA4BpF;;;;;IAKH,IA7BG,YAAA,GA6BH;QACI,IAAI,IA7BC,CAAI,YAAC,IAAe,IAAA,CAAK,YAAC,CAAY,WAAC,EAAY;YA8BtD,OA7BO,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAC,CAAU;SA8BjD;QAED,OA7BO,IAAA,CAAK;KA8Bb;;;;;IAKH,IA/BG,mBAAA,GA+BH;QACI,IAAI,CA/BC,IAAC,CAAI,SAAC,EAAU;YAgCnB,OA/BOA,EAAA,CAAa,IAAC,CAAI,CAAC;SAgC3B;QAED,OA/BO,OAAA,CAAQ,IAAC,CAAI,KAAC,CAgCnB,SAAS,CA/BC,IAAC,CAAI,SAAC,EAAU,OAAA,CAAQ,EAgClC,SAAS,CA/BC,IAAC,CAAI,SAAC,EAAU,UAAA,CAAW,CAgCtC,CA/BC,CAAC,IAAC,CAAI,MAAC,EAAO,CAAA,KAAqB,KA4BzC;YAIM,uBA/BM,WAAA,IAAc,KAAA,CAAM,MAAU,CAAA,CAAY;YAgChD,uBA/BM,SAAA,GAAY,IAAA,CAAK,UAAC;gBAgCpB,IAAI,CA/BC,UAAC,CAAU,WAAC,CAAW,aAAC,GAAe,IAAA,CAAK;YAiCrD,OA/BO,IAAA,CAAK,UAAC;gBAgCN,WAAW,KA/BK,IAAA,CAAK,QAAC,CAAQ,aAAC;iBAgC9B,CA/BC,SAAC,IAAY,CAAA,SAAE,CAAS,QAAC,CAAQ,WAAC,CAAW,CAAC;iBAgC/C,CA/BC,CAAC,IAAC,CAAI,WAAC,IAAc,CAAA,IAAE,CAAI,WAAC,CAAW,cAAC,CAAc,QAAC,CAAQ,WAAC,CAAW,CAAC,CAAC;SAgCvF,CA/BC,CAAC,MAAC,EAAM,CAAE;KAgCb;;;;;;;;IAQH,UA/BG,CAAA,KAAA,EA+BH;QACI,OAAO,CA/BC,OAAC,CAAO,IAAC,CAAI,CAAC,IAAC,CAAI,MAAM,IAAA,CAAK,gBAAC,CAAgB,KAAC,CAAK,CAAC,CAAC;KAgChE;;;;;;;;;IASH,gBA/BG,CAAA,EAAA,EA+BH;QACI,IAAI,CA/BC,SAAC,GAAW,EAAA,CAAG;KAgCrB;;;;;;;;;IASH,iBA/BG,CAAA,EAAA,EA+BH;QACI,IAAI,CA/BC,UAAC,GAAY,EAAA,CAAG;KAgCtB;;;;;IAKH,cAlCG,CAAA,KAAA,EAkCH;QACI,IAAI,KAlCC,CAAK,OAAC,KAAW,MAAA,IAAU,IAAA,CAAK,SAAC,EAAU;YAmC9C,IAAI,CAlCC,gBAAC,EAAgB,CAAE;YAmCxB,IAAI,CAlCC,UAAC,EAAU,CAAE;YAmClB,KAAK,CAlCC,eAAC,EAAe,CAAE;SAmCzB;aAlCM,IAAA,IAAK,CAAI,YAAC,IAAe,KAAA,CAAM,OAAC,KAAW,KAAA,IAAS,IAAA,CAAK,SAAC,EAAU;YAmCzE,IAAI,CAlCC,YAAC,CAAY,qBAAC,EAAqB,CAAE;YAmC1C,IAAI,CAlCC,gBAAC,EAAgB,CAAE;YAmCxB,KAAK,CAlCC,cAAC,EAAc,CAAE;SAmCxB;aAlCM;YAmCL,uBAlCM,cAAA,GAAiB,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAC,CAAU;YAmChE,uBAlCM,UAAA,GAAa,KAAA,CAAM,OAAC,KAAW,QAAA,IAAY,KAAA,CAAM,OAAC,KAAW,UAAA,CAAW;YAoC9E,IAAI,IAlCC,CAAI,SAAC,EAAU;gBAmClB,IAAI,CAlCC,YAAC,CAAY,WAAC,CAAW,SAAC,CAAS,KAAC,CAAK,CAAC;aAmChD;iBAlCM,IAAA,UAAK,EAAW;gBAmCrB,IAAI,CAlCC,SAAC,EAAS,CAAE;aAmClB;YAED,OAAO,CAlCC,OAAC,EAAO,CAAE,IAAC,CAAI,MAkC7B;gBACQ,IAAI,UAlCC,IAAa,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,UAAC,KAAc,cAAA,EAAgB;oBAmC7E,IAAI,CAlCC,eAAC,EAAe,CAAE;iBAmCxB;aACF,CAlCC,CAAC;SAmCJ;KACF;;;;;IAKH,YArCG,CAAA,KAAA,EAqCH;;;;QAII,IAAI,QArCC,CAAQ,aAAC,KAAiB,KAAA,CAAM,MAAC,EAAO;YAsC3C,IAAI,CArCC,SAAC,CAAS,EAAC,KAAC,CAAK,MAAU,GAAkB,KAAC,CAAK,CAAC;YAsCzD,IAAI,CArCC,SAAC,EAAS,CAAE;SAsClB;KACF;;;;IAIH,YAvCG,GAuCH;QACI,IAAI,CAvCC,cAAC,EAAc,CAAE;QAwCtB,IAAI,CAvCC,iBAAC,CAAiB,IAAC,CAAI,CAAC;KAwC9B;;;;;;;;IA/BA,iBAAA,CAAA,aAAA,GAAA,KAAA,EAAH;QAwCI,IAAI,IAvCC,CAAI,UAAC,IAAa,IAAA,CAAK,UAAC,CAAU,gBAAC,KAAoB,MAAA,EAAQ;YAwClE,IAAI,aAvCC,EAAc;gBAwCjB,IAAI,CAvCC,UAAC,CAAU,0BAAC,EAA0B,CAAE;aAwC9C;iBAvCM;gBAwCL,IAAI,CAvCC,UAAC,CAAU,gBAAC,GAAkB,QAAA,CAAS;aAwC7C;YAED,IAAI,CAvCC,4BAAC,GAA8B,IAAA,CAAK;SAwC1C;KACF;;;;;IApCA,iBAAA,GAAH;QA0CI,IAAI,IAzCC,CAAI,4BAAC,EAA6B;YA0CrC,IAAI,CAzCC,UAAC,CAAU,gBAAC,GAAkB,MAAA,CAAO;YA0C1C,IAAI,CAzCC,4BAAC,GAA8B,KAAA,CAAM;SA0C3C;KACF;;;;;;;;;;;IA9BA,eAAA,GAAH;QA0CI,uBAzCM,iBAAA,GAAoB,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,eAAC,IAAkB,CAAA,CAAE;QA0C7E,uBAzCM,UAAA,GAAa,QAAA,CAAS,4BAAC,CAA4B,iBAAC,EA0CtD,IAAI,CAzCC,YAAC,CAAY,OAAC,EAAQ,IAAA,CAAK,YAAC,CAAY,YAAC,CAAY,CAAC;QA0C/D,uBAzCM,YAAA,GAAe,CAAA,iBAAE,GAAmB,UAAA,IAAc,0BAAA,CAA2B;QA0CnF,uBAzCM,QAAA,GAAW,IAAA,CAAK,YAAC,CAAY,aAAC,EAAa,CAAE;QA2CnD,IAAI,YAzCC,GAAc,QAAA,EAAU;;YA2C3B,IAAI,CAzCC,YAAC,CAAY,aAAC,CAAa,YAAC,CAAY,CAAC;SA0C/C;aAzCM,IAAA,YAAK,GAAc,0BAAA,GAA6B,QAAA,GAAW,yBAAA,EAA2B;;YA2C3F,uBAzCM,YAAA,GA0CF,IAAI,CAzCC,GAAC,CAAG,CAAC,EAAE,YAAA,GAAe,yBAAA,GAA4B,0BAAA,CAA2B,CAAC;YA0CvF,IAAI,CAzCC,YAAC,CAAY,aAAC,CAAa,YAAC,CAAY,CAAC;SA0C/C;KACF;;;;;;IAnCA,0BAAA,GAAH;QA0CI,uBAzCM,WAAA,GAAc,KAAA,CAAM,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,QAAC,CAAQ,YAAC,EAAY,CAAE,CAAC;QA0CnE,uBAzCM,aAAA,GAAgB,GAAA,CAAI,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,OAAC,CAAO,OAAC,EAAQ,MA0ChE,IAAI,CAzCC,iBAAC,CAAiB,uBAAC,EAAuB,CAAE,CAAC;;QA4CpD,OAzCO,OAAA,CAAQ,IAAC,CAAI,KAAC,CAAK,WAAC,EAAY,aAAA,CAAc,CAAC;aA4CnD,IAzCC,CAAI,SAAC,EAAU,MAyCvB;YACQ,IAAI,CAzCC,gBAAC,EAAgB,CAAE;YA0CxB,IAAI,CAzCC,YAAC,CAAY,cAAC,EAAc,CAAE;YA0CnC,OAzCO,IAAA,CAAK,mBAAC,CAAmB;SA0CjC,CAzCC;aA2CD,IAzCC,CAAI,KAAC,CAAK;aA2CX,SAzCC,CAAS,KAAC,IAAQ,IAAA,CAAK,iBAAC,CAAiB,KAAC,CAAK,CAAC,CAAC;KA0CtD;;;;;IAtCA,aAAA,GAAH;QA4CI,IAAI,IA3CC,CAAI,WAAC,EAAY;YA4CpB,IAAI,CA3CC,UAAC,EAAU,CAAE;YA4ClB,IAAI,CA3CC,WAAC,CAAW,OAAC,EAAO,CAAE;YA4C3B,IAAI,CA3CC,WAAC,GAAa,IAAA,CAAK;SA4CzB;KACF;;;;;IAzCA,gBAAA,CAAA,KAAA,EAAH;QA+CI,uBA9CM,SAAA,GAAY,IAAA,CAAK,YAAC,CAAY,WAAC,GAAa,IAAA,CAAK,YAAC,CAAY,WAAC,CAAW,KAAC,CAAK,GAAG,KAAA,CAAM;;;QAkD/F,uBA9CM,UAAA,GAAa,SAAA,IAAa,IAAA,GAAO,SAAA,GAAY,EAAA,CAAG;;;QAkDtD,IAAI,IA9CC,CAAI,UAAC,EAAW;YA+CnB,IAAI,CA9CC,UAAC,CAAU,QAAC,CAAQ,KAAC,GAAO,UAAA,CAAW;SA+C7C;aA9CM;YA+CL,IAAI,CA9CC,QAAC,CAAQ,aAAC,CAAa,KAAC,GAAO,UAAA,CAAW;SA+ChD;KACF;;;;;;;;IAvCA,iBAAA,CAAA,KAAA,EAAH;QAgDI,IAAI,KA/CC,IAAQ,KAAA,CAAM,MAAC,EAAO;YAgDzB,IAAI,CA/CC,4BAAC,CAA4B,KAAC,CAAK,MAAC,CAAM,CAAC;YAgDhD,IAAI,CA/CC,gBAAC,CAAgB,KAAC,CAAK,MAAC,CAAM,KAAC,CAAK,CAAC;YAgD1C,IAAI,CA/CC,SAAC,CAAS,KAAC,CAAK,MAAC,CAAM,KAAC,CAAK,CAAC;YAgDnC,IAAI,CA/CC,QAAC,CAAQ,aAAC,CAAa,KAAC,EAAK,CAAE;YAgDpC,IAAI,CA/CC,YAAC,CAAY,gBAAC,CAAgB,KAAC,CAAK,MAAC,CAAM,CAAC;SAgDlD;QAED,IAAI,CA/CC,UAAC,EAAU,CAAE;KAgDnB;;;;;;IA1CA,4BAAA,CAAA,IAAA,EAAH;QAiDI,IAAI,CAhDC,YAAC,CAAY,OAAC,CAAO,OAAC,CAAO,MAAC,IAgDvC;YACM,IAAI,MAhDC,IAAS,IAAA,IAAQ,MAAA,CAAO,QAAC,EAAS;gBAiDrC,MAAM,CAhDC,QAAC,EAAQ,CAAE;aAiDnB;SACF,CAhDC,CAAC;KAiDJ;;;;IA9CA,cAAA,GAAH;QAmDI,IAAI,CAlDC,IAAC,CAAI,YAAC,EAAa;YAmDtB,MAlDM,kCAAA,EAAmC,CAAE;SAmD5C;QAED,IAAI,CAlDC,IAAC,CAAI,WAAC,EAAY;YAmDrB,IAAI,CAlDC,OAAC,GAAS,IAAI,cAAA,CAAe,IAAC,CAAI,YAAC,CAAY,QAAC,EAAS,IAAA,CAAK,iBAAC,CAAiB,CAAC;YAmDtF,IAAI,CAlDC,WAAC,GAAa,IAAA,CAAK,QAAC,CAAQ,MAAC,CAAM,IAAC,CAAI,iBAAC,EAAiB,CAAE,CAAC;SAmDnE;aAlDM;;YAoDL,IAAI,CAlDC,WAAC,CAAW,QAAC,EAAQ,CAAE,KAAC,GAAO,IAAA,CAAK,aAAC,EAAa,CAAE;YAmDzD,IAAI,CAlDC,WAAC,CAAW,UAAC,EAAU,CAAE;SAmD/B;QAED,IAAI,IAlDC,CAAI,WAAC,IAAc,CAAA,IAAE,CAAI,WAAC,CAAW,WAAC,EAAW,EAAG;YAmDvD,IAAI,CAlDC,WAAC,CAAW,MAAC,CAAM,IAAC,CAAI,OAAC,CAAO,CAAC;YAmDtC,IAAI,CAlDC,2BAAC,GAA6B,IAAA,CAAK,0BAAC,EAA0B,CAAE;SAmDtE;QAED,IAAI,CAlDC,YAAC,CAAY,cAAC,EAAc,CAAE;QAmDnC,IAAI,CAlDC,UAAC,GAAY,IAAA,CAAK;KAmDxB;;;;IAhDA,iBAAA,GAAH;QAqDI,OApDO,IAAI,aAAA,CAAc;YAqDvB,gBAAgB,EApDE,IAAA,CAAK,mBAAC,EAAmB;YAqD3C,cAAc,EApDE,IAAA,CAAK,eAAC,EAAe;YAqDrC,KAAK,EApDE,IAAA,CAAK,aAAC,EAAa;YAqD1B,SAAS,EApDE,IAAA,CAAK,IAAC,GAAM,IAAA,CAAK,IAAC,CAAI,KAAC,GAAO,KAAA;SAqD1C,CApDC,CAAC;KAqDJ;;;;IAlDA,mBAAA,GAAH;QAuDI,IAAI,CAtDC,iBAAC,GAAmB,IAAA,CAAM,QAAC,CAAQ,QAAC,EAAQ,CAAE,WAAC,CAuDhD,IAAI,CAtDC,oBAAC,EAAoB,EAuD1B,EAAC,OAtDC,EAAQ,OAAA,EAAS,OAAA,EAAS,QAAA,EAAS,EAAE,EAAA,QAAE,EAAS,OAAA,EAAS,QAAA,EAAU,KAAA,EAAM,CAAC;aAuD3E,oBAtDC,CAuDE,EAAC,OAtDC,EAAQ,OAAA,EAAS,OAAA,EAAS,KAAA,EAAM,EAAE,EAAA,QAAE,EAAS,OAAA,EAAS,QAAA,EAAU,QAAA,EAAS,CAuD9E,CAtDC;QAuDN,OAtDO,IAAA,CAAK,iBAAC,CAAiB;KAoChC;;;;IAjCC,oBAAA,GAAH;QAyDI,OAxDO,IAAA,CAAK,UAAC,GAAY,IAAA,CAAK,UAAC,CAAU,uBAAC,GAAyB,IAAA,CAAK,QAAC,CAAQ;KAyDlF;;;;;IArDA,aAAA,GAAH;QA2DI,OA1DO,IAAA,CAAK,oBAAC,EAAoB,CAAE,aAAC,CAAa,qBAAC,EAAqB,CAAE,KAAC,CAAK;KA2DhF;;;;;IAvDA,gBAAA,GAAH;QA6DI,IAAI,CA5DC,YAAC,CAAY,WAAC,CAAW,aAAC,CAAa,CAAC,CAAC,CAAC,CAAC;KA6DjD;;AA1DI,qBAAP,CAAA,UAAO,GAAoC;IA6D3C,EA5DE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBA6DvB,QAAQ,EA5DE,CA4DZ;gEACA,CAAiE;gBAC/D,IAAI,EA5DE;oBA6DJ,MAAM,EA5DE,UAAA;oBA6DR,cAAc,EA5DE,KAAA;oBA6DhB,mBAAmB,EA5DE,MAAA;oBA6DrB,gBAAgB,EA5DE,OAAA;oBA6DlB,8BAA8B,EA5DE,kBAAA;oBA6DhC,sBAAsB,EA5DE,sBAAA;oBA6DxB,kBAAkB,EA5DE,kBAAA;;;oBA+DpB,WAAW,EA5DE,gBAAA;oBA6Db,QAAQ,EA5DE,cAAA;oBA6DV,SAAS,EA5DE,sBAAA;oBA6DX,WAAW,EA5DE,wBAAA;iBA6Dd;gBACD,SAAS,EA5DE,CAAA,8BAAE,CAA8B;aA6D5C,EA5DC,EAAG;CA6DJ,CA5DC;;;;AAED,qBAAD,CAAA,cAAC,GAAA,MAAA;IA+DD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,OAAO,GAAG;IACjB,EAAC,IAAI,EAAE,gBAAgB,GAAG;IAC1B,EAAC,IAAI,EAAE,MAAM,GAAG;IAChB,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,+BAA+B,EAAG,EAAE,EAAG,EAAC;IAC9F,EAAC,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IAC1D,EAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAG,EAAC;IACvE,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAG,EAAC;CAC1F,CAAC;AA7DK,qBAAP,CAAA,cAAO,GAAyD;IA+DhE,cAAc,EA9DE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,gBAAE,EAAgB,EAAG,EAAE;IA+D7D,kBAAkB,EA9DE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,iBAAE,EAAiB,EAAG,EAAE;CA+DjE,CA9DC,AAiEF,AA6DC;;ADjnBD,MAAA,oBAAA,CAAA;;AAC0C,oBAA1C,CAAA,UAA0C,GAAoC;IAA9E,EACE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAAtB,OAAO,EACE,CAAA,cAAE,EAAe,aAAA,EAAe,cAAA,EAAgB,YAAA,CAAa;gBAAtE,OAAO,EACE,CAAA,cAAE,EAAe,cAAA,EAAgB,qBAAA,EAAuB,cAAA,CAAe;gBAAhF,YAAY,EACE,CAAA,cAAE,EAAe,qBAAA,CAAsB;gBAArD,SAAS,EACE,CAAA,wCAAE,CAAwC;aAAtD,EACC,EAAG;CAAJ,CACC;;;;AAED,oBAAD,CAAA,cAAC,GAAA,MAAA,EAEA,CANoC,AASrC,AAQC;;ADzCD;;GAEG,AAEH,AAA8jB;;"}