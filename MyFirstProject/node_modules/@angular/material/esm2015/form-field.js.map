{"version":3,"file":"form-field.js","sources":["../../../src/lib/form-field/index.ts","../../../src/lib/form-field/form-field-module.ts","../../../src/lib/form-field/form-field.ts","../../../src/lib/form-field/suffix.ts","../../../src/lib/form-field/prefix.ts","../../../src/lib/form-field/placeholder.ts","../../../src/lib/form-field/hint.ts","../../../src/lib/form-field/form-field-errors.ts","../../../src/lib/form-field/form-field-control.ts","../../../src/lib/form-field/error.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdError} from './error';\nimport {MdFormField} from './form-field';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MdError} from './error';\nimport {MdFormFieldControl} from './form-field-control';\nimport {\n  getMdFormFieldDuplicatedHintError,\n  getMdFormFieldMissingControlError,\n  getMdFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MdFormFieldControl<any>;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdError>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMdFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMdFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\n  // MdInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_control.focus()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\n      'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Focuses this control.\n * @abstract\n * @return {?}\n */\nfocus() {}\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["nextUniqueId"],"mappings":"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"}