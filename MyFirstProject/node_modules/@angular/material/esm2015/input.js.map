{"version":3,"file":"input.js","sources":["../../../src/lib/input/index.ts","../../../src/lib/input/input-module.ts","../../../src/lib/input/autosize.ts","../../../src/lib/input/input.ts","../../../src/lib/input/input-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MatInput,MatInputModule,MatTextareaAutosize} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdInput} from './input';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nimport {MdFormFieldModule} from '@angular/material/form-field';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdInput,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MdFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\n    // `MdFormField`.\n    MdFormFieldModule,\n    MdInput,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    this.resizeToFitContent();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    const /** @type {?} */ value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'mdTextareaAutosize, matTextareaAutosize',\n  host: {\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\nimport {getMdInputUnsupportedTypeError} from './input-errors';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `md-input-${nextUniqueId++}`;\n  protected _errorOptions: ErrorOptions;\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\n              protected _renderer: Renderer2,\n              protected _platform: Platform,\npublic ngControl: NgControl,\n               protected _parentForm: NgForm,\n               protected _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\n    const /** @type {?} */ oldState = this.errorState;\n    const /** @type {?} */ ngControl = this.ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMdInputUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\n}\n"],"names":[],"mappings":"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"}