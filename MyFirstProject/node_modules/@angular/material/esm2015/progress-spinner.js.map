{"version":3,"file":"progress-spinner.js","sources":["../../../src/lib/progress-spinner/index.ts","../../../src/lib/progress-spinner/progress-spinner-module.ts","../../../src/lib/progress-spinner/progress-spinner.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MatProgressSpinner,MatProgressSpinnerBase,MatProgressSpinnerCssMatStyler,MatProgressSpinnerModule,MatSpinner} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nexport class MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0Â° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}