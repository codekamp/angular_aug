{"version":3,"file":"progress-bar.js","sources":["../../../src/lib/progress-bar/index.ts","../../../src/lib/progress-bar/progress-bar-module.ts","../../../src/lib/progress-bar/progress-bar.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressBarModule,MdProgressBar,MatProgressBar,MatProgressBarModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}